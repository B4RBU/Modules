

Microchip Technology PIC LITE Macro Assembler V1.45 build -152302408 
                                                                                               Wed Jun 13 12:10:16 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	16F1619
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	cinit,global,class=CODE,merge=1,delta=2
     5                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	clrtext,global,class=CODE,delta=2
     8                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    11                           	psect	text1,local,class=CODE,merge=1,delta=2
    12                           	psect	text2,local,class=CODE,merge=1,delta=2
    13                           	psect	text3,local,class=CODE,merge=1,delta=2
    14                           	psect	text4,local,class=CODE,merge=1,delta=2
    15                           	psect	swtext1,local,class=CONST,delta=2
    16                           	psect	text5,local,class=CODE,merge=1,delta=2
    17                           	psect	text6,local,class=CODE,merge=1,delta=2
    18                           	psect	text7,local,class=CODE,merge=1,delta=2
    19                           	psect	text8,local,class=CODE,merge=1,delta=2
    20                           	psect	text9,local,class=CODE,merge=1,delta=2
    21                           	psect	text10,local,class=CODE,merge=1,delta=2
    22                           	psect	text11,local,class=CODE,merge=1,delta=2
    23                           	psect	text12,local,class=CODE,merge=1,delta=2
    24                           	psect	text13,local,class=CODE,merge=1,delta=2
    25                           	psect	text14,local,class=CODE,merge=1,delta=2
    26                           	psect	text15,local,class=CODE,merge=1,delta=2
    27                           	psect	text16,local,class=CODE,merge=1,delta=2
    28                           	psect	text17,local,class=CODE,merge=1,delta=2
    29                           	psect	text18,local,class=CODE,merge=1,delta=2
    30                           	psect	text19,local,class=CODE,merge=1,delta=2
    31                           	psect	text20,local,class=CODE,merge=1,delta=2
    32                           	psect	text21,local,class=CODE,merge=1,delta=2
    33                           	psect	text22,local,class=CODE,merge=1,delta=2
    34                           	psect	text23,local,class=CODE,merge=1,delta=2
    35                           	psect	text24,local,class=CODE,merge=1,delta=2,group=1
    36                           	psect	text25,local,class=CODE,merge=1,delta=2
    37                           	psect	text26,local,class=CODE,merge=1,delta=2
    38                           	psect	text27,local,class=CODE,merge=1,delta=2
    39                           	psect	intentry,global,class=CODE,delta=2
    40                           	psect	text29,local,class=CODE,merge=1,delta=2
    41                           	psect	swtext2,local,class=CONST,delta=2
    42                           	psect	text30,local,class=CODE,merge=1,delta=2
    43                           	psect	text31,local,class=CODE,merge=1,delta=2
    44                           	psect	text32,local,class=CODE,merge=1,delta=2
    45                           	dabs	1,0x7E,2
    46  0000                     
    47                           ; Version 1.45
    48                           ; Generated 16/11/2017 GMT
    49                           ; 
    50                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    51                           ; All rights reserved.
    52                           ; 
    53                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    54                           ; 
    55                           ; Redistribution and use in source and binary forms, with or without modification, are
    56                           ; permitted provided that the following conditions are met:
    57                           ; 
    58                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    59                           ;        conditions and the following disclaimer.
    60                           ; 
    61                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    62                           ;        of conditions and the following disclaimer in the documentation and/or other
    63                           ;        materials provided with the distribution.
    64                           ; 
    65                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    66                           ;        software without specific prior written permission.
    67                           ; 
    68                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    69                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    70                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    71                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    72                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    73                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    74                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    75                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    76                           ; 
    77                           ; 
    78                           ; Code-generator required, PIC16F1619 Definitions
    79                           ; 
    80                           ; SFR Addresses
    81  0000                     	;# 
    82  0001                     	;# 
    83  0002                     	;# 
    84  0003                     	;# 
    85  0004                     	;# 
    86  0005                     	;# 
    87  0006                     	;# 
    88  0007                     	;# 
    89  0008                     	;# 
    90  0009                     	;# 
    91  000A                     	;# 
    92  000B                     	;# 
    93  000C                     	;# 
    94  000D                     	;# 
    95  000E                     	;# 
    96  0010                     	;# 
    97  0011                     	;# 
    98  0012                     	;# 
    99  0013                     	;# 
   100  0014                     	;# 
   101  0015                     	;# 
   102  0016                     	;# 
   103  0016                     	;# 
   104  0017                     	;# 
   105  0018                     	;# 
   106  0019                     	;# 
   107  001A                     	;# 
   108  001A                     	;# 
   109  001B                     	;# 
   110  001B                     	;# 
   111  001C                     	;# 
   112  001D                     	;# 
   113  001E                     	;# 
   114  001F                     	;# 
   115  008C                     	;# 
   116  008D                     	;# 
   117  008E                     	;# 
   118  0090                     	;# 
   119  0091                     	;# 
   120  0092                     	;# 
   121  0093                     	;# 
   122  0094                     	;# 
   123  0095                     	;# 
   124  0096                     	;# 
   125  0098                     	;# 
   126  0099                     	;# 
   127  009A                     	;# 
   128  009B                     	;# 
   129  009B                     	;# 
   130  009C                     	;# 
   131  009D                     	;# 
   132  009E                     	;# 
   133  009F                     	;# 
   134  010C                     	;# 
   135  010D                     	;# 
   136  010E                     	;# 
   137  0111                     	;# 
   138  0112                     	;# 
   139  0113                     	;# 
   140  0114                     	;# 
   141  0115                     	;# 
   142  0116                     	;# 
   143  0117                     	;# 
   144  0118                     	;# 
   145  0119                     	;# 
   146  011C                     	;# 
   147  018C                     	;# 
   148  018D                     	;# 
   149  018E                     	;# 
   150  0191                     	;# 
   151  0191                     	;# 
   152  0192                     	;# 
   153  0193                     	;# 
   154  0193                     	;# 
   155  0194                     	;# 
   156  0195                     	;# 
   157  0196                     	;# 
   158  0197                     	;# 
   159  0199                     	;# 
   160  0199                     	;# 
   161  0199                     	;# 
   162  019A                     	;# 
   163  019A                     	;# 
   164  019A                     	;# 
   165  019B                     	;# 
   166  019B                     	;# 
   167  019B                     	;# 
   168  019B                     	;# 
   169  019B                     	;# 
   170  019C                     	;# 
   171  019C                     	;# 
   172  019C                     	;# 
   173  019D                     	;# 
   174  019D                     	;# 
   175  019D                     	;# 
   176  019E                     	;# 
   177  019E                     	;# 
   178  019E                     	;# 
   179  019F                     	;# 
   180  019F                     	;# 
   181  019F                     	;# 
   182  019F                     	;# 
   183  019F                     	;# 
   184  020C                     	;# 
   185  020D                     	;# 
   186  020E                     	;# 
   187  0211                     	;# 
   188  0211                     	;# 
   189  0212                     	;# 
   190  0212                     	;# 
   191  0213                     	;# 
   192  0213                     	;# 
   193  0214                     	;# 
   194  0214                     	;# 
   195  0215                     	;# 
   196  0215                     	;# 
   197  0215                     	;# 
   198  0215                     	;# 
   199  0216                     	;# 
   200  0216                     	;# 
   201  0217                     	;# 
   202  0217                     	;# 
   203  028C                     	;# 
   204  028D                     	;# 
   205  028E                     	;# 
   206  0291                     	;# 
   207  0291                     	;# 
   208  0292                     	;# 
   209  0293                     	;# 
   210  0294                     	;# 
   211  0298                     	;# 
   212  0298                     	;# 
   213  0299                     	;# 
   214  029A                     	;# 
   215  029B                     	;# 
   216  029E                     	;# 
   217  030C                     	;# 
   218  030D                     	;# 
   219  030E                     	;# 
   220  038C                     	;# 
   221  038D                     	;# 
   222  038E                     	;# 
   223  0391                     	;# 
   224  0392                     	;# 
   225  0393                     	;# 
   226  0394                     	;# 
   227  0395                     	;# 
   228  0396                     	;# 
   229  0397                     	;# 
   230  0398                     	;# 
   231  0399                     	;# 
   232  040E                     	;# 
   233  0413                     	;# 
   234  0413                     	;# 
   235  0414                     	;# 
   236  0414                     	;# 
   237  0415                     	;# 
   238  0416                     	;# 
   239  0417                     	;# 
   240  0418                     	;# 
   241  041A                     	;# 
   242  041A                     	;# 
   243  041B                     	;# 
   244  041B                     	;# 
   245  041C                     	;# 
   246  041D                     	;# 
   247  041E                     	;# 
   248  041F                     	;# 
   249  0493                     	;# 
   250  0494                     	;# 
   251  0495                     	;# 
   252  0496                     	;# 
   253  049A                     	;# 
   254  049B                     	;# 
   255  049C                     	;# 
   256  049D                     	;# 
   257  058C                     	;# 
   258  058C                     	;# 
   259  058D                     	;# 
   260  058E                     	;# 
   261  058E                     	;# 
   262  058F                     	;# 
   263  0590                     	;# 
   264  0590                     	;# 
   265  0591                     	;# 
   266  0592                     	;# 
   267  0592                     	;# 
   268  0593                     	;# 
   269  0594                     	;# 
   270  0594                     	;# 
   271  0595                     	;# 
   272  0596                     	;# 
   273  0596                     	;# 
   274  0597                     	;# 
   275  0598                     	;# 
   276  0599                     	;# 
   277  059A                     	;# 
   278  059B                     	;# 
   279  059B                     	;# 
   280  059C                     	;# 
   281  059D                     	;# 
   282  060C                     	;# 
   283  060C                     	;# 
   284  060D                     	;# 
   285  060E                     	;# 
   286  060F                     	;# 
   287  060F                     	;# 
   288  0610                     	;# 
   289  0611                     	;# 
   290  0612                     	;# 
   291  0613                     	;# 
   292  0614                     	;# 
   293  0617                     	;# 
   294  0618                     	;# 
   295  0619                     	;# 
   296  061A                     	;# 
   297  061B                     	;# 
   298  061C                     	;# 
   299  0691                     	;# 
   300  0692                     	;# 
   301  0693                     	;# 
   302  0694                     	;# 
   303  0695                     	;# 
   304  0696                     	;# 
   305  0697                     	;# 
   306  0699                     	;# 
   307  069A                     	;# 
   308  0711                     	;# 
   309  0712                     	;# 
   310  0713                     	;# 
   311  0714                     	;# 
   312  0715                     	;# 
   313  0718                     	;# 
   314  0718                     	;# 
   315  0719                     	;# 
   316  071A                     	;# 
   317  071A                     	;# 
   318  071B                     	;# 
   319  071C                     	;# 
   320  071D                     	;# 
   321  0791                     	;# 
   322  0791                     	;# 
   323  0792                     	;# 
   324  0793                     	;# 
   325  0793                     	;# 
   326  0794                     	;# 
   327  0795                     	;# 
   328  0795                     	;# 
   329  0796                     	;# 
   330  0797                     	;# 
   331  0797                     	;# 
   332  0798                     	;# 
   333  0799                     	;# 
   334  079A                     	;# 
   335  080C                     	;# 
   336  080C                     	;# 
   337  080D                     	;# 
   338  080E                     	;# 
   339  080E                     	;# 
   340  080F                     	;# 
   341  0810                     	;# 
   342  0810                     	;# 
   343  0811                     	;# 
   344  0812                     	;# 
   345  0812                     	;# 
   346  0813                     	;# 
   347  0814                     	;# 
   348  0815                     	;# 
   349  0816                     	;# 
   350  0817                     	;# 
   351  0818                     	;# 
   352  0819                     	;# 
   353  081A                     	;# 
   354  081A                     	;# 
   355  081B                     	;# 
   356  081C                     	;# 
   357  081C                     	;# 
   358  081D                     	;# 
   359  088C                     	;# 
   360  088D                     	;# 
   361  088E                     	;# 
   362  088F                     	;# 
   363  088F                     	;# 
   364  0890                     	;# 
   365  0891                     	;# 
   366  0892                     	;# 
   367  0893                     	;# 
   368  0893                     	;# 
   369  0894                     	;# 
   370  0895                     	;# 
   371  0896                     	;# 
   372  0897                     	;# 
   373  0897                     	;# 
   374  0898                     	;# 
   375  0899                     	;# 
   376  0D8C                     	;# 
   377  0D8C                     	;# 
   378  0D8D                     	;# 
   379  0D8E                     	;# 
   380  0D8F                     	;# 
   381  0D8F                     	;# 
   382  0D90                     	;# 
   383  0D91                     	;# 
   384  0D92                     	;# 
   385  0D92                     	;# 
   386  0D93                     	;# 
   387  0D94                     	;# 
   388  0D95                     	;# 
   389  0D95                     	;# 
   390  0D96                     	;# 
   391  0D97                     	;# 
   392  0D98                     	;# 
   393  0D99                     	;# 
   394  0D9A                     	;# 
   395  0D9B                     	;# 
   396  0D9C                     	;# 
   397  0D9D                     	;# 
   398  0D9E                     	;# 
   399  0D9E                     	;# 
   400  0D9F                     	;# 
   401  0DA0                     	;# 
   402  0DA1                     	;# 
   403  0DA1                     	;# 
   404  0DA2                     	;# 
   405  0DA3                     	;# 
   406  0DA4                     	;# 
   407  0DA4                     	;# 
   408  0DA5                     	;# 
   409  0DA6                     	;# 
   410  0DA7                     	;# 
   411  0DA7                     	;# 
   412  0DA8                     	;# 
   413  0DA9                     	;# 
   414  0DAA                     	;# 
   415  0DAB                     	;# 
   416  0DAC                     	;# 
   417  0DAD                     	;# 
   418  0DAE                     	;# 
   419  0DAF                     	;# 
   420  0E0F                     	;# 
   421  0E10                     	;# 
   422  0E11                     	;# 
   423  0E12                     	;# 
   424  0E13                     	;# 
   425  0E14                     	;# 
   426  0E15                     	;# 
   427  0E16                     	;# 
   428  0E17                     	;# 
   429  0E18                     	;# 
   430  0E19                     	;# 
   431  0E1A                     	;# 
   432  0E1B                     	;# 
   433  0E1C                     	;# 
   434  0E1D                     	;# 
   435  0E1E                     	;# 
   436  0E1F                     	;# 
   437  0E20                     	;# 
   438  0E21                     	;# 
   439  0E22                     	;# 
   440  0E23                     	;# 
   441  0E24                     	;# 
   442  0E25                     	;# 
   443  0E26                     	;# 
   444  0E27                     	;# 
   445  0E28                     	;# 
   446  0E29                     	;# 
   447  0E2A                     	;# 
   448  0E2B                     	;# 
   449  0E2C                     	;# 
   450  0E2D                     	;# 
   451  0E2E                     	;# 
   452  0E90                     	;# 
   453  0E91                     	;# 
   454  0E92                     	;# 
   455  0E94                     	;# 
   456  0E95                     	;# 
   457  0E9C                     	;# 
   458  0E9D                     	;# 
   459  0E9E                     	;# 
   460  0E9F                     	;# 
   461  0EA0                     	;# 
   462  0EA1                     	;# 
   463  0EA2                     	;# 
   464  0EA3                     	;# 
   465  0EA4                     	;# 
   466  0EA5                     	;# 
   467  0EA6                     	;# 
   468  0EA7                     	;# 
   469  0F0F                     	;# 
   470  0F10                     	;# 
   471  0F11                     	;# 
   472  0F12                     	;# 
   473  0F13                     	;# 
   474  0F14                     	;# 
   475  0F15                     	;# 
   476  0F16                     	;# 
   477  0F17                     	;# 
   478  0F18                     	;# 
   479  0F19                     	;# 
   480  0F1A                     	;# 
   481  0F1B                     	;# 
   482  0F1C                     	;# 
   483  0F1D                     	;# 
   484  0F1E                     	;# 
   485  0F1F                     	;# 
   486  0F20                     	;# 
   487  0F21                     	;# 
   488  0F22                     	;# 
   489  0F23                     	;# 
   490  0F24                     	;# 
   491  0F25                     	;# 
   492  0F26                     	;# 
   493  0F27                     	;# 
   494  0F28                     	;# 
   495  0F29                     	;# 
   496  0F2A                     	;# 
   497  0F2B                     	;# 
   498  0F2C                     	;# 
   499  0F2D                     	;# 
   500  0F2E                     	;# 
   501  0F2F                     	;# 
   502  0F30                     	;# 
   503  0F31                     	;# 
   504  0F32                     	;# 
   505  0F33                     	;# 
   506  0F34                     	;# 
   507  0F35                     	;# 
   508  0F36                     	;# 
   509  0F37                     	;# 
   510  0FE4                     	;# 
   511  0FE5                     	;# 
   512  0FE6                     	;# 
   513  0FE7                     	;# 
   514  0FE8                     	;# 
   515  0FE9                     	;# 
   516  0FEA                     	;# 
   517  0FEB                     	;# 
   518  0FED                     	;# 
   519  0FEE                     	;# 
   520  0FEF                     	;# 
   521  0000                     	;# 
   522  0001                     	;# 
   523  0002                     	;# 
   524  0003                     	;# 
   525  0004                     	;# 
   526  0005                     	;# 
   527  0006                     	;# 
   528  0007                     	;# 
   529  0008                     	;# 
   530  0009                     	;# 
   531  000A                     	;# 
   532  000B                     	;# 
   533  000C                     	;# 
   534  000D                     	;# 
   535  000E                     	;# 
   536  0010                     	;# 
   537  0011                     	;# 
   538  0012                     	;# 
   539  0013                     	;# 
   540  0014                     	;# 
   541  0015                     	;# 
   542  0016                     	;# 
   543  0016                     	;# 
   544  0017                     	;# 
   545  0018                     	;# 
   546  0019                     	;# 
   547  001A                     	;# 
   548  001A                     	;# 
   549  001B                     	;# 
   550  001B                     	;# 
   551  001C                     	;# 
   552  001D                     	;# 
   553  001E                     	;# 
   554  001F                     	;# 
   555  008C                     	;# 
   556  008D                     	;# 
   557  008E                     	;# 
   558  0090                     	;# 
   559  0091                     	;# 
   560  0092                     	;# 
   561  0093                     	;# 
   562  0094                     	;# 
   563  0095                     	;# 
   564  0096                     	;# 
   565  0098                     	;# 
   566  0099                     	;# 
   567  009A                     	;# 
   568  009B                     	;# 
   569  009B                     	;# 
   570  009C                     	;# 
   571  009D                     	;# 
   572  009E                     	;# 
   573  009F                     	;# 
   574  010C                     	;# 
   575  010D                     	;# 
   576  010E                     	;# 
   577  0111                     	;# 
   578  0112                     	;# 
   579  0113                     	;# 
   580  0114                     	;# 
   581  0115                     	;# 
   582  0116                     	;# 
   583  0117                     	;# 
   584  0118                     	;# 
   585  0119                     	;# 
   586  011C                     	;# 
   587  018C                     	;# 
   588  018D                     	;# 
   589  018E                     	;# 
   590  0191                     	;# 
   591  0191                     	;# 
   592  0192                     	;# 
   593  0193                     	;# 
   594  0193                     	;# 
   595  0194                     	;# 
   596  0195                     	;# 
   597  0196                     	;# 
   598  0197                     	;# 
   599  0199                     	;# 
   600  0199                     	;# 
   601  0199                     	;# 
   602  019A                     	;# 
   603  019A                     	;# 
   604  019A                     	;# 
   605  019B                     	;# 
   606  019B                     	;# 
   607  019B                     	;# 
   608  019B                     	;# 
   609  019B                     	;# 
   610  019C                     	;# 
   611  019C                     	;# 
   612  019C                     	;# 
   613  019D                     	;# 
   614  019D                     	;# 
   615  019D                     	;# 
   616  019E                     	;# 
   617  019E                     	;# 
   618  019E                     	;# 
   619  019F                     	;# 
   620  019F                     	;# 
   621  019F                     	;# 
   622  019F                     	;# 
   623  019F                     	;# 
   624  020C                     	;# 
   625  020D                     	;# 
   626  020E                     	;# 
   627  0211                     	;# 
   628  0211                     	;# 
   629  0212                     	;# 
   630  0212                     	;# 
   631  0213                     	;# 
   632  0213                     	;# 
   633  0214                     	;# 
   634  0214                     	;# 
   635  0215                     	;# 
   636  0215                     	;# 
   637  0215                     	;# 
   638  0215                     	;# 
   639  0216                     	;# 
   640  0216                     	;# 
   641  0217                     	;# 
   642  0217                     	;# 
   643  028C                     	;# 
   644  028D                     	;# 
   645  028E                     	;# 
   646  0291                     	;# 
   647  0291                     	;# 
   648  0292                     	;# 
   649  0293                     	;# 
   650  0294                     	;# 
   651  0298                     	;# 
   652  0298                     	;# 
   653  0299                     	;# 
   654  029A                     	;# 
   655  029B                     	;# 
   656  029E                     	;# 
   657  030C                     	;# 
   658  030D                     	;# 
   659  030E                     	;# 
   660  038C                     	;# 
   661  038D                     	;# 
   662  038E                     	;# 
   663  0391                     	;# 
   664  0392                     	;# 
   665  0393                     	;# 
   666  0394                     	;# 
   667  0395                     	;# 
   668  0396                     	;# 
   669  0397                     	;# 
   670  0398                     	;# 
   671  0399                     	;# 
   672  040E                     	;# 
   673  0413                     	;# 
   674  0413                     	;# 
   675  0414                     	;# 
   676  0414                     	;# 
   677  0415                     	;# 
   678  0416                     	;# 
   679  0417                     	;# 
   680  0418                     	;# 
   681  041A                     	;# 
   682  041A                     	;# 
   683  041B                     	;# 
   684  041B                     	;# 
   685  041C                     	;# 
   686  041D                     	;# 
   687  041E                     	;# 
   688  041F                     	;# 
   689  0493                     	;# 
   690  0494                     	;# 
   691  0495                     	;# 
   692  0496                     	;# 
   693  049A                     	;# 
   694  049B                     	;# 
   695  049C                     	;# 
   696  049D                     	;# 
   697  058C                     	;# 
   698  058C                     	;# 
   699  058D                     	;# 
   700  058E                     	;# 
   701  058E                     	;# 
   702  058F                     	;# 
   703  0590                     	;# 
   704  0590                     	;# 
   705  0591                     	;# 
   706  0592                     	;# 
   707  0592                     	;# 
   708  0593                     	;# 
   709  0594                     	;# 
   710  0594                     	;# 
   711  0595                     	;# 
   712  0596                     	;# 
   713  0596                     	;# 
   714  0597                     	;# 
   715  0598                     	;# 
   716  0599                     	;# 
   717  059A                     	;# 
   718  059B                     	;# 
   719  059B                     	;# 
   720  059C                     	;# 
   721  059D                     	;# 
   722  060C                     	;# 
   723  060C                     	;# 
   724  060D                     	;# 
   725  060E                     	;# 
   726  060F                     	;# 
   727  060F                     	;# 
   728  0610                     	;# 
   729  0611                     	;# 
   730  0612                     	;# 
   731  0613                     	;# 
   732  0614                     	;# 
   733  0617                     	;# 
   734  0618                     	;# 
   735  0619                     	;# 
   736  061A                     	;# 
   737  061B                     	;# 
   738  061C                     	;# 
   739  0691                     	;# 
   740  0692                     	;# 
   741  0693                     	;# 
   742  0694                     	;# 
   743  0695                     	;# 
   744  0696                     	;# 
   745  0697                     	;# 
   746  0699                     	;# 
   747  069A                     	;# 
   748  0711                     	;# 
   749  0712                     	;# 
   750  0713                     	;# 
   751  0714                     	;# 
   752  0715                     	;# 
   753  0718                     	;# 
   754  0718                     	;# 
   755  0719                     	;# 
   756  071A                     	;# 
   757  071A                     	;# 
   758  071B                     	;# 
   759  071C                     	;# 
   760  071D                     	;# 
   761  0791                     	;# 
   762  0791                     	;# 
   763  0792                     	;# 
   764  0793                     	;# 
   765  0793                     	;# 
   766  0794                     	;# 
   767  0795                     	;# 
   768  0795                     	;# 
   769  0796                     	;# 
   770  0797                     	;# 
   771  0797                     	;# 
   772  0798                     	;# 
   773  0799                     	;# 
   774  079A                     	;# 
   775  080C                     	;# 
   776  080C                     	;# 
   777  080D                     	;# 
   778  080E                     	;# 
   779  080E                     	;# 
   780  080F                     	;# 
   781  0810                     	;# 
   782  0810                     	;# 
   783  0811                     	;# 
   784  0812                     	;# 
   785  0812                     	;# 
   786  0813                     	;# 
   787  0814                     	;# 
   788  0815                     	;# 
   789  0816                     	;# 
   790  0817                     	;# 
   791  0818                     	;# 
   792  0819                     	;# 
   793  081A                     	;# 
   794  081A                     	;# 
   795  081B                     	;# 
   796  081C                     	;# 
   797  081C                     	;# 
   798  081D                     	;# 
   799  088C                     	;# 
   800  088D                     	;# 
   801  088E                     	;# 
   802  088F                     	;# 
   803  088F                     	;# 
   804  0890                     	;# 
   805  0891                     	;# 
   806  0892                     	;# 
   807  0893                     	;# 
   808  0893                     	;# 
   809  0894                     	;# 
   810  0895                     	;# 
   811  0896                     	;# 
   812  0897                     	;# 
   813  0897                     	;# 
   814  0898                     	;# 
   815  0899                     	;# 
   816  0D8C                     	;# 
   817  0D8C                     	;# 
   818  0D8D                     	;# 
   819  0D8E                     	;# 
   820  0D8F                     	;# 
   821  0D8F                     	;# 
   822  0D90                     	;# 
   823  0D91                     	;# 
   824  0D92                     	;# 
   825  0D92                     	;# 
   826  0D93                     	;# 
   827  0D94                     	;# 
   828  0D95                     	;# 
   829  0D95                     	;# 
   830  0D96                     	;# 
   831  0D97                     	;# 
   832  0D98                     	;# 
   833  0D99                     	;# 
   834  0D9A                     	;# 
   835  0D9B                     	;# 
   836  0D9C                     	;# 
   837  0D9D                     	;# 
   838  0D9E                     	;# 
   839  0D9E                     	;# 
   840  0D9F                     	;# 
   841  0DA0                     	;# 
   842  0DA1                     	;# 
   843  0DA1                     	;# 
   844  0DA2                     	;# 
   845  0DA3                     	;# 
   846  0DA4                     	;# 
   847  0DA4                     	;# 
   848  0DA5                     	;# 
   849  0DA6                     	;# 
   850  0DA7                     	;# 
   851  0DA7                     	;# 
   852  0DA8                     	;# 
   853  0DA9                     	;# 
   854  0DAA                     	;# 
   855  0DAB                     	;# 
   856  0DAC                     	;# 
   857  0DAD                     	;# 
   858  0DAE                     	;# 
   859  0DAF                     	;# 
   860  0E0F                     	;# 
   861  0E10                     	;# 
   862  0E11                     	;# 
   863  0E12                     	;# 
   864  0E13                     	;# 
   865  0E14                     	;# 
   866  0E15                     	;# 
   867  0E16                     	;# 
   868  0E17                     	;# 
   869  0E18                     	;# 
   870  0E19                     	;# 
   871  0E1A                     	;# 
   872  0E1B                     	;# 
   873  0E1C                     	;# 
   874  0E1D                     	;# 
   875  0E1E                     	;# 
   876  0E1F                     	;# 
   877  0E20                     	;# 
   878  0E21                     	;# 
   879  0E22                     	;# 
   880  0E23                     	;# 
   881  0E24                     	;# 
   882  0E25                     	;# 
   883  0E26                     	;# 
   884  0E27                     	;# 
   885  0E28                     	;# 
   886  0E29                     	;# 
   887  0E2A                     	;# 
   888  0E2B                     	;# 
   889  0E2C                     	;# 
   890  0E2D                     	;# 
   891  0E2E                     	;# 
   892  0E90                     	;# 
   893  0E91                     	;# 
   894  0E92                     	;# 
   895  0E94                     	;# 
   896  0E95                     	;# 
   897  0E9C                     	;# 
   898  0E9D                     	;# 
   899  0E9E                     	;# 
   900  0E9F                     	;# 
   901  0EA0                     	;# 
   902  0EA1                     	;# 
   903  0EA2                     	;# 
   904  0EA3                     	;# 
   905  0EA4                     	;# 
   906  0EA5                     	;# 
   907  0EA6                     	;# 
   908  0EA7                     	;# 
   909  0F0F                     	;# 
   910  0F10                     	;# 
   911  0F11                     	;# 
   912  0F12                     	;# 
   913  0F13                     	;# 
   914  0F14                     	;# 
   915  0F15                     	;# 
   916  0F16                     	;# 
   917  0F17                     	;# 
   918  0F18                     	;# 
   919  0F19                     	;# 
   920  0F1A                     	;# 
   921  0F1B                     	;# 
   922  0F1C                     	;# 
   923  0F1D                     	;# 
   924  0F1E                     	;# 
   925  0F1F                     	;# 
   926  0F20                     	;# 
   927  0F21                     	;# 
   928  0F22                     	;# 
   929  0F23                     	;# 
   930  0F24                     	;# 
   931  0F25                     	;# 
   932  0F26                     	;# 
   933  0F27                     	;# 
   934  0F28                     	;# 
   935  0F29                     	;# 
   936  0F2A                     	;# 
   937  0F2B                     	;# 
   938  0F2C                     	;# 
   939  0F2D                     	;# 
   940  0F2E                     	;# 
   941  0F2F                     	;# 
   942  0F30                     	;# 
   943  0F31                     	;# 
   944  0F32                     	;# 
   945  0F33                     	;# 
   946  0F34                     	;# 
   947  0F35                     	;# 
   948  0F36                     	;# 
   949  0F37                     	;# 
   950  0FE4                     	;# 
   951  0FE5                     	;# 
   952  0FE6                     	;# 
   953  0FE7                     	;# 
   954  0FE8                     	;# 
   955  0FE9                     	;# 
   956  0FEA                     	;# 
   957  0FEB                     	;# 
   958  0FED                     	;# 
   959  0FEE                     	;# 
   960  0FEF                     	;# 
   961  0000                     	;# 
   962  0001                     	;# 
   963  0002                     	;# 
   964  0003                     	;# 
   965  0004                     	;# 
   966  0005                     	;# 
   967  0006                     	;# 
   968  0007                     	;# 
   969  0008                     	;# 
   970  0009                     	;# 
   971  000A                     	;# 
   972  000B                     	;# 
   973  000C                     	;# 
   974  000D                     	;# 
   975  000E                     	;# 
   976  0010                     	;# 
   977  0011                     	;# 
   978  0012                     	;# 
   979  0013                     	;# 
   980  0014                     	;# 
   981  0015                     	;# 
   982  0016                     	;# 
   983  0016                     	;# 
   984  0017                     	;# 
   985  0018                     	;# 
   986  0019                     	;# 
   987  001A                     	;# 
   988  001A                     	;# 
   989  001B                     	;# 
   990  001B                     	;# 
   991  001C                     	;# 
   992  001D                     	;# 
   993  001E                     	;# 
   994  001F                     	;# 
   995  008C                     	;# 
   996  008D                     	;# 
   997  008E                     	;# 
   998  0090                     	;# 
   999  0091                     	;# 
  1000  0092                     	;# 
  1001  0093                     	;# 
  1002  0094                     	;# 
  1003  0095                     	;# 
  1004  0096                     	;# 
  1005  0098                     	;# 
  1006  0099                     	;# 
  1007  009A                     	;# 
  1008  009B                     	;# 
  1009  009B                     	;# 
  1010  009C                     	;# 
  1011  009D                     	;# 
  1012  009E                     	;# 
  1013  009F                     	;# 
  1014  010C                     	;# 
  1015  010D                     	;# 
  1016  010E                     	;# 
  1017  0111                     	;# 
  1018  0112                     	;# 
  1019  0113                     	;# 
  1020  0114                     	;# 
  1021  0115                     	;# 
  1022  0116                     	;# 
  1023  0117                     	;# 
  1024  0118                     	;# 
  1025  0119                     	;# 
  1026  011C                     	;# 
  1027  018C                     	;# 
  1028  018D                     	;# 
  1029  018E                     	;# 
  1030  0191                     	;# 
  1031  0191                     	;# 
  1032  0192                     	;# 
  1033  0193                     	;# 
  1034  0193                     	;# 
  1035  0194                     	;# 
  1036  0195                     	;# 
  1037  0196                     	;# 
  1038  0197                     	;# 
  1039  0199                     	;# 
  1040  0199                     	;# 
  1041  0199                     	;# 
  1042  019A                     	;# 
  1043  019A                     	;# 
  1044  019A                     	;# 
  1045  019B                     	;# 
  1046  019B                     	;# 
  1047  019B                     	;# 
  1048  019B                     	;# 
  1049  019B                     	;# 
  1050  019C                     	;# 
  1051  019C                     	;# 
  1052  019C                     	;# 
  1053  019D                     	;# 
  1054  019D                     	;# 
  1055  019D                     	;# 
  1056  019E                     	;# 
  1057  019E                     	;# 
  1058  019E                     	;# 
  1059  019F                     	;# 
  1060  019F                     	;# 
  1061  019F                     	;# 
  1062  019F                     	;# 
  1063  019F                     	;# 
  1064  020C                     	;# 
  1065  020D                     	;# 
  1066  020E                     	;# 
  1067  0211                     	;# 
  1068  0211                     	;# 
  1069  0212                     	;# 
  1070  0212                     	;# 
  1071  0213                     	;# 
  1072  0213                     	;# 
  1073  0214                     	;# 
  1074  0214                     	;# 
  1075  0215                     	;# 
  1076  0215                     	;# 
  1077  0215                     	;# 
  1078  0215                     	;# 
  1079  0216                     	;# 
  1080  0216                     	;# 
  1081  0217                     	;# 
  1082  0217                     	;# 
  1083  028C                     	;# 
  1084  028D                     	;# 
  1085  028E                     	;# 
  1086  0291                     	;# 
  1087  0291                     	;# 
  1088  0292                     	;# 
  1089  0293                     	;# 
  1090  0294                     	;# 
  1091  0298                     	;# 
  1092  0298                     	;# 
  1093  0299                     	;# 
  1094  029A                     	;# 
  1095  029B                     	;# 
  1096  029E                     	;# 
  1097  030C                     	;# 
  1098  030D                     	;# 
  1099  030E                     	;# 
  1100  038C                     	;# 
  1101  038D                     	;# 
  1102  038E                     	;# 
  1103  0391                     	;# 
  1104  0392                     	;# 
  1105  0393                     	;# 
  1106  0394                     	;# 
  1107  0395                     	;# 
  1108  0396                     	;# 
  1109  0397                     	;# 
  1110  0398                     	;# 
  1111  0399                     	;# 
  1112  040E                     	;# 
  1113  0413                     	;# 
  1114  0413                     	;# 
  1115  0414                     	;# 
  1116  0414                     	;# 
  1117  0415                     	;# 
  1118  0416                     	;# 
  1119  0417                     	;# 
  1120  0418                     	;# 
  1121  041A                     	;# 
  1122  041A                     	;# 
  1123  041B                     	;# 
  1124  041B                     	;# 
  1125  041C                     	;# 
  1126  041D                     	;# 
  1127  041E                     	;# 
  1128  041F                     	;# 
  1129  0493                     	;# 
  1130  0494                     	;# 
  1131  0495                     	;# 
  1132  0496                     	;# 
  1133  049A                     	;# 
  1134  049B                     	;# 
  1135  049C                     	;# 
  1136  049D                     	;# 
  1137  058C                     	;# 
  1138  058C                     	;# 
  1139  058D                     	;# 
  1140  058E                     	;# 
  1141  058E                     	;# 
  1142  058F                     	;# 
  1143  0590                     	;# 
  1144  0590                     	;# 
  1145  0591                     	;# 
  1146  0592                     	;# 
  1147  0592                     	;# 
  1148  0593                     	;# 
  1149  0594                     	;# 
  1150  0594                     	;# 
  1151  0595                     	;# 
  1152  0596                     	;# 
  1153  0596                     	;# 
  1154  0597                     	;# 
  1155  0598                     	;# 
  1156  0599                     	;# 
  1157  059A                     	;# 
  1158  059B                     	;# 
  1159  059B                     	;# 
  1160  059C                     	;# 
  1161  059D                     	;# 
  1162  060C                     	;# 
  1163  060C                     	;# 
  1164  060D                     	;# 
  1165  060E                     	;# 
  1166  060F                     	;# 
  1167  060F                     	;# 
  1168  0610                     	;# 
  1169  0611                     	;# 
  1170  0612                     	;# 
  1171  0613                     	;# 
  1172  0614                     	;# 
  1173  0617                     	;# 
  1174  0618                     	;# 
  1175  0619                     	;# 
  1176  061A                     	;# 
  1177  061B                     	;# 
  1178  061C                     	;# 
  1179  0691                     	;# 
  1180  0692                     	;# 
  1181  0693                     	;# 
  1182  0694                     	;# 
  1183  0695                     	;# 
  1184  0696                     	;# 
  1185  0697                     	;# 
  1186  0699                     	;# 
  1187  069A                     	;# 
  1188  0711                     	;# 
  1189  0712                     	;# 
  1190  0713                     	;# 
  1191  0714                     	;# 
  1192  0715                     	;# 
  1193  0718                     	;# 
  1194  0718                     	;# 
  1195  0719                     	;# 
  1196  071A                     	;# 
  1197  071A                     	;# 
  1198  071B                     	;# 
  1199  071C                     	;# 
  1200  071D                     	;# 
  1201  0791                     	;# 
  1202  0791                     	;# 
  1203  0792                     	;# 
  1204  0793                     	;# 
  1205  0793                     	;# 
  1206  0794                     	;# 
  1207  0795                     	;# 
  1208  0795                     	;# 
  1209  0796                     	;# 
  1210  0797                     	;# 
  1211  0797                     	;# 
  1212  0798                     	;# 
  1213  0799                     	;# 
  1214  079A                     	;# 
  1215  080C                     	;# 
  1216  080C                     	;# 
  1217  080D                     	;# 
  1218  080E                     	;# 
  1219  080E                     	;# 
  1220  080F                     	;# 
  1221  0810                     	;# 
  1222  0810                     	;# 
  1223  0811                     	;# 
  1224  0812                     	;# 
  1225  0812                     	;# 
  1226  0813                     	;# 
  1227  0814                     	;# 
  1228  0815                     	;# 
  1229  0816                     	;# 
  1230  0817                     	;# 
  1231  0818                     	;# 
  1232  0819                     	;# 
  1233  081A                     	;# 
  1234  081A                     	;# 
  1235  081B                     	;# 
  1236  081C                     	;# 
  1237  081C                     	;# 
  1238  081D                     	;# 
  1239  088C                     	;# 
  1240  088D                     	;# 
  1241  088E                     	;# 
  1242  088F                     	;# 
  1243  088F                     	;# 
  1244  0890                     	;# 
  1245  0891                     	;# 
  1246  0892                     	;# 
  1247  0893                     	;# 
  1248  0893                     	;# 
  1249  0894                     	;# 
  1250  0895                     	;# 
  1251  0896                     	;# 
  1252  0897                     	;# 
  1253  0897                     	;# 
  1254  0898                     	;# 
  1255  0899                     	;# 
  1256  0D8C                     	;# 
  1257  0D8C                     	;# 
  1258  0D8D                     	;# 
  1259  0D8E                     	;# 
  1260  0D8F                     	;# 
  1261  0D8F                     	;# 
  1262  0D90                     	;# 
  1263  0D91                     	;# 
  1264  0D92                     	;# 
  1265  0D92                     	;# 
  1266  0D93                     	;# 
  1267  0D94                     	;# 
  1268  0D95                     	;# 
  1269  0D95                     	;# 
  1270  0D96                     	;# 
  1271  0D97                     	;# 
  1272  0D98                     	;# 
  1273  0D99                     	;# 
  1274  0D9A                     	;# 
  1275  0D9B                     	;# 
  1276  0D9C                     	;# 
  1277  0D9D                     	;# 
  1278  0D9E                     	;# 
  1279  0D9E                     	;# 
  1280  0D9F                     	;# 
  1281  0DA0                     	;# 
  1282  0DA1                     	;# 
  1283  0DA1                     	;# 
  1284  0DA2                     	;# 
  1285  0DA3                     	;# 
  1286  0DA4                     	;# 
  1287  0DA4                     	;# 
  1288  0DA5                     	;# 
  1289  0DA6                     	;# 
  1290  0DA7                     	;# 
  1291  0DA7                     	;# 
  1292  0DA8                     	;# 
  1293  0DA9                     	;# 
  1294  0DAA                     	;# 
  1295  0DAB                     	;# 
  1296  0DAC                     	;# 
  1297  0DAD                     	;# 
  1298  0DAE                     	;# 
  1299  0DAF                     	;# 
  1300  0E0F                     	;# 
  1301  0E10                     	;# 
  1302  0E11                     	;# 
  1303  0E12                     	;# 
  1304  0E13                     	;# 
  1305  0E14                     	;# 
  1306  0E15                     	;# 
  1307  0E16                     	;# 
  1308  0E17                     	;# 
  1309  0E18                     	;# 
  1310  0E19                     	;# 
  1311  0E1A                     	;# 
  1312  0E1B                     	;# 
  1313  0E1C                     	;# 
  1314  0E1D                     	;# 
  1315  0E1E                     	;# 
  1316  0E1F                     	;# 
  1317  0E20                     	;# 
  1318  0E21                     	;# 
  1319  0E22                     	;# 
  1320  0E23                     	;# 
  1321  0E24                     	;# 
  1322  0E25                     	;# 
  1323  0E26                     	;# 
  1324  0E27                     	;# 
  1325  0E28                     	;# 
  1326  0E29                     	;# 
  1327  0E2A                     	;# 
  1328  0E2B                     	;# 
  1329  0E2C                     	;# 
  1330  0E2D                     	;# 
  1331  0E2E                     	;# 
  1332  0E90                     	;# 
  1333  0E91                     	;# 
  1334  0E92                     	;# 
  1335  0E94                     	;# 
  1336  0E95                     	;# 
  1337  0E9C                     	;# 
  1338  0E9D                     	;# 
  1339  0E9E                     	;# 
  1340  0E9F                     	;# 
  1341  0EA0                     	;# 
  1342  0EA1                     	;# 
  1343  0EA2                     	;# 
  1344  0EA3                     	;# 
  1345  0EA4                     	;# 
  1346  0EA5                     	;# 
  1347  0EA6                     	;# 
  1348  0EA7                     	;# 
  1349  0F0F                     	;# 
  1350  0F10                     	;# 
  1351  0F11                     	;# 
  1352  0F12                     	;# 
  1353  0F13                     	;# 
  1354  0F14                     	;# 
  1355  0F15                     	;# 
  1356  0F16                     	;# 
  1357  0F17                     	;# 
  1358  0F18                     	;# 
  1359  0F19                     	;# 
  1360  0F1A                     	;# 
  1361  0F1B                     	;# 
  1362  0F1C                     	;# 
  1363  0F1D                     	;# 
  1364  0F1E                     	;# 
  1365  0F1F                     	;# 
  1366  0F20                     	;# 
  1367  0F21                     	;# 
  1368  0F22                     	;# 
  1369  0F23                     	;# 
  1370  0F24                     	;# 
  1371  0F25                     	;# 
  1372  0F26                     	;# 
  1373  0F27                     	;# 
  1374  0F28                     	;# 
  1375  0F29                     	;# 
  1376  0F2A                     	;# 
  1377  0F2B                     	;# 
  1378  0F2C                     	;# 
  1379  0F2D                     	;# 
  1380  0F2E                     	;# 
  1381  0F2F                     	;# 
  1382  0F30                     	;# 
  1383  0F31                     	;# 
  1384  0F32                     	;# 
  1385  0F33                     	;# 
  1386  0F34                     	;# 
  1387  0F35                     	;# 
  1388  0F36                     	;# 
  1389  0F37                     	;# 
  1390  0FE4                     	;# 
  1391  0FE5                     	;# 
  1392  0FE6                     	;# 
  1393  0FE7                     	;# 
  1394  0FE8                     	;# 
  1395  0FE9                     	;# 
  1396  0FEA                     	;# 
  1397  0FEB                     	;# 
  1398  0FED                     	;# 
  1399  0FEE                     	;# 
  1400  0FEF                     	;# 
  1401  0000                     	;# 
  1402  0001                     	;# 
  1403  0002                     	;# 
  1404  0003                     	;# 
  1405  0004                     	;# 
  1406  0005                     	;# 
  1407  0006                     	;# 
  1408  0007                     	;# 
  1409  0008                     	;# 
  1410  0009                     	;# 
  1411  000A                     	;# 
  1412  000B                     	;# 
  1413  000C                     	;# 
  1414  000D                     	;# 
  1415  000E                     	;# 
  1416  0010                     	;# 
  1417  0011                     	;# 
  1418  0012                     	;# 
  1419  0013                     	;# 
  1420  0014                     	;# 
  1421  0015                     	;# 
  1422  0016                     	;# 
  1423  0016                     	;# 
  1424  0017                     	;# 
  1425  0018                     	;# 
  1426  0019                     	;# 
  1427  001A                     	;# 
  1428  001A                     	;# 
  1429  001B                     	;# 
  1430  001B                     	;# 
  1431  001C                     	;# 
  1432  001D                     	;# 
  1433  001E                     	;# 
  1434  001F                     	;# 
  1435  008C                     	;# 
  1436  008D                     	;# 
  1437  008E                     	;# 
  1438  0090                     	;# 
  1439  0091                     	;# 
  1440  0092                     	;# 
  1441  0093                     	;# 
  1442  0094                     	;# 
  1443  0095                     	;# 
  1444  0096                     	;# 
  1445  0098                     	;# 
  1446  0099                     	;# 
  1447  009A                     	;# 
  1448  009B                     	;# 
  1449  009B                     	;# 
  1450  009C                     	;# 
  1451  009D                     	;# 
  1452  009E                     	;# 
  1453  009F                     	;# 
  1454  010C                     	;# 
  1455  010D                     	;# 
  1456  010E                     	;# 
  1457  0111                     	;# 
  1458  0112                     	;# 
  1459  0113                     	;# 
  1460  0114                     	;# 
  1461  0115                     	;# 
  1462  0116                     	;# 
  1463  0117                     	;# 
  1464  0118                     	;# 
  1465  0119                     	;# 
  1466  011C                     	;# 
  1467  018C                     	;# 
  1468  018D                     	;# 
  1469  018E                     	;# 
  1470  0191                     	;# 
  1471  0191                     	;# 
  1472  0192                     	;# 
  1473  0193                     	;# 
  1474  0193                     	;# 
  1475  0194                     	;# 
  1476  0195                     	;# 
  1477  0196                     	;# 
  1478  0197                     	;# 
  1479  0199                     	;# 
  1480  0199                     	;# 
  1481  0199                     	;# 
  1482  019A                     	;# 
  1483  019A                     	;# 
  1484  019A                     	;# 
  1485  019B                     	;# 
  1486  019B                     	;# 
  1487  019B                     	;# 
  1488  019B                     	;# 
  1489  019B                     	;# 
  1490  019C                     	;# 
  1491  019C                     	;# 
  1492  019C                     	;# 
  1493  019D                     	;# 
  1494  019D                     	;# 
  1495  019D                     	;# 
  1496  019E                     	;# 
  1497  019E                     	;# 
  1498  019E                     	;# 
  1499  019F                     	;# 
  1500  019F                     	;# 
  1501  019F                     	;# 
  1502  019F                     	;# 
  1503  019F                     	;# 
  1504  020C                     	;# 
  1505  020D                     	;# 
  1506  020E                     	;# 
  1507  0211                     	;# 
  1508  0211                     	;# 
  1509  0212                     	;# 
  1510  0212                     	;# 
  1511  0213                     	;# 
  1512  0213                     	;# 
  1513  0214                     	;# 
  1514  0214                     	;# 
  1515  0215                     	;# 
  1516  0215                     	;# 
  1517  0215                     	;# 
  1518  0215                     	;# 
  1519  0216                     	;# 
  1520  0216                     	;# 
  1521  0217                     	;# 
  1522  0217                     	;# 
  1523  028C                     	;# 
  1524  028D                     	;# 
  1525  028E                     	;# 
  1526  0291                     	;# 
  1527  0291                     	;# 
  1528  0292                     	;# 
  1529  0293                     	;# 
  1530  0294                     	;# 
  1531  0298                     	;# 
  1532  0298                     	;# 
  1533  0299                     	;# 
  1534  029A                     	;# 
  1535  029B                     	;# 
  1536  029E                     	;# 
  1537  030C                     	;# 
  1538  030D                     	;# 
  1539  030E                     	;# 
  1540  038C                     	;# 
  1541  038D                     	;# 
  1542  038E                     	;# 
  1543  0391                     	;# 
  1544  0392                     	;# 
  1545  0393                     	;# 
  1546  0394                     	;# 
  1547  0395                     	;# 
  1548  0396                     	;# 
  1549  0397                     	;# 
  1550  0398                     	;# 
  1551  0399                     	;# 
  1552  040E                     	;# 
  1553  0413                     	;# 
  1554  0413                     	;# 
  1555  0414                     	;# 
  1556  0414                     	;# 
  1557  0415                     	;# 
  1558  0416                     	;# 
  1559  0417                     	;# 
  1560  0418                     	;# 
  1561  041A                     	;# 
  1562  041A                     	;# 
  1563  041B                     	;# 
  1564  041B                     	;# 
  1565  041C                     	;# 
  1566  041D                     	;# 
  1567  041E                     	;# 
  1568  041F                     	;# 
  1569  0493                     	;# 
  1570  0494                     	;# 
  1571  0495                     	;# 
  1572  0496                     	;# 
  1573  049A                     	;# 
  1574  049B                     	;# 
  1575  049C                     	;# 
  1576  049D                     	;# 
  1577  058C                     	;# 
  1578  058C                     	;# 
  1579  058D                     	;# 
  1580  058E                     	;# 
  1581  058E                     	;# 
  1582  058F                     	;# 
  1583  0590                     	;# 
  1584  0590                     	;# 
  1585  0591                     	;# 
  1586  0592                     	;# 
  1587  0592                     	;# 
  1588  0593                     	;# 
  1589  0594                     	;# 
  1590  0594                     	;# 
  1591  0595                     	;# 
  1592  0596                     	;# 
  1593  0596                     	;# 
  1594  0597                     	;# 
  1595  0598                     	;# 
  1596  0599                     	;# 
  1597  059A                     	;# 
  1598  059B                     	;# 
  1599  059B                     	;# 
  1600  059C                     	;# 
  1601  059D                     	;# 
  1602  060C                     	;# 
  1603  060C                     	;# 
  1604  060D                     	;# 
  1605  060E                     	;# 
  1606  060F                     	;# 
  1607  060F                     	;# 
  1608  0610                     	;# 
  1609  0611                     	;# 
  1610  0612                     	;# 
  1611  0613                     	;# 
  1612  0614                     	;# 
  1613  0617                     	;# 
  1614  0618                     	;# 
  1615  0619                     	;# 
  1616  061A                     	;# 
  1617  061B                     	;# 
  1618  061C                     	;# 
  1619  0691                     	;# 
  1620  0692                     	;# 
  1621  0693                     	;# 
  1622  0694                     	;# 
  1623  0695                     	;# 
  1624  0696                     	;# 
  1625  0697                     	;# 
  1626  0699                     	;# 
  1627  069A                     	;# 
  1628  0711                     	;# 
  1629  0712                     	;# 
  1630  0713                     	;# 
  1631  0714                     	;# 
  1632  0715                     	;# 
  1633  0718                     	;# 
  1634  0718                     	;# 
  1635  0719                     	;# 
  1636  071A                     	;# 
  1637  071A                     	;# 
  1638  071B                     	;# 
  1639  071C                     	;# 
  1640  071D                     	;# 
  1641  0791                     	;# 
  1642  0791                     	;# 
  1643  0792                     	;# 
  1644  0793                     	;# 
  1645  0793                     	;# 
  1646  0794                     	;# 
  1647  0795                     	;# 
  1648  0795                     	;# 
  1649  0796                     	;# 
  1650  0797                     	;# 
  1651  0797                     	;# 
  1652  0798                     	;# 
  1653  0799                     	;# 
  1654  079A                     	;# 
  1655  080C                     	;# 
  1656  080C                     	;# 
  1657  080D                     	;# 
  1658  080E                     	;# 
  1659  080E                     	;# 
  1660  080F                     	;# 
  1661  0810                     	;# 
  1662  0810                     	;# 
  1663  0811                     	;# 
  1664  0812                     	;# 
  1665  0812                     	;# 
  1666  0813                     	;# 
  1667  0814                     	;# 
  1668  0815                     	;# 
  1669  0816                     	;# 
  1670  0817                     	;# 
  1671  0818                     	;# 
  1672  0819                     	;# 
  1673  081A                     	;# 
  1674  081A                     	;# 
  1675  081B                     	;# 
  1676  081C                     	;# 
  1677  081C                     	;# 
  1678  081D                     	;# 
  1679  088C                     	;# 
  1680  088D                     	;# 
  1681  088E                     	;# 
  1682  088F                     	;# 
  1683  088F                     	;# 
  1684  0890                     	;# 
  1685  0891                     	;# 
  1686  0892                     	;# 
  1687  0893                     	;# 
  1688  0893                     	;# 
  1689  0894                     	;# 
  1690  0895                     	;# 
  1691  0896                     	;# 
  1692  0897                     	;# 
  1693  0897                     	;# 
  1694  0898                     	;# 
  1695  0899                     	;# 
  1696  0D8C                     	;# 
  1697  0D8C                     	;# 
  1698  0D8D                     	;# 
  1699  0D8E                     	;# 
  1700  0D8F                     	;# 
  1701  0D8F                     	;# 
  1702  0D90                     	;# 
  1703  0D91                     	;# 
  1704  0D92                     	;# 
  1705  0D92                     	;# 
  1706  0D93                     	;# 
  1707  0D94                     	;# 
  1708  0D95                     	;# 
  1709  0D95                     	;# 
  1710  0D96                     	;# 
  1711  0D97                     	;# 
  1712  0D98                     	;# 
  1713  0D99                     	;# 
  1714  0D9A                     	;# 
  1715  0D9B                     	;# 
  1716  0D9C                     	;# 
  1717  0D9D                     	;# 
  1718  0D9E                     	;# 
  1719  0D9E                     	;# 
  1720  0D9F                     	;# 
  1721  0DA0                     	;# 
  1722  0DA1                     	;# 
  1723  0DA1                     	;# 
  1724  0DA2                     	;# 
  1725  0DA3                     	;# 
  1726  0DA4                     	;# 
  1727  0DA4                     	;# 
  1728  0DA5                     	;# 
  1729  0DA6                     	;# 
  1730  0DA7                     	;# 
  1731  0DA7                     	;# 
  1732  0DA8                     	;# 
  1733  0DA9                     	;# 
  1734  0DAA                     	;# 
  1735  0DAB                     	;# 
  1736  0DAC                     	;# 
  1737  0DAD                     	;# 
  1738  0DAE                     	;# 
  1739  0DAF                     	;# 
  1740  0E0F                     	;# 
  1741  0E10                     	;# 
  1742  0E11                     	;# 
  1743  0E12                     	;# 
  1744  0E13                     	;# 
  1745  0E14                     	;# 
  1746  0E15                     	;# 
  1747  0E16                     	;# 
  1748  0E17                     	;# 
  1749  0E18                     	;# 
  1750  0E19                     	;# 
  1751  0E1A                     	;# 
  1752  0E1B                     	;# 
  1753  0E1C                     	;# 
  1754  0E1D                     	;# 
  1755  0E1E                     	;# 
  1756  0E1F                     	;# 
  1757  0E20                     	;# 
  1758  0E21                     	;# 
  1759  0E22                     	;# 
  1760  0E23                     	;# 
  1761  0E24                     	;# 
  1762  0E25                     	;# 
  1763  0E26                     	;# 
  1764  0E27                     	;# 
  1765  0E28                     	;# 
  1766  0E29                     	;# 
  1767  0E2A                     	;# 
  1768  0E2B                     	;# 
  1769  0E2C                     	;# 
  1770  0E2D                     	;# 
  1771  0E2E                     	;# 
  1772  0E90                     	;# 
  1773  0E91                     	;# 
  1774  0E92                     	;# 
  1775  0E94                     	;# 
  1776  0E95                     	;# 
  1777  0E9C                     	;# 
  1778  0E9D                     	;# 
  1779  0E9E                     	;# 
  1780  0E9F                     	;# 
  1781  0EA0                     	;# 
  1782  0EA1                     	;# 
  1783  0EA2                     	;# 
  1784  0EA3                     	;# 
  1785  0EA4                     	;# 
  1786  0EA5                     	;# 
  1787  0EA6                     	;# 
  1788  0EA7                     	;# 
  1789  0F0F                     	;# 
  1790  0F10                     	;# 
  1791  0F11                     	;# 
  1792  0F12                     	;# 
  1793  0F13                     	;# 
  1794  0F14                     	;# 
  1795  0F15                     	;# 
  1796  0F16                     	;# 
  1797  0F17                     	;# 
  1798  0F18                     	;# 
  1799  0F19                     	;# 
  1800  0F1A                     	;# 
  1801  0F1B                     	;# 
  1802  0F1C                     	;# 
  1803  0F1D                     	;# 
  1804  0F1E                     	;# 
  1805  0F1F                     	;# 
  1806  0F20                     	;# 
  1807  0F21                     	;# 
  1808  0F22                     	;# 
  1809  0F23                     	;# 
  1810  0F24                     	;# 
  1811  0F25                     	;# 
  1812  0F26                     	;# 
  1813  0F27                     	;# 
  1814  0F28                     	;# 
  1815  0F29                     	;# 
  1816  0F2A                     	;# 
  1817  0F2B                     	;# 
  1818  0F2C                     	;# 
  1819  0F2D                     	;# 
  1820  0F2E                     	;# 
  1821  0F2F                     	;# 
  1822  0F30                     	;# 
  1823  0F31                     	;# 
  1824  0F32                     	;# 
  1825  0F33                     	;# 
  1826  0F34                     	;# 
  1827  0F35                     	;# 
  1828  0F36                     	;# 
  1829  0F37                     	;# 
  1830  0FE4                     	;# 
  1831  0FE5                     	;# 
  1832  0FE6                     	;# 
  1833  0FE7                     	;# 
  1834  0FE8                     	;# 
  1835  0FE9                     	;# 
  1836  0FEA                     	;# 
  1837  0FEB                     	;# 
  1838  0FED                     	;# 
  1839  0FEE                     	;# 
  1840  0FEF                     	;# 
  1841  0000                     	;# 
  1842  0001                     	;# 
  1843  0002                     	;# 
  1844  0003                     	;# 
  1845  0004                     	;# 
  1846  0005                     	;# 
  1847  0006                     	;# 
  1848  0007                     	;# 
  1849  0008                     	;# 
  1850  0009                     	;# 
  1851  000A                     	;# 
  1852  000B                     	;# 
  1853  000C                     	;# 
  1854  000D                     	;# 
  1855  000E                     	;# 
  1856  0010                     	;# 
  1857  0011                     	;# 
  1858  0012                     	;# 
  1859  0013                     	;# 
  1860  0014                     	;# 
  1861  0015                     	;# 
  1862  0016                     	;# 
  1863  0016                     	;# 
  1864  0017                     	;# 
  1865  0018                     	;# 
  1866  0019                     	;# 
  1867  001A                     	;# 
  1868  001A                     	;# 
  1869  001B                     	;# 
  1870  001B                     	;# 
  1871  001C                     	;# 
  1872  001D                     	;# 
  1873  001E                     	;# 
  1874  001F                     	;# 
  1875  008C                     	;# 
  1876  008D                     	;# 
  1877  008E                     	;# 
  1878  0090                     	;# 
  1879  0091                     	;# 
  1880  0092                     	;# 
  1881  0093                     	;# 
  1882  0094                     	;# 
  1883  0095                     	;# 
  1884  0096                     	;# 
  1885  0098                     	;# 
  1886  0099                     	;# 
  1887  009A                     	;# 
  1888  009B                     	;# 
  1889  009B                     	;# 
  1890  009C                     	;# 
  1891  009D                     	;# 
  1892  009E                     	;# 
  1893  009F                     	;# 
  1894  010C                     	;# 
  1895  010D                     	;# 
  1896  010E                     	;# 
  1897  0111                     	;# 
  1898  0112                     	;# 
  1899  0113                     	;# 
  1900  0114                     	;# 
  1901  0115                     	;# 
  1902  0116                     	;# 
  1903  0117                     	;# 
  1904  0118                     	;# 
  1905  0119                     	;# 
  1906  011C                     	;# 
  1907  018C                     	;# 
  1908  018D                     	;# 
  1909  018E                     	;# 
  1910  0191                     	;# 
  1911  0191                     	;# 
  1912  0192                     	;# 
  1913  0193                     	;# 
  1914  0193                     	;# 
  1915  0194                     	;# 
  1916  0195                     	;# 
  1917  0196                     	;# 
  1918  0197                     	;# 
  1919  0199                     	;# 
  1920  0199                     	;# 
  1921  0199                     	;# 
  1922  019A                     	;# 
  1923  019A                     	;# 
  1924  019A                     	;# 
  1925  019B                     	;# 
  1926  019B                     	;# 
  1927  019B                     	;# 
  1928  019B                     	;# 
  1929  019B                     	;# 
  1930  019C                     	;# 
  1931  019C                     	;# 
  1932  019C                     	;# 
  1933  019D                     	;# 
  1934  019D                     	;# 
  1935  019D                     	;# 
  1936  019E                     	;# 
  1937  019E                     	;# 
  1938  019E                     	;# 
  1939  019F                     	;# 
  1940  019F                     	;# 
  1941  019F                     	;# 
  1942  019F                     	;# 
  1943  019F                     	;# 
  1944  020C                     	;# 
  1945  020D                     	;# 
  1946  020E                     	;# 
  1947  0211                     	;# 
  1948  0211                     	;# 
  1949  0212                     	;# 
  1950  0212                     	;# 
  1951  0213                     	;# 
  1952  0213                     	;# 
  1953  0214                     	;# 
  1954  0214                     	;# 
  1955  0215                     	;# 
  1956  0215                     	;# 
  1957  0215                     	;# 
  1958  0215                     	;# 
  1959  0216                     	;# 
  1960  0216                     	;# 
  1961  0217                     	;# 
  1962  0217                     	;# 
  1963  028C                     	;# 
  1964  028D                     	;# 
  1965  028E                     	;# 
  1966  0291                     	;# 
  1967  0291                     	;# 
  1968  0292                     	;# 
  1969  0293                     	;# 
  1970  0294                     	;# 
  1971  0298                     	;# 
  1972  0298                     	;# 
  1973  0299                     	;# 
  1974  029A                     	;# 
  1975  029B                     	;# 
  1976  029E                     	;# 
  1977  030C                     	;# 
  1978  030D                     	;# 
  1979  030E                     	;# 
  1980  038C                     	;# 
  1981  038D                     	;# 
  1982  038E                     	;# 
  1983  0391                     	;# 
  1984  0392                     	;# 
  1985  0393                     	;# 
  1986  0394                     	;# 
  1987  0395                     	;# 
  1988  0396                     	;# 
  1989  0397                     	;# 
  1990  0398                     	;# 
  1991  0399                     	;# 
  1992  040E                     	;# 
  1993  0413                     	;# 
  1994  0413                     	;# 
  1995  0414                     	;# 
  1996  0414                     	;# 
  1997  0415                     	;# 
  1998  0416                     	;# 
  1999  0417                     	;# 
  2000  0418                     	;# 
  2001  041A                     	;# 
  2002  041A                     	;# 
  2003  041B                     	;# 
  2004  041B                     	;# 
  2005  041C                     	;# 
  2006  041D                     	;# 
  2007  041E                     	;# 
  2008  041F                     	;# 
  2009  0493                     	;# 
  2010  0494                     	;# 
  2011  0495                     	;# 
  2012  0496                     	;# 
  2013  049A                     	;# 
  2014  049B                     	;# 
  2015  049C                     	;# 
  2016  049D                     	;# 
  2017  058C                     	;# 
  2018  058C                     	;# 
  2019  058D                     	;# 
  2020  058E                     	;# 
  2021  058E                     	;# 
  2022  058F                     	;# 
  2023  0590                     	;# 
  2024  0590                     	;# 
  2025  0591                     	;# 
  2026  0592                     	;# 
  2027  0592                     	;# 
  2028  0593                     	;# 
  2029  0594                     	;# 
  2030  0594                     	;# 
  2031  0595                     	;# 
  2032  0596                     	;# 
  2033  0596                     	;# 
  2034  0597                     	;# 
  2035  0598                     	;# 
  2036  0599                     	;# 
  2037  059A                     	;# 
  2038  059B                     	;# 
  2039  059B                     	;# 
  2040  059C                     	;# 
  2041  059D                     	;# 
  2042  060C                     	;# 
  2043  060C                     	;# 
  2044  060D                     	;# 
  2045  060E                     	;# 
  2046  060F                     	;# 
  2047  060F                     	;# 
  2048  0610                     	;# 
  2049  0611                     	;# 
  2050  0612                     	;# 
  2051  0613                     	;# 
  2052  0614                     	;# 
  2053  0617                     	;# 
  2054  0618                     	;# 
  2055  0619                     	;# 
  2056  061A                     	;# 
  2057  061B                     	;# 
  2058  061C                     	;# 
  2059  0691                     	;# 
  2060  0692                     	;# 
  2061  0693                     	;# 
  2062  0694                     	;# 
  2063  0695                     	;# 
  2064  0696                     	;# 
  2065  0697                     	;# 
  2066  0699                     	;# 
  2067  069A                     	;# 
  2068  0711                     	;# 
  2069  0712                     	;# 
  2070  0713                     	;# 
  2071  0714                     	;# 
  2072  0715                     	;# 
  2073  0718                     	;# 
  2074  0718                     	;# 
  2075  0719                     	;# 
  2076  071A                     	;# 
  2077  071A                     	;# 
  2078  071B                     	;# 
  2079  071C                     	;# 
  2080  071D                     	;# 
  2081  0791                     	;# 
  2082  0791                     	;# 
  2083  0792                     	;# 
  2084  0793                     	;# 
  2085  0793                     	;# 
  2086  0794                     	;# 
  2087  0795                     	;# 
  2088  0795                     	;# 
  2089  0796                     	;# 
  2090  0797                     	;# 
  2091  0797                     	;# 
  2092  0798                     	;# 
  2093  0799                     	;# 
  2094  079A                     	;# 
  2095  080C                     	;# 
  2096  080C                     	;# 
  2097  080D                     	;# 
  2098  080E                     	;# 
  2099  080E                     	;# 
  2100  080F                     	;# 
  2101  0810                     	;# 
  2102  0810                     	;# 
  2103  0811                     	;# 
  2104  0812                     	;# 
  2105  0812                     	;# 
  2106  0813                     	;# 
  2107  0814                     	;# 
  2108  0815                     	;# 
  2109  0816                     	;# 
  2110  0817                     	;# 
  2111  0818                     	;# 
  2112  0819                     	;# 
  2113  081A                     	;# 
  2114  081A                     	;# 
  2115  081B                     	;# 
  2116  081C                     	;# 
  2117  081C                     	;# 
  2118  081D                     	;# 
  2119  088C                     	;# 
  2120  088D                     	;# 
  2121  088E                     	;# 
  2122  088F                     	;# 
  2123  088F                     	;# 
  2124  0890                     	;# 
  2125  0891                     	;# 
  2126  0892                     	;# 
  2127  0893                     	;# 
  2128  0893                     	;# 
  2129  0894                     	;# 
  2130  0895                     	;# 
  2131  0896                     	;# 
  2132  0897                     	;# 
  2133  0897                     	;# 
  2134  0898                     	;# 
  2135  0899                     	;# 
  2136  0D8C                     	;# 
  2137  0D8C                     	;# 
  2138  0D8D                     	;# 
  2139  0D8E                     	;# 
  2140  0D8F                     	;# 
  2141  0D8F                     	;# 
  2142  0D90                     	;# 
  2143  0D91                     	;# 
  2144  0D92                     	;# 
  2145  0D92                     	;# 
  2146  0D93                     	;# 
  2147  0D94                     	;# 
  2148  0D95                     	;# 
  2149  0D95                     	;# 
  2150  0D96                     	;# 
  2151  0D97                     	;# 
  2152  0D98                     	;# 
  2153  0D99                     	;# 
  2154  0D9A                     	;# 
  2155  0D9B                     	;# 
  2156  0D9C                     	;# 
  2157  0D9D                     	;# 
  2158  0D9E                     	;# 
  2159  0D9E                     	;# 
  2160  0D9F                     	;# 
  2161  0DA0                     	;# 
  2162  0DA1                     	;# 
  2163  0DA1                     	;# 
  2164  0DA2                     	;# 
  2165  0DA3                     	;# 
  2166  0DA4                     	;# 
  2167  0DA4                     	;# 
  2168  0DA5                     	;# 
  2169  0DA6                     	;# 
  2170  0DA7                     	;# 
  2171  0DA7                     	;# 
  2172  0DA8                     	;# 
  2173  0DA9                     	;# 
  2174  0DAA                     	;# 
  2175  0DAB                     	;# 
  2176  0DAC                     	;# 
  2177  0DAD                     	;# 
  2178  0DAE                     	;# 
  2179  0DAF                     	;# 
  2180  0E0F                     	;# 
  2181  0E10                     	;# 
  2182  0E11                     	;# 
  2183  0E12                     	;# 
  2184  0E13                     	;# 
  2185  0E14                     	;# 
  2186  0E15                     	;# 
  2187  0E16                     	;# 
  2188  0E17                     	;# 
  2189  0E18                     	;# 
  2190  0E19                     	;# 
  2191  0E1A                     	;# 
  2192  0E1B                     	;# 
  2193  0E1C                     	;# 
  2194  0E1D                     	;# 
  2195  0E1E                     	;# 
  2196  0E1F                     	;# 
  2197  0E20                     	;# 
  2198  0E21                     	;# 
  2199  0E22                     	;# 
  2200  0E23                     	;# 
  2201  0E24                     	;# 
  2202  0E25                     	;# 
  2203  0E26                     	;# 
  2204  0E27                     	;# 
  2205  0E28                     	;# 
  2206  0E29                     	;# 
  2207  0E2A                     	;# 
  2208  0E2B                     	;# 
  2209  0E2C                     	;# 
  2210  0E2D                     	;# 
  2211  0E2E                     	;# 
  2212  0E90                     	;# 
  2213  0E91                     	;# 
  2214  0E92                     	;# 
  2215  0E94                     	;# 
  2216  0E95                     	;# 
  2217  0E9C                     	;# 
  2218  0E9D                     	;# 
  2219  0E9E                     	;# 
  2220  0E9F                     	;# 
  2221  0EA0                     	;# 
  2222  0EA1                     	;# 
  2223  0EA2                     	;# 
  2224  0EA3                     	;# 
  2225  0EA4                     	;# 
  2226  0EA5                     	;# 
  2227  0EA6                     	;# 
  2228  0EA7                     	;# 
  2229  0F0F                     	;# 
  2230  0F10                     	;# 
  2231  0F11                     	;# 
  2232  0F12                     	;# 
  2233  0F13                     	;# 
  2234  0F14                     	;# 
  2235  0F15                     	;# 
  2236  0F16                     	;# 
  2237  0F17                     	;# 
  2238  0F18                     	;# 
  2239  0F19                     	;# 
  2240  0F1A                     	;# 
  2241  0F1B                     	;# 
  2242  0F1C                     	;# 
  2243  0F1D                     	;# 
  2244  0F1E                     	;# 
  2245  0F1F                     	;# 
  2246  0F20                     	;# 
  2247  0F21                     	;# 
  2248  0F22                     	;# 
  2249  0F23                     	;# 
  2250  0F24                     	;# 
  2251  0F25                     	;# 
  2252  0F26                     	;# 
  2253  0F27                     	;# 
  2254  0F28                     	;# 
  2255  0F29                     	;# 
  2256  0F2A                     	;# 
  2257  0F2B                     	;# 
  2258  0F2C                     	;# 
  2259  0F2D                     	;# 
  2260  0F2E                     	;# 
  2261  0F2F                     	;# 
  2262  0F30                     	;# 
  2263  0F31                     	;# 
  2264  0F32                     	;# 
  2265  0F33                     	;# 
  2266  0F34                     	;# 
  2267  0F35                     	;# 
  2268  0F36                     	;# 
  2269  0F37                     	;# 
  2270  0FE4                     	;# 
  2271  0FE5                     	;# 
  2272  0FE6                     	;# 
  2273  0FE7                     	;# 
  2274  0FE8                     	;# 
  2275  0FE9                     	;# 
  2276  0FEA                     	;# 
  2277  0FEB                     	;# 
  2278  0FED                     	;# 
  2279  0FEE                     	;# 
  2280  0FEF                     	;# 
  2281  0000                     	;# 
  2282  0001                     	;# 
  2283  0002                     	;# 
  2284  0003                     	;# 
  2285  0004                     	;# 
  2286  0005                     	;# 
  2287  0006                     	;# 
  2288  0007                     	;# 
  2289  0008                     	;# 
  2290  0009                     	;# 
  2291  000A                     	;# 
  2292  000B                     	;# 
  2293  000C                     	;# 
  2294  000D                     	;# 
  2295  000E                     	;# 
  2296  0010                     	;# 
  2297  0011                     	;# 
  2298  0012                     	;# 
  2299  0013                     	;# 
  2300  0014                     	;# 
  2301  0015                     	;# 
  2302  0016                     	;# 
  2303  0016                     	;# 
  2304  0017                     	;# 
  2305  0018                     	;# 
  2306  0019                     	;# 
  2307  001A                     	;# 
  2308  001A                     	;# 
  2309  001B                     	;# 
  2310  001B                     	;# 
  2311  001C                     	;# 
  2312  001D                     	;# 
  2313  001E                     	;# 
  2314  001F                     	;# 
  2315  008C                     	;# 
  2316  008D                     	;# 
  2317  008E                     	;# 
  2318  0090                     	;# 
  2319  0091                     	;# 
  2320  0092                     	;# 
  2321  0093                     	;# 
  2322  0094                     	;# 
  2323  0095                     	;# 
  2324  0096                     	;# 
  2325  0098                     	;# 
  2326  0099                     	;# 
  2327  009A                     	;# 
  2328  009B                     	;# 
  2329  009B                     	;# 
  2330  009C                     	;# 
  2331  009D                     	;# 
  2332  009E                     	;# 
  2333  009F                     	;# 
  2334  010C                     	;# 
  2335  010D                     	;# 
  2336  010E                     	;# 
  2337  0111                     	;# 
  2338  0112                     	;# 
  2339  0113                     	;# 
  2340  0114                     	;# 
  2341  0115                     	;# 
  2342  0116                     	;# 
  2343  0117                     	;# 
  2344  0118                     	;# 
  2345  0119                     	;# 
  2346  011C                     	;# 
  2347  018C                     	;# 
  2348  018D                     	;# 
  2349  018E                     	;# 
  2350  0191                     	;# 
  2351  0191                     	;# 
  2352  0192                     	;# 
  2353  0193                     	;# 
  2354  0193                     	;# 
  2355  0194                     	;# 
  2356  0195                     	;# 
  2357  0196                     	;# 
  2358  0197                     	;# 
  2359  0199                     	;# 
  2360  0199                     	;# 
  2361  0199                     	;# 
  2362  019A                     	;# 
  2363  019A                     	;# 
  2364  019A                     	;# 
  2365  019B                     	;# 
  2366  019B                     	;# 
  2367  019B                     	;# 
  2368  019B                     	;# 
  2369  019B                     	;# 
  2370  019C                     	;# 
  2371  019C                     	;# 
  2372  019C                     	;# 
  2373  019D                     	;# 
  2374  019D                     	;# 
  2375  019D                     	;# 
  2376  019E                     	;# 
  2377  019E                     	;# 
  2378  019E                     	;# 
  2379  019F                     	;# 
  2380  019F                     	;# 
  2381  019F                     	;# 
  2382  019F                     	;# 
  2383  019F                     	;# 
  2384  020C                     	;# 
  2385  020D                     	;# 
  2386  020E                     	;# 
  2387  0211                     	;# 
  2388  0211                     	;# 
  2389  0212                     	;# 
  2390  0212                     	;# 
  2391  0213                     	;# 
  2392  0213                     	;# 
  2393  0214                     	;# 
  2394  0214                     	;# 
  2395  0215                     	;# 
  2396  0215                     	;# 
  2397  0215                     	;# 
  2398  0215                     	;# 
  2399  0216                     	;# 
  2400  0216                     	;# 
  2401  0217                     	;# 
  2402  0217                     	;# 
  2403  028C                     	;# 
  2404  028D                     	;# 
  2405  028E                     	;# 
  2406  0291                     	;# 
  2407  0291                     	;# 
  2408  0292                     	;# 
  2409  0293                     	;# 
  2410  0294                     	;# 
  2411  0298                     	;# 
  2412  0298                     	;# 
  2413  0299                     	;# 
  2414  029A                     	;# 
  2415  029B                     	;# 
  2416  029E                     	;# 
  2417  030C                     	;# 
  2418  030D                     	;# 
  2419  030E                     	;# 
  2420  038C                     	;# 
  2421  038D                     	;# 
  2422  038E                     	;# 
  2423  0391                     	;# 
  2424  0392                     	;# 
  2425  0393                     	;# 
  2426  0394                     	;# 
  2427  0395                     	;# 
  2428  0396                     	;# 
  2429  0397                     	;# 
  2430  0398                     	;# 
  2431  0399                     	;# 
  2432  040E                     	;# 
  2433  0413                     	;# 
  2434  0413                     	;# 
  2435  0414                     	;# 
  2436  0414                     	;# 
  2437  0415                     	;# 
  2438  0416                     	;# 
  2439  0417                     	;# 
  2440  0418                     	;# 
  2441  041A                     	;# 
  2442  041A                     	;# 
  2443  041B                     	;# 
  2444  041B                     	;# 
  2445  041C                     	;# 
  2446  041D                     	;# 
  2447  041E                     	;# 
  2448  041F                     	;# 
  2449  0493                     	;# 
  2450  0494                     	;# 
  2451  0495                     	;# 
  2452  0496                     	;# 
  2453  049A                     	;# 
  2454  049B                     	;# 
  2455  049C                     	;# 
  2456  049D                     	;# 
  2457  058C                     	;# 
  2458  058C                     	;# 
  2459  058D                     	;# 
  2460  058E                     	;# 
  2461  058E                     	;# 
  2462  058F                     	;# 
  2463  0590                     	;# 
  2464  0590                     	;# 
  2465  0591                     	;# 
  2466  0592                     	;# 
  2467  0592                     	;# 
  2468  0593                     	;# 
  2469  0594                     	;# 
  2470  0594                     	;# 
  2471  0595                     	;# 
  2472  0596                     	;# 
  2473  0596                     	;# 
  2474  0597                     	;# 
  2475  0598                     	;# 
  2476  0599                     	;# 
  2477  059A                     	;# 
  2478  059B                     	;# 
  2479  059B                     	;# 
  2480  059C                     	;# 
  2481  059D                     	;# 
  2482  060C                     	;# 
  2483  060C                     	;# 
  2484  060D                     	;# 
  2485  060E                     	;# 
  2486  060F                     	;# 
  2487  060F                     	;# 
  2488  0610                     	;# 
  2489  0611                     	;# 
  2490  0612                     	;# 
  2491  0613                     	;# 
  2492  0614                     	;# 
  2493  0617                     	;# 
  2494  0618                     	;# 
  2495  0619                     	;# 
  2496  061A                     	;# 
  2497  061B                     	;# 
  2498  061C                     	;# 
  2499  0691                     	;# 
  2500  0692                     	;# 
  2501  0693                     	;# 
  2502  0694                     	;# 
  2503  0695                     	;# 
  2504  0696                     	;# 
  2505  0697                     	;# 
  2506  0699                     	;# 
  2507  069A                     	;# 
  2508  0711                     	;# 
  2509  0712                     	;# 
  2510  0713                     	;# 
  2511  0714                     	;# 
  2512  0715                     	;# 
  2513  0718                     	;# 
  2514  0718                     	;# 
  2515  0719                     	;# 
  2516  071A                     	;# 
  2517  071A                     	;# 
  2518  071B                     	;# 
  2519  071C                     	;# 
  2520  071D                     	;# 
  2521  0791                     	;# 
  2522  0791                     	;# 
  2523  0792                     	;# 
  2524  0793                     	;# 
  2525  0793                     	;# 
  2526  0794                     	;# 
  2527  0795                     	;# 
  2528  0795                     	;# 
  2529  0796                     	;# 
  2530  0797                     	;# 
  2531  0797                     	;# 
  2532  0798                     	;# 
  2533  0799                     	;# 
  2534  079A                     	;# 
  2535  080C                     	;# 
  2536  080C                     	;# 
  2537  080D                     	;# 
  2538  080E                     	;# 
  2539  080E                     	;# 
  2540  080F                     	;# 
  2541  0810                     	;# 
  2542  0810                     	;# 
  2543  0811                     	;# 
  2544  0812                     	;# 
  2545  0812                     	;# 
  2546  0813                     	;# 
  2547  0814                     	;# 
  2548  0815                     	;# 
  2549  0816                     	;# 
  2550  0817                     	;# 
  2551  0818                     	;# 
  2552  0819                     	;# 
  2553  081A                     	;# 
  2554  081A                     	;# 
  2555  081B                     	;# 
  2556  081C                     	;# 
  2557  081C                     	;# 
  2558  081D                     	;# 
  2559  088C                     	;# 
  2560  088D                     	;# 
  2561  088E                     	;# 
  2562  088F                     	;# 
  2563  088F                     	;# 
  2564  0890                     	;# 
  2565  0891                     	;# 
  2566  0892                     	;# 
  2567  0893                     	;# 
  2568  0893                     	;# 
  2569  0894                     	;# 
  2570  0895                     	;# 
  2571  0896                     	;# 
  2572  0897                     	;# 
  2573  0897                     	;# 
  2574  0898                     	;# 
  2575  0899                     	;# 
  2576  0D8C                     	;# 
  2577  0D8C                     	;# 
  2578  0D8D                     	;# 
  2579  0D8E                     	;# 
  2580  0D8F                     	;# 
  2581  0D8F                     	;# 
  2582  0D90                     	;# 
  2583  0D91                     	;# 
  2584  0D92                     	;# 
  2585  0D92                     	;# 
  2586  0D93                     	;# 
  2587  0D94                     	;# 
  2588  0D95                     	;# 
  2589  0D95                     	;# 
  2590  0D96                     	;# 
  2591  0D97                     	;# 
  2592  0D98                     	;# 
  2593  0D99                     	;# 
  2594  0D9A                     	;# 
  2595  0D9B                     	;# 
  2596  0D9C                     	;# 
  2597  0D9D                     	;# 
  2598  0D9E                     	;# 
  2599  0D9E                     	;# 
  2600  0D9F                     	;# 
  2601  0DA0                     	;# 
  2602  0DA1                     	;# 
  2603  0DA1                     	;# 
  2604  0DA2                     	;# 
  2605  0DA3                     	;# 
  2606  0DA4                     	;# 
  2607  0DA4                     	;# 
  2608  0DA5                     	;# 
  2609  0DA6                     	;# 
  2610  0DA7                     	;# 
  2611  0DA7                     	;# 
  2612  0DA8                     	;# 
  2613  0DA9                     	;# 
  2614  0DAA                     	;# 
  2615  0DAB                     	;# 
  2616  0DAC                     	;# 
  2617  0DAD                     	;# 
  2618  0DAE                     	;# 
  2619  0DAF                     	;# 
  2620  0E0F                     	;# 
  2621  0E10                     	;# 
  2622  0E11                     	;# 
  2623  0E12                     	;# 
  2624  0E13                     	;# 
  2625  0E14                     	;# 
  2626  0E15                     	;# 
  2627  0E16                     	;# 
  2628  0E17                     	;# 
  2629  0E18                     	;# 
  2630  0E19                     	;# 
  2631  0E1A                     	;# 
  2632  0E1B                     	;# 
  2633  0E1C                     	;# 
  2634  0E1D                     	;# 
  2635  0E1E                     	;# 
  2636  0E1F                     	;# 
  2637  0E20                     	;# 
  2638  0E21                     	;# 
  2639  0E22                     	;# 
  2640  0E23                     	;# 
  2641  0E24                     	;# 
  2642  0E25                     	;# 
  2643  0E26                     	;# 
  2644  0E27                     	;# 
  2645  0E28                     	;# 
  2646  0E29                     	;# 
  2647  0E2A                     	;# 
  2648  0E2B                     	;# 
  2649  0E2C                     	;# 
  2650  0E2D                     	;# 
  2651  0E2E                     	;# 
  2652  0E90                     	;# 
  2653  0E91                     	;# 
  2654  0E92                     	;# 
  2655  0E94                     	;# 
  2656  0E95                     	;# 
  2657  0E9C                     	;# 
  2658  0E9D                     	;# 
  2659  0E9E                     	;# 
  2660  0E9F                     	;# 
  2661  0EA0                     	;# 
  2662  0EA1                     	;# 
  2663  0EA2                     	;# 
  2664  0EA3                     	;# 
  2665  0EA4                     	;# 
  2666  0EA5                     	;# 
  2667  0EA6                     	;# 
  2668  0EA7                     	;# 
  2669  0F0F                     	;# 
  2670  0F10                     	;# 
  2671  0F11                     	;# 
  2672  0F12                     	;# 
  2673  0F13                     	;# 
  2674  0F14                     	;# 
  2675  0F15                     	;# 
  2676  0F16                     	;# 
  2677  0F17                     	;# 
  2678  0F18                     	;# 
  2679  0F19                     	;# 
  2680  0F1A                     	;# 
  2681  0F1B                     	;# 
  2682  0F1C                     	;# 
  2683  0F1D                     	;# 
  2684  0F1E                     	;# 
  2685  0F1F                     	;# 
  2686  0F20                     	;# 
  2687  0F21                     	;# 
  2688  0F22                     	;# 
  2689  0F23                     	;# 
  2690  0F24                     	;# 
  2691  0F25                     	;# 
  2692  0F26                     	;# 
  2693  0F27                     	;# 
  2694  0F28                     	;# 
  2695  0F29                     	;# 
  2696  0F2A                     	;# 
  2697  0F2B                     	;# 
  2698  0F2C                     	;# 
  2699  0F2D                     	;# 
  2700  0F2E                     	;# 
  2701  0F2F                     	;# 
  2702  0F30                     	;# 
  2703  0F31                     	;# 
  2704  0F32                     	;# 
  2705  0F33                     	;# 
  2706  0F34                     	;# 
  2707  0F35                     	;# 
  2708  0F36                     	;# 
  2709  0F37                     	;# 
  2710  0FE4                     	;# 
  2711  0FE5                     	;# 
  2712  0FE6                     	;# 
  2713  0FE7                     	;# 
  2714  0FE8                     	;# 
  2715  0FE9                     	;# 
  2716  0FEA                     	;# 
  2717  0FEB                     	;# 
  2718  0FED                     	;# 
  2719  0FEE                     	;# 
  2720  0FEF                     	;# 
  2721  000E                     _PORTCbits	set	14
  2722  000B                     _INTCONbits	set	11
  2723  0011                     _PIR2bits	set	17
  2724  0010                     _PIR1bits	set	16
  2725  0095                     _OPTION_REG	set	149
  2726  0095                     _OPTION_REGbits	set	149
  2727  008E                     _TRISC	set	142
  2728  008D                     _TRISB	set	141
  2729  008C                     _TRISA	set	140
  2730  0098                     _OSCTUNE	set	152
  2731  0099                     _OSCCON	set	153
  2732  0091                     _PIE2bits	set	145
  2733  0090                     _PIE1bits	set	144
  2734  046C                     _TRISB4	set	1132
  2735  046E                     _TRISB6	set	1134
  2736  010E                     _LATC	set	270
  2737  010D                     _LATB	set	269
  2738  010C                     _LATA	set	268
  2739  0116                     _BORCON	set	278
  2740  086C                     _LATB4	set	2156
  2741  086E                     _LATB6	set	2158
  2742  018C                     _ANSELA	set	396
  2743  018D                     _ANSELB	set	397
  2744  018E                     _ANSELC	set	398
  2745  0216                     _SSP1CON2	set	534
  2746  020E                     _WPUC	set	526
  2747  020C                     _WPUA	set	524
  2748  020D                     _WPUB	set	525
  2749  0211                     _SSP1BUF	set	529
  2750  0216                     _SSP1CON2bits	set	534
  2751  0215                     _SSP1CON1bits	set	533
  2752  0212                     _SSP1ADD	set	530
  2753  0217                     _SSP1CON3	set	535
  2754  0215                     _SSP1CON1	set	533
  2755  0214                     _SSP1STAT	set	532
  2756  028E                     _ODCONC	set	654
  2757  028D                     _ODCONB	set	653
  2758  028C                     _ODCONA	set	652
  2759  0E20                     _SSPCLKPPS	set	3616
  2760  0E21                     _SSPDATPPS	set	3617
  2761  0E9C                     _RB4PPS	set	3740
  2762  0E9E                     _RB6PPS	set	3742
  2763                           
  2764                           ; #config settings
  2765  0000                     
  2766                           	psect	cinit
  2767  0024                     start_initialization:	
  2768  0024                     __initialization:	
  2769                           
  2770                           ; Clear objects allocated to COMMON
  2771  0024  01F0               	clrf	__pbssCOMMON& (0+127)
  2772  0025  01F1               	clrf	(__pbssCOMMON+1)& (0+127)
  2773  0026  01F2               	clrf	(__pbssCOMMON+2)& (0+127)
  2774  0027  01F3               	clrf	(__pbssCOMMON+3)& (0+127)
  2775  0028  01F4               	clrf	(__pbssCOMMON+4)& (0+127)
  2776  0029  01F5               	clrf	(__pbssCOMMON+5)& (0+127)
  2777                           
  2778                           ; Clear objects allocated to BANK0
  2779  002A  3040               	movlw	low __pbssBANK0
  2780  002B  0084               	movwf	4
  2781  002C  3000               	movlw	high __pbssBANK0
  2782  002D  0085               	movwf	5
  2783  002E  3013               	movlw	19
  2784  002F  3187  2759         	fcall	clear_ram0
  2785  0031                     end_of_initialization:	
  2786                           ;End of C runtime variable initialization code
  2787                           
  2788  0031                     __end_of__initialization:	
  2789  0031  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  2790  0032  0020               	movlb	0
  2791  0033  3180  2835         	ljmp	_main	;jump to C main() function
  2792                           
  2793                           	psect	bssCOMMON
  2794  0070                     __pbssCOMMON:	
  2795  0070                     I2C_ISR@pi2c_buf_ptr:	
  2796  0070                     	ds	1
  2797  0071                     _p_i2c_trb_current:	
  2798  0071                     	ds	1
  2799  0072                     _i2c_trb_count:	
  2800  0072                     	ds	1
  2801  0073                     _i2c_state:	
  2802  0073                     	ds	1
  2803  0074                     I2C_ISR@i2c_address:	
  2804  0074                     	ds	2
  2805                           
  2806                           	psect	bssBANK0
  2807  0040                     __pbssBANK0:	
  2808  0040                     _i2c_object:	
  2809  0040                     	ds	5
  2810  0045                     I2C_ISR@i2c_10bit_address_restart:	
  2811  0045                     	ds	1
  2812  0046                     I2C_ISR@i2c_bytes_left:	
  2813  0046                     	ds	1
  2814  0047                     _p_i2c_current:	
  2815  0047                     	ds	1
  2816  0048                     I2C_MasterRead@trBlock:	
  2817  0048                     	ds	4
  2818  004C                     I2C_MasterWrite@trBlock:	
  2819  004C                     	ds	4
  2820  0050                     _i2c_tr_queue:	
  2821  0050                     	ds	3
  2822                           
  2823                           	psect	clrtext
  2824  0759                     clear_ram0:	
  2825                           ;	Called with FSR0 containing the base address, and
  2826                           ;	WREG with the size to clear
  2827                           
  2828  0759  0064               	clrwdt	;clear the watchdog before getting into this loop
  2829  075A                     clrloop0:	
  2830  075A  0180               	clrf	0	;clear RAM location pointed to by FSR
  2831  075B  3101               	addfsr 0,1
  2832  075C  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2833  075D  2F5A               	goto	clrloop0	;have we reached the end yet?
  2834  075E  3400               	retlw	0	;all done for this memory range, return
  2835                           
  2836                           	psect	cstackCOMMON
  2837  0076                     __pcstackCOMMON:	
  2838  0076                     ?_I2C_Stop:	
  2839  0076                     ??_I2C_Stop:	
  2840                           ; 1 bytes @ 0x0
  2841                           
  2842  0076                     ?_I2C_FunctionComplete:	
  2843                           ; 1 bytes @ 0x0
  2844                           
  2845  0076                     ??_I2C_FunctionComplete:	
  2846                           ; 1 bytes @ 0x0
  2847                           
  2848  0076                     ?_PIN_MANAGER_Initialize:	
  2849                           ; 1 bytes @ 0x0
  2850                           
  2851  0076                     ?_OSCILLATOR_Initialize:	
  2852                           ; 1 bytes @ 0x0
  2853                           
  2854  0076                     ?_waitI2C:	
  2855                           ; 1 bytes @ 0x0
  2856                           
  2857  0076                     ?_I2C_ISR:	
  2858                           ; 1 bytes @ 0x0
  2859                           
  2860  0076                     ?_I2C_BusCollisionISR:	
  2861                           ; 1 bytes @ 0x0
  2862                           
  2863  0076                     ??_I2C_BusCollisionISR:	
  2864                           ; 1 bytes @ 0x0
  2865                           
  2866  0076                     ?_INTERRUPT_InterruptManager:	
  2867                           ; 1 bytes @ 0x0
  2868                           
  2869  0076                     ?_SYSTEM_Initialize:	
  2870                           ; 1 bytes @ 0x0
  2871                           
  2872  0076                     ?_initI2C:	
  2873                           ; 1 bytes @ 0x0
  2874                           
  2875  0076                     ?_startI2C:	
  2876                           ; 1 bytes @ 0x0
  2877                           
  2878  0076                     ?_stopI2C:	
  2879                           ; 1 bytes @ 0x0
  2880                           
  2881  0076                     ?_sendI2C:	
  2882                           ; 1 bytes @ 0x0
  2883                           
  2884  0076                     ?_readI2C:	
  2885                           ; 1 bytes @ 0x0
  2886                           
  2887  0076                     ?_re_startI2C:	
  2888                           ; 1 bytes @ 0x0
  2889                           
  2890  0076                     ?_sendNoAckI2C:	
  2891                           ; 1 bytes @ 0x0
  2892                           
  2893  0076                     ?_writeInst:	
  2894                           ; 1 bytes @ 0x0
  2895                           
  2896  0076                     ?_initRW1063:	
  2897                           ; 1 bytes @ 0x0
  2898                           
  2899  0076                     ?_initRTC:	
  2900                           ; 1 bytes @ 0x0
  2901                           
  2902  0076                     ?_convertFromBcd:	
  2903                           ; 1 bytes @ 0x0
  2904                           
  2905  0076                     ?_FSM:	
  2906                           ; 1 bytes @ 0x0
  2907                           
  2908  0076                     ?_changeMin:	
  2909                           ; 1 bytes @ 0x0
  2910                           
  2911  0076                     ?_changeHeure:	
  2912                           ; 1 bytes @ 0x0
  2913                           
  2914  0076                     ?_readSec:	
  2915                           ; 1 bytes @ 0x0
  2916                           
  2917  0076                     ?_readMin:	
  2918                           ; 1 bytes @ 0x0
  2919                           
  2920  0076                     ?_readHr:	
  2921                           ; 1 bytes @ 0x0
  2922                           
  2923  0076                     ?_printReglageH:	
  2924                           ; 1 bytes @ 0x0
  2925                           
  2926  0076                     ?_incrMin:	
  2927                           ; 1 bytes @ 0x0
  2928                           
  2929  0076                     ?_incrHeure:	
  2930                           ; 1 bytes @ 0x0
  2931                           
  2932  0076                     ?_main:	
  2933                           ; 1 bytes @ 0x0
  2934                           
  2935  0076                     I2C_Stop@completion_code:	
  2936                           ; 1 bytes @ 0x0
  2937                           
  2938                           
  2939                           ; 1 bytes @ 0x0
  2940  0076                     	ds	1
  2941  0077                     ??_I2C_ISR:	
  2942                           
  2943                           ; 1 bytes @ 0x1
  2944  0077                     	ds	4
  2945  007B                     ??_INTERRUPT_InterruptManager:	
  2946                           
  2947                           ; 1 bytes @ 0x5
  2948  007B                     	ds	1
  2949                           
  2950                           	psect	cstackBANK0
  2951  0020                     __pcstackBANK0:	
  2952  0020                     ??_PIN_MANAGER_Initialize:	
  2953  0020                     ??_OSCILLATOR_Initialize:	
  2954                           ; 1 bytes @ 0x0
  2955                           
  2956  0020                     ??_waitI2C:	
  2957                           ; 1 bytes @ 0x0
  2958                           
  2959  0020                     ??_SYSTEM_Initialize:	
  2960                           ; 1 bytes @ 0x0
  2961                           
  2962  0020                     ??_initI2C:	
  2963                           ; 1 bytes @ 0x0
  2964                           
  2965  0020                     ??_startI2C:	
  2966                           ; 1 bytes @ 0x0
  2967                           
  2968  0020                     ??_stopI2C:	
  2969                           ; 1 bytes @ 0x0
  2970                           
  2971  0020                     ??_sendI2C:	
  2972                           ; 1 bytes @ 0x0
  2973                           
  2974  0020                     ??_readI2C:	
  2975                           ; 1 bytes @ 0x0
  2976                           
  2977  0020                     ??_re_startI2C:	
  2978                           ; 1 bytes @ 0x0
  2979                           
  2980  0020                     ??_sendNoAckI2C:	
  2981                           ; 1 bytes @ 0x0
  2982                           
  2983  0020                     ?_bitExtracted:	
  2984                           ; 1 bytes @ 0x0
  2985                           
  2986  0020                     ??_FSM:	
  2987                           ; 1 bytes @ 0x0
  2988                           
  2989  0020                     ?___bmul:	
  2990                           ; 1 bytes @ 0x0
  2991                           
  2992  0020                     sendI2C@data:	
  2993                           ; 1 bytes @ 0x0
  2994                           
  2995  0020                     bitExtracted@k:	
  2996                           ; 1 bytes @ 0x0
  2997                           
  2998  0020                     FSM@IN:	
  2999                           ; 1 bytes @ 0x0
  3000                           
  3001  0020                     ___bmul@multiplicand:	
  3002                           ; 1 bytes @ 0x0
  3003                           
  3004                           
  3005                           ; 1 bytes @ 0x0
  3006  0020                     	ds	1
  3007  0021                     ??_writeInst:	
  3008  0021                     ??_initRTC:	
  3009                           ; 1 bytes @ 0x1
  3010                           
  3011  0021                     ??_changeMin:	
  3012                           ; 1 bytes @ 0x1
  3013                           
  3014  0021                     ??_changeHeure:	
  3015                           ; 1 bytes @ 0x1
  3016                           
  3017  0021                     ??___bmul:	
  3018                           ; 1 bytes @ 0x1
  3019                           
  3020  0021                     readI2C@temp:	
  3021                           ; 1 bytes @ 0x1
  3022                           
  3023  0021                     bitExtracted@p:	
  3024                           ; 1 bytes @ 0x1
  3025                           
  3026  0021                     changeMin@minute:	
  3027                           ; 1 bytes @ 0x1
  3028                           
  3029  0021                     changeHeure@heure:	
  3030                           ; 1 bytes @ 0x1
  3031                           
  3032  0021                     initI2C@i:	
  3033                           ; 1 bytes @ 0x1
  3034                           
  3035                           
  3036                           ; 2 bytes @ 0x1
  3037  0021                     	ds	1
  3038  0022                     ??_bitExtracted:	
  3039  0022                     ??_readSec:	
  3040                           ; 1 bytes @ 0x2
  3041                           
  3042  0022                     ??_readMin:	
  3043                           ; 1 bytes @ 0x2
  3044                           
  3045  0022                     ??_readHr:	
  3046                           ; 1 bytes @ 0x2
  3047                           
  3048  0022                     writeInst@Inst:	
  3049                           ; 1 bytes @ 0x2
  3050                           
  3051  0022                     ___bmul@product:	
  3052                           ; 1 bytes @ 0x2
  3053                           
  3054                           
  3055                           ; 1 bytes @ 0x2
  3056  0022                     	ds	1
  3057  0023                     ?_writeData:	
  3058  0023                     ??_initRW1063:	
  3059                           ; 1 bytes @ 0x3
  3060                           
  3061  0023                     writeData@adress:	
  3062                           ; 1 bytes @ 0x3
  3063                           
  3064  0023                     readSec@second:	
  3065                           ; 1 bytes @ 0x3
  3066                           
  3067  0023                     readMin@minute:	
  3068                           ; 1 bytes @ 0x3
  3069                           
  3070  0023                     readHr@heure:	
  3071                           ; 1 bytes @ 0x3
  3072                           
  3073  0023                     ___bmul@multiplier:	
  3074                           ; 1 bytes @ 0x3
  3075                           
  3076                           
  3077                           ; 1 bytes @ 0x3
  3078  0023                     	ds	1
  3079  0024                     ??_convertFromBcd:	
  3080  0024                     writeData@ligne:	
  3081                           ; 1 bytes @ 0x4
  3082                           
  3083  0024                     bitExtracted@number:	
  3084                           ; 1 bytes @ 0x4
  3085                           
  3086                           
  3087                           ; 1 bytes @ 0x4
  3088  0024                     	ds	1
  3089  0025                     ??_writeData:	
  3090  0025                     ??_incrMin:	
  3091                           ; 1 bytes @ 0x5
  3092                           
  3093  0025                     ??_incrHeure:	
  3094                           ; 1 bytes @ 0x5
  3095                           
  3096                           
  3097                           ; 1 bytes @ 0x5
  3098  0025                     	ds	1
  3099  0026                     writeData@data:	
  3100  0026                     convertFromBcd@byteMSB:	
  3101                           ; 1 bytes @ 0x6
  3102                           
  3103                           
  3104                           ; 1 bytes @ 0x6
  3105  0026                     	ds	1
  3106  0027                     writeData@i:	
  3107  0027                     convertFromBcd@byteLSB:	
  3108                           ; 1 bytes @ 0x7
  3109                           
  3110                           
  3111                           ; 1 bytes @ 0x7
  3112  0027                     	ds	1
  3113  0028                     ??_printReglageH:	
  3114  0028                     convertFromBcd@byteBCD:	
  3115                           ; 1 bytes @ 0x8
  3116                           
  3117  0028                     incrMin@dizaineM:	
  3118                           ; 1 bytes @ 0x8
  3119                           
  3120  0028                     incrHeure@dizaineH:	
  3121                           ; 1 bytes @ 0x8
  3122                           
  3123                           
  3124                           ; 1 bytes @ 0x8
  3125  0028                     	ds	1
  3126  0029                     incrMin@uniteM:	
  3127  0029                     incrHeure@uniteH:	
  3128                           ; 1 bytes @ 0x9
  3129                           
  3130                           
  3131                           ; 1 bytes @ 0x9
  3132  0029                     	ds	1
  3133  002A                     incrMin@minute:	
  3134  002A                     incrHeure@heure:	
  3135                           ; 1 bytes @ 0xA
  3136                           
  3137                           
  3138                           ; 1 bytes @ 0xA
  3139  002A                     	ds	1
  3140  002B                     printReglageH@dizaineM:	
  3141                           
  3142                           ; 1 bytes @ 0xB
  3143  002B                     	ds	1
  3144  002C                     printReglageH@uniteM:	
  3145                           
  3146                           ; 1 bytes @ 0xC
  3147  002C                     	ds	1
  3148  002D                     printReglageH@dizaineH:	
  3149                           
  3150                           ; 1 bytes @ 0xD
  3151  002D                     	ds	1
  3152  002E                     printReglageH@uniteH:	
  3153                           
  3154                           ; 1 bytes @ 0xE
  3155  002E                     	ds	1
  3156  002F                     printReglageH@minute:	
  3157                           
  3158                           ; 1 bytes @ 0xF
  3159  002F                     	ds	1
  3160  0030                     printReglageH@heure:	
  3161                           
  3162                           ; 1 bytes @ 0x10
  3163  0030                     	ds	1
  3164  0031                     ??_main:	
  3165                           
  3166                           ; 1 bytes @ 0x11
  3167  0031                     	ds	3
  3168  0034                     main@buffer:	
  3169                           
  3170                           ; 1 bytes @ 0x14
  3171  0034                     	ds	1
  3172  0035                     main@uniteS:	
  3173                           
  3174                           ; 1 bytes @ 0x15
  3175  0035                     	ds	1
  3176  0036                     main@dizaineS:	
  3177                           
  3178                           ; 1 bytes @ 0x16
  3179  0036                     	ds	1
  3180  0037                     main@uniteM:	
  3181                           
  3182                           ; 1 bytes @ 0x17
  3183  0037                     	ds	1
  3184  0038                     main@dizaineM:	
  3185                           
  3186                           ; 1 bytes @ 0x18
  3187  0038                     	ds	1
  3188  0039                     main@uniteH:	
  3189                           
  3190                           ; 1 bytes @ 0x19
  3191  0039                     	ds	1
  3192  003A                     main@dizaineH:	
  3193                           
  3194                           ; 1 bytes @ 0x1A
  3195  003A                     	ds	1
  3196  003B                     main@menu:	
  3197                           
  3198                           ; 1 bytes @ 0x1B
  3199  003B                     	ds	1
  3200  003C                     main@select:	
  3201                           
  3202                           ; 1 bytes @ 0x1C
  3203  003C                     	ds	1
  3204  003D                     main@minute:	
  3205                           
  3206                           ; 1 bytes @ 0x1D
  3207  003D                     	ds	1
  3208  003E                     main@heure:	
  3209                           
  3210                           ; 1 bytes @ 0x1E
  3211  003E                     	ds	1
  3212  003F                     main@second:	
  3213                           
  3214                           ; 1 bytes @ 0x1F
  3215  003F                     	ds	1
  3216                           
  3217                           	psect	maintext
  3218  0035                     __pmaintext:	
  3219 ;;
  3220 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
  3221 ;;
  3222 ;; *************** function _main *****************
  3223 ;; Defined at:
  3224 ;;		line 293 in file "main.c"
  3225 ;; Parameters:    Size  Location     Type
  3226 ;;		None
  3227 ;; Auto vars:     Size  Location     Type
  3228 ;;  second          1   31[BANK0 ] unsigned char 
  3229 ;;  heure           1   30[BANK0 ] unsigned char 
  3230 ;;  minute          1   29[BANK0 ] unsigned char 
  3231 ;;  select          1   28[BANK0 ] unsigned char 
  3232 ;;  menu            1   27[BANK0 ] unsigned char 
  3233 ;;  dizaineH        1   26[BANK0 ] unsigned char 
  3234 ;;  uniteH          1   25[BANK0 ] unsigned char 
  3235 ;;  dizaineM        1   24[BANK0 ] unsigned char 
  3236 ;;  uniteM          1   23[BANK0 ] unsigned char 
  3237 ;;  dizaineS        1   22[BANK0 ] unsigned char 
  3238 ;;  uniteS          1   21[BANK0 ] unsigned char 
  3239 ;;  buffer          1   20[BANK0 ] unsigned char 
  3240 ;; Return value:  Size  Location     Type
  3241 ;;                  1    wreg      void 
  3242 ;; Registers used:
  3243 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3244 ;; Tracked objects:
  3245 ;;		On entry : B1F/0
  3246 ;;		On exit  : 0/0
  3247 ;;		Unchanged: 0/0
  3248 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3249 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3250 ;;      Locals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3251 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3252 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3253 ;;Total ram usage:       15 bytes
  3254 ;; Hardware stack levels required when called:    8
  3255 ;; This function calls:
  3256 ;;		_FSM
  3257 ;;		_SYSTEM_Initialize
  3258 ;;		_bitExtracted
  3259 ;;		_convertFromBcd
  3260 ;;		_incrHeure
  3261 ;;		_incrMin
  3262 ;;		_initI2C
  3263 ;;		_initRTC
  3264 ;;		_initRW1063
  3265 ;;		_printReglageH
  3266 ;;		_readHr
  3267 ;;		_readMin
  3268 ;;		_readSec
  3269 ;;		_writeData
  3270 ;;		_writeInst
  3271 ;; This function is called by:
  3272 ;;		Startup code after reset
  3273 ;; This function uses a non-reentrant model
  3274 ;;
  3275                           
  3276                           
  3277                           ;psect for function _main
  3278  0035                     _main:	
  3279                           
  3280                           ;main.c: 295: SYSTEM_Initialize();
  3281                           
  3282                           ;incstack = 0
  3283                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3284  0035  3187  2765  3180   	fcall	_SYSTEM_Initialize
  3285                           
  3286                           ;main.c: 296: initI2C();
  3287  0038  3184  24FF  3180   	fcall	_initI2C
  3288                           
  3289                           ;main.c: 297: initRW1063();
  3290  003B  3187  2703  3180   	fcall	_initRW1063
  3291                           
  3292                           ;main.c: 300: (INTCONbits.GIE = 0);
  3293  003E  138B               	bcf	11,7	;volatile
  3294                           
  3295                           ;main.c: 301: (INTCONbits.PEIE = 0);
  3296  003F  130B               	bcf	11,6	;volatile
  3297                           
  3298                           ;main.c: 302: writeInst(0b00000001);
  3299  0040  3001               	movlw	1
  3300  0041  3185  253B  3180   	fcall	_writeInst
  3301                           
  3302                           ;main.c: 303: _delay((unsigned long)((40)*(16000000/4000.0)));
  3303  0044  30D0               	movlw	208
  3304  0045  0020               	movlb	0	; select bank0
  3305  0046  00B1               	movwf	??_main
  3306  0047  30C9               	movlw	201
  3307  0048                     u2307:	
  3308  0048  0B89               	decfsz	9,f
  3309  0049  2848               	goto	u2307
  3310  004A  0BB1               	decfsz	??_main,f
  3311  004B  2848               	goto	u2307
  3312  004C  3200               	nop2
  3313                           
  3314                           ;main.c: 304: initRTC();
  3315  004D  3184  24AE  3180   	fcall	_initRTC
  3316                           
  3317                           ;main.c: 305: uint8_t second = 0;
  3318  0050  0020               	movlb	0	; select bank0
  3319  0051  01BF               	clrf	main@second
  3320                           
  3321                           ;main.c: 306: uint8_t minute = 0;
  3322  0052  01BD               	clrf	main@minute
  3323                           
  3324                           ;main.c: 307: uint8_t heure = 0;
  3325  0053  01BE               	clrf	main@heure
  3326                           
  3327                           ;main.c: 308: uint8_t uniteS = 0;
  3328  0054  01B5               	clrf	main@uniteS
  3329                           
  3330                           ;main.c: 309: uint8_t dizaineS = 0;
  3331  0055  01B6               	clrf	main@dizaineS
  3332                           
  3333                           ;main.c: 310: uint8_t uniteM = 0;
  3334  0056  01B7               	clrf	main@uniteM
  3335                           
  3336                           ;main.c: 311: uint8_t dizaineM = 0;
  3337  0057  01B8               	clrf	main@dizaineM
  3338                           
  3339                           ;main.c: 312: uint8_t uniteH = 0;
  3340  0058  01B9               	clrf	main@uniteH
  3341                           
  3342                           ;main.c: 313: uint8_t dizaineH = 0;
  3343  0059  01BA               	clrf	main@dizaineH
  3344                           
  3345                           ;main.c: 314: uint8_t buffer = 0;
  3346  005A  01B4               	clrf	main@buffer
  3347                           
  3348                           ;main.c: 315: uint8_t menu = 0;
  3349  005B  01BB               	clrf	main@menu
  3350                           
  3351                           ;main.c: 316: uint8_t select=0;
  3352  005C  01BC               	clrf	main@select
  3353  005D                     l2940:	
  3354                           ;main.c: 317: while (1) {
  3355                           
  3356                           
  3357                           ;main.c: 318: second = readSec();
  3358  005D  3185  2574  3180   	fcall	_readSec
  3359  0060  0020               	movlb	0	; select bank0
  3360  0061  00B1               	movwf	??_main
  3361  0062  0831               	movf	??_main,w
  3362  0063  00BF               	movwf	main@second
  3363                           
  3364                           ;main.c: 319: minute = readMin();
  3365  0064  3185  25A0  3180   	fcall	_readMin
  3366  0067  0020               	movlb	0	; select bank0
  3367  0068  00B1               	movwf	??_main
  3368  0069  0831               	movf	??_main,w
  3369  006A  00BD               	movwf	main@minute
  3370                           
  3371                           ;main.c: 320: heure = readHr();
  3372  006B  3185  25CC  3180   	fcall	_readHr
  3373  006E  0020               	movlb	0	; select bank0
  3374  006F  00B1               	movwf	??_main
  3375  0070  0831               	movf	??_main,w
  3376  0071  00BE               	movwf	main@heure
  3377                           
  3378                           ;main.c: 322: second = second - 0b10000000;
  3379  0072  083F               	movf	main@second,w
  3380  0073  3E80               	addlw	128
  3381  0074  00B1               	movwf	??_main
  3382  0075  0831               	movf	??_main,w
  3383  0076  00BF               	movwf	main@second
  3384                           
  3385                           ;main.c: 324: uniteS = bitExtracted(second, 4, 1);
  3386  0077  3004               	movlw	4
  3387  0078  00B1               	movwf	??_main
  3388  0079  0831               	movf	??_main,w
  3389  007A  00A0               	movwf	bitExtracted@k
  3390  007B  01A1               	clrf	bitExtracted@p
  3391  007C  0AA1               	incf	bitExtracted@p,f
  3392  007D  083F               	movf	main@second,w
  3393  007E  3186  26B5  3180   	fcall	_bitExtracted
  3394  0081  0020               	movlb	0	; select bank0
  3395  0082  00B2               	movwf	??_main+1
  3396  0083  0832               	movf	??_main+1,w
  3397  0084  00B5               	movwf	main@uniteS
  3398                           
  3399                           ;main.c: 325: dizaineS = bitExtracted(second, 3, 5);
  3400  0085  3003               	movlw	3
  3401  0086  00B1               	movwf	??_main
  3402  0087  0831               	movf	??_main,w
  3403  0088  00A0               	movwf	bitExtracted@k
  3404  0089  3005               	movlw	5
  3405  008A  00B2               	movwf	??_main+1
  3406  008B  0832               	movf	??_main+1,w
  3407  008C  00A1               	movwf	bitExtracted@p
  3408  008D  083F               	movf	main@second,w
  3409  008E  3186  26B5  3180   	fcall	_bitExtracted
  3410  0091  0020               	movlb	0	; select bank0
  3411  0092  00B3               	movwf	??_main+2
  3412  0093  0833               	movf	??_main+2,w
  3413  0094  00B6               	movwf	main@dizaineS
  3414                           
  3415                           ;main.c: 327: uniteM = bitExtracted(minute, 4, 1);
  3416  0095  3004               	movlw	4
  3417  0096  00B1               	movwf	??_main
  3418  0097  0831               	movf	??_main,w
  3419  0098  00A0               	movwf	bitExtracted@k
  3420  0099  01A1               	clrf	bitExtracted@p
  3421  009A  0AA1               	incf	bitExtracted@p,f
  3422  009B  083D               	movf	main@minute,w
  3423  009C  3186  26B5  3180   	fcall	_bitExtracted
  3424  009F  0020               	movlb	0	; select bank0
  3425  00A0  00B2               	movwf	??_main+1
  3426  00A1  0832               	movf	??_main+1,w
  3427  00A2  00B7               	movwf	main@uniteM
  3428                           
  3429                           ;main.c: 328: dizaineM = bitExtracted(minute, 3, 5);
  3430  00A3  3003               	movlw	3
  3431  00A4  00B1               	movwf	??_main
  3432  00A5  0831               	movf	??_main,w
  3433  00A6  00A0               	movwf	bitExtracted@k
  3434  00A7  3005               	movlw	5
  3435  00A8  00B2               	movwf	??_main+1
  3436  00A9  0832               	movf	??_main+1,w
  3437  00AA  00A1               	movwf	bitExtracted@p
  3438  00AB  083D               	movf	main@minute,w
  3439  00AC  3186  26B5  3180   	fcall	_bitExtracted
  3440  00AF  0020               	movlb	0	; select bank0
  3441  00B0  00B3               	movwf	??_main+2
  3442  00B1  0833               	movf	??_main+2,w
  3443  00B2  00B8               	movwf	main@dizaineM
  3444                           
  3445                           ;main.c: 330: uniteH = bitExtracted(heure, 4, 1);
  3446  00B3  3004               	movlw	4
  3447  00B4  00B1               	movwf	??_main
  3448  00B5  0831               	movf	??_main,w
  3449  00B6  00A0               	movwf	bitExtracted@k
  3450  00B7  01A1               	clrf	bitExtracted@p
  3451  00B8  0AA1               	incf	bitExtracted@p,f
  3452  00B9  083E               	movf	main@heure,w
  3453  00BA  3186  26B5  3180   	fcall	_bitExtracted
  3454  00BD  0020               	movlb	0	; select bank0
  3455  00BE  00B2               	movwf	??_main+1
  3456  00BF  0832               	movf	??_main+1,w
  3457  00C0  00B9               	movwf	main@uniteH
  3458                           
  3459                           ;main.c: 331: dizaineH = bitExtracted(heure, 2, 5);
  3460  00C1  3002               	movlw	2
  3461  00C2  00B1               	movwf	??_main
  3462  00C3  0831               	movf	??_main,w
  3463  00C4  00A0               	movwf	bitExtracted@k
  3464  00C5  3005               	movlw	5
  3465  00C6  00B2               	movwf	??_main+1
  3466  00C7  0832               	movf	??_main+1,w
  3467  00C8  00A1               	movwf	bitExtracted@p
  3468  00C9  083E               	movf	main@heure,w
  3469  00CA  3186  26B5  3180   	fcall	_bitExtracted
  3470  00CD  0020               	movlb	0	; select bank0
  3471  00CE  00B3               	movwf	??_main+2
  3472  00CF  0833               	movf	??_main+2,w
  3473  00D0  00BA               	movwf	main@dizaineH
  3474                           
  3475                           ;main.c: 333: buffer = convertFromBcd(second);
  3476  00D1  083F               	movf	main@second,w
  3477  00D2  3186  267F  3180   	fcall	_convertFromBcd
  3478  00D5  0020               	movlb	0	; select bank0
  3479  00D6  00B1               	movwf	??_main
  3480  00D7  0831               	movf	??_main,w
  3481  00D8  00B4               	movwf	main@buffer
  3482                           
  3483                           ;main.c: 334: buffer = convertFromBcd(minute);
  3484  00D9  083D               	movf	main@minute,w
  3485  00DA  3186  267F  3180   	fcall	_convertFromBcd
  3486  00DD  0020               	movlb	0	; select bank0
  3487  00DE  00B1               	movwf	??_main
  3488  00DF  0831               	movf	??_main,w
  3489  00E0  00B4               	movwf	main@buffer
  3490                           
  3491                           ;main.c: 335: buffer = convertFromBcd(heure);
  3492  00E1  083E               	movf	main@heure,w
  3493  00E2  3186  267F  3180   	fcall	_convertFromBcd
  3494  00E5  0020               	movlb	0	; select bank0
  3495  00E6  00B1               	movwf	??_main
  3496  00E7  0831               	movf	??_main,w
  3497  00E8  00B4               	movwf	main@buffer
  3498                           
  3499                           ;main.c: 336: if (menu == 0)
  3500  00E9  083B               	movf	main@menu,w
  3501  00EA  1D03               	btfss	3,2
  3502  00EB  2950               	goto	l2974
  3503                           
  3504                           ;main.c: 337: {
  3505                           ;main.c: 338: writeData(FSM(dizaineS), 6, 1);
  3506  00EC  3006               	movlw	6
  3507  00ED  00B1               	movwf	??_main
  3508  00EE  0831               	movf	??_main,w
  3509  00EF  00A3               	movwf	writeData@adress
  3510  00F0  01A4               	clrf	writeData@ligne
  3511  00F1  0AA4               	incf	writeData@ligne,f
  3512  00F2  0836               	movf	main@dizaineS,w
  3513  00F3  3186  2621  3180   	fcall	_FSM
  3514  00F6  3184  245A  3180   	fcall	_writeData
  3515                           
  3516                           ;main.c: 339: writeData(FSM(uniteS), 7, 1);
  3517  00F9  3007               	movlw	7
  3518  00FA  0020               	movlb	0	; select bank0
  3519  00FB  00B1               	movwf	??_main
  3520  00FC  0831               	movf	??_main,w
  3521  00FD  00A3               	movwf	writeData@adress
  3522  00FE  01A4               	clrf	writeData@ligne
  3523  00FF  0AA4               	incf	writeData@ligne,f
  3524  0100  0835               	movf	main@uniteS,w
  3525  0101  3186  2621  3180   	fcall	_FSM
  3526  0104  3184  245A  3180   	fcall	_writeData
  3527                           
  3528                           ;main.c: 340: writeData(FSM(dizaineM), 3, 1);
  3529  0107  3003               	movlw	3
  3530  0108  0020               	movlb	0	; select bank0
  3531  0109  00B1               	movwf	??_main
  3532  010A  0831               	movf	??_main,w
  3533  010B  00A3               	movwf	writeData@adress
  3534  010C  01A4               	clrf	writeData@ligne
  3535  010D  0AA4               	incf	writeData@ligne,f
  3536  010E  0838               	movf	main@dizaineM,w
  3537  010F  3186  2621  3180   	fcall	_FSM
  3538  0112  3184  245A  3180   	fcall	_writeData
  3539                           
  3540                           ;main.c: 341: writeData(FSM(uniteM), 4, 1);
  3541  0115  3004               	movlw	4
  3542  0116  0020               	movlb	0	; select bank0
  3543  0117  00B1               	movwf	??_main
  3544  0118  0831               	movf	??_main,w
  3545  0119  00A3               	movwf	writeData@adress
  3546  011A  01A4               	clrf	writeData@ligne
  3547  011B  0AA4               	incf	writeData@ligne,f
  3548  011C  0837               	movf	main@uniteM,w
  3549  011D  3186  2621  3180   	fcall	_FSM
  3550  0120  3184  245A  3180   	fcall	_writeData
  3551                           
  3552                           ;main.c: 342: writeData(FSM(dizaineH), 0, 1);
  3553  0123  0020               	movlb	0	; select bank0
  3554  0124  01A3               	clrf	writeData@adress
  3555  0125  01A4               	clrf	writeData@ligne
  3556  0126  0AA4               	incf	writeData@ligne,f
  3557  0127  083A               	movf	main@dizaineH,w
  3558  0128  3186  2621  3180   	fcall	_FSM
  3559  012B  3184  245A  3180   	fcall	_writeData
  3560                           
  3561                           ;main.c: 343: writeData(FSM(uniteH), 1, 1);
  3562  012E  0020               	movlb	0	; select bank0
  3563  012F  01A3               	clrf	writeData@adress
  3564  0130  0AA3               	incf	writeData@adress,f
  3565  0131  01A4               	clrf	writeData@ligne
  3566  0132  0AA4               	incf	writeData@ligne,f
  3567  0133  0839               	movf	main@uniteH,w
  3568  0134  3186  2621  3180   	fcall	_FSM
  3569  0137  3184  245A  3180   	fcall	_writeData
  3570                           
  3571                           ;main.c: 344: writeData(':', 2, 1);
  3572  013A  3002               	movlw	2
  3573  013B  0020               	movlb	0	; select bank0
  3574  013C  00B1               	movwf	??_main
  3575  013D  0831               	movf	??_main,w
  3576  013E  00A3               	movwf	writeData@adress
  3577  013F  01A4               	clrf	writeData@ligne
  3578  0140  0AA4               	incf	writeData@ligne,f
  3579  0141  303A               	movlw	58
  3580  0142  3184  245A  3180   	fcall	_writeData
  3581                           
  3582                           ;main.c: 345: writeData(':', 5, 1);
  3583  0145  3005               	movlw	5
  3584  0146  0020               	movlb	0	; select bank0
  3585  0147  00B1               	movwf	??_main
  3586  0148  0831               	movf	??_main,w
  3587  0149  00A3               	movwf	writeData@adress
  3588  014A  01A4               	clrf	writeData@ligne
  3589  014B  0AA4               	incf	writeData@ligne,f
  3590  014C  303A               	movlw	58
  3591  014D  3184  245A  3180   	fcall	_writeData
  3592  0150                     l2974:	
  3593                           
  3594                           ;main.c: 346: }
  3595                           ;main.c: 347: if (PORTCbits.RC5 == 1)
  3596  0150  0020               	movlb	0	; select bank0
  3597  0151  1E8E               	btfss	14,5	;volatile
  3598  0152  2957               	goto	l2978
  3599                           
  3600                           ;main.c: 348: {
  3601                           ;main.c: 349: menu = 1;
  3602  0153  01BB               	clrf	main@menu
  3603  0154  0ABB               	incf	main@menu,f
  3604  0155                     l488:	
  3605                           ;main.c: 350: while(PORTCbits.RC5==1);
  3606                           
  3607  0155  1A8E               	btfsc	14,5	;volatile
  3608  0156  2955               	goto	l488
  3609  0157                     l2978:	
  3610                           
  3611                           ;main.c: 351: }
  3612                           ;main.c: 352: if (menu == 1)
  3613  0157  033B               	decf	main@menu,w
  3614  0158  1D03               	btfss	3,2
  3615  0159  285D               	goto	l2940
  3616                           
  3617                           ;main.c: 353: {
  3618                           ;main.c: 354: _delay((unsigned long)((100)*(16000000/4000.0)));
  3619  015A  3003               	movlw	3
  3620  015B  0020               	movlb	0	; select bank0
  3621  015C  00B2               	movwf	??_main+1
  3622  015D  3008               	movlw	8
  3623  015E  00B1               	movwf	??_main
  3624  015F  3077               	movlw	119
  3625  0160                     u2317:	
  3626  0160  0B89               	decfsz	9,f
  3627  0161  2960               	goto	u2317
  3628  0162  0BB1               	decfsz	??_main,f
  3629  0163  2960               	goto	u2317
  3630  0164  0BB2               	decfsz	??_main+1,f
  3631  0165  2960               	goto	u2317
  3632                           
  3633                           ;main.c: 355: if(PORTCbits.RC5==1)
  3634  0166  0020               	movlb	0	; select bank0
  3635  0167  1E8E               	btfss	14,5	;volatile
  3636  0168  2981               	goto	l492
  3637                           
  3638                           ;main.c: 356: {
  3639                           ;main.c: 357: ++select;
  3640  0169  3001               	movlw	1
  3641  016A  00B1               	movwf	??_main
  3642  016B  0831               	movf	??_main,w
  3643  016C  07BC               	addwf	main@select,f
  3644                           
  3645                           ;main.c: 358: if(select==1)
  3646  016D  033C               	decf	main@select,w
  3647  016E  1D03               	btfss	3,2
  3648  016F  2973               	goto	l2988
  3649                           
  3650                           ;main.c: 359: {
  3651                           ;main.c: 360: printReglageH();
  3652  0170  3182  22C1  3180   	fcall	_printReglageH
  3653  0173                     l2988:	
  3654                           
  3655                           ;main.c: 361: }
  3656                           ;main.c: 362: if(select==2)
  3657  0173  3002               	movlw	2
  3658  0174  0020               	movlb	0	; select bank0
  3659  0175  063C               	xorwf	main@select,w
  3660  0176  1D03               	btfss	3,2
  3661  0177  297F               	goto	l495
  3662                           
  3663                           ;main.c: 363: {
  3664                           ;main.c: 364: writeInst(0b00000001);
  3665  0178  3001               	movlw	1
  3666  0179  3185  253B  3180   	fcall	_writeInst
  3667                           
  3668                           ;main.c: 365: menu=0;
  3669  017C  0020               	movlb	0	; select bank0
  3670  017D  01BB               	clrf	main@menu
  3671                           
  3672                           ;main.c: 366: select=0;
  3673  017E  01BC               	clrf	main@select
  3674  017F                     l495:	
  3675                           ;main.c: 367: }
  3676                           ;main.c: 368: while(PORTCbits.RC5==1);
  3677                           
  3678  017F  1A8E               	btfsc	14,5	;volatile
  3679  0180  297F               	goto	l495
  3680  0181                     l492:	
  3681                           
  3682                           ;main.c: 369: }
  3683                           ;main.c: 370: if (PORTCbits.RC4 == 1)
  3684  0181  1E0E               	btfss	14,4	;volatile
  3685  0182  2989               	goto	l3000
  3686                           
  3687                           ;main.c: 371: {
  3688                           ;main.c: 372: incrMin();
  3689  0183  3184  2402  3180   	fcall	_incrMin
  3690                           
  3691                           ;main.c: 373: printReglageH();
  3692  0186  3182  22C1  3180   	fcall	_printReglageH
  3693  0189                     l3000:	
  3694                           
  3695                           ;main.c: 376: }
  3696                           ;main.c: 377: if (PORTCbits.RC3==1)
  3697  0189  0020               	movlb	0	; select bank0
  3698  018A  1D8E               	btfss	14,3	;volatile
  3699  018B  285D               	goto	l2940
  3700                           
  3701                           ;main.c: 378: {
  3702                           ;main.c: 379: incrHeure();
  3703  018C  3183  23A2  3180   	fcall	_incrHeure
  3704                           
  3705                           ;main.c: 380: printReglageH();
  3706  018F  3182  22C1  3180   	fcall	_printReglageH
  3707  0192  285D               	goto	l2940
  3708  0193                     __end_of_main:	
  3709                           
  3710                           	psect	text1
  3711  0574                     __ptext1:	
  3712 ;; *************** function _readSec *****************
  3713 ;; Defined at:
  3714 ;;		line 164 in file "main.c"
  3715 ;; Parameters:    Size  Location     Type
  3716 ;;		None
  3717 ;; Auto vars:     Size  Location     Type
  3718 ;;  second          1    3[BANK0 ] unsigned char 
  3719 ;; Return value:  Size  Location     Type
  3720 ;;                  1    wreg      unsigned char 
  3721 ;; Registers used:
  3722 ;;		wreg, status,2, status,0, pclath, cstack
  3723 ;; Tracked objects:
  3724 ;;		On entry : 0/0
  3725 ;;		On exit  : 0/0
  3726 ;;		Unchanged: 0/0
  3727 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3728 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3729 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3730 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3731 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3732 ;;Total ram usage:        2 bytes
  3733 ;; Hardware stack levels used:    1
  3734 ;; Hardware stack levels required when called:    5
  3735 ;; This function calls:
  3736 ;;		_re_startI2C
  3737 ;;		_readI2C
  3738 ;;		_sendI2C
  3739 ;;		_sendNoAckI2C
  3740 ;;		_startI2C
  3741 ;;		_stopI2C
  3742 ;; This function is called by:
  3743 ;;		_main
  3744 ;; This function uses a non-reentrant model
  3745 ;;
  3746                           
  3747                           
  3748                           ;psect for function _readSec
  3749  0574                     _readSec:	
  3750                           
  3751                           ;main.c: 165: uint8_t second = 0;
  3752                           
  3753                           ;incstack = 0
  3754                           ; Regs used in _readSec: [wreg+status,2+status,0+pclath+cstack]
  3755  0574  0020               	movlb	0	; select bank0
  3756  0575  01A3               	clrf	readSec@second
  3757                           
  3758                           ;main.c: 166: startI2C();
  3759  0576  3187  2731  3185   	fcall	_startI2C
  3760                           
  3761                           ;main.c: 167: sendI2C(0b11011110);
  3762  0579  30DE               	movlw	222
  3763  057A  3187  2723  3185   	fcall	_sendI2C
  3764  057D                     l434:	
  3765                           ;main.c: 168: while (SSP1CON2bits.ACKSTAT == 1);
  3766                           
  3767  057D  0024               	movlb	4	; select bank4
  3768  057E  1B16               	btfsc	22,6	;volatile
  3769  057F  2D7D               	goto	l434
  3770                           
  3771                           ;main.c: 169: sendI2C(0x00);
  3772  0580  3000               	movlw	0
  3773  0581  3187  2723  3185   	fcall	_sendI2C
  3774  0584                     l437:	
  3775                           ;main.c: 170: while (SSP1CON2bits.ACKSTAT == 1);
  3776                           
  3777  0584  0024               	movlb	4	; select bank4
  3778  0585  1B16               	btfsc	22,6	;volatile
  3779  0586  2D84               	goto	l437
  3780                           
  3781                           ;main.c: 171: re_startI2C();
  3782  0587  3187  273A  3185   	fcall	_re_startI2C
  3783                           
  3784                           ;main.c: 172: sendI2C(0b11011111);
  3785  058A  30DF               	movlw	223
  3786  058B  3187  2723  3185   	fcall	_sendI2C
  3787  058E                     l440:	
  3788                           ;main.c: 173: while (SSP1CON2bits.ACKSTAT == 1);
  3789                           
  3790  058E  0024               	movlb	4	; select bank4
  3791  058F  1B16               	btfsc	22,6	;volatile
  3792  0590  2D8E               	goto	l440
  3793                           
  3794                           ;main.c: 174: second = readI2C();
  3795  0591  3186  26DF  3185   	fcall	_readI2C
  3796  0594  0020               	movlb	0	; select bank0
  3797  0595  00A2               	movwf	??_readSec
  3798  0596  0822               	movf	??_readSec,w
  3799  0597  00A3               	movwf	readSec@second
  3800                           
  3801                           ;main.c: 175: sendNoAckI2C();
  3802  0598  3187  275F  3185   	fcall	_sendNoAckI2C
  3803                           
  3804                           ;main.c: 176: stopI2C();
  3805  059B  3187  2742         	fcall	_stopI2C
  3806                           
  3807                           ;main.c: 177: return second;
  3808  059D  0020               	movlb	0	; select bank0
  3809  059E  0823               	movf	readSec@second,w
  3810  059F  0008               	return
  3811  05A0                     __end_of_readSec:	
  3812                           
  3813                           	psect	text2
  3814  02C1                     __ptext2:	
  3815 ;; *************** function _printReglageH *****************
  3816 ;; Defined at:
  3817 ;;		line 212 in file "main.c"
  3818 ;; Parameters:    Size  Location     Type
  3819 ;;		None
  3820 ;; Auto vars:     Size  Location     Type
  3821 ;;  heure           1   16[BANK0 ] unsigned char 
  3822 ;;  minute          1   15[BANK0 ] unsigned char 
  3823 ;;  uniteH          1   14[BANK0 ] unsigned char 
  3824 ;;  dizaineH        1   13[BANK0 ] unsigned char 
  3825 ;;  uniteM          1   12[BANK0 ] unsigned char 
  3826 ;;  dizaineM        1   11[BANK0 ] unsigned char 
  3827 ;; Return value:  Size  Location     Type
  3828 ;;                  1    wreg      void 
  3829 ;; Registers used:
  3830 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3831 ;; Tracked objects:
  3832 ;;		On entry : 0/0
  3833 ;;		On exit  : 0/0
  3834 ;;		Unchanged: 0/0
  3835 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3836 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3837 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3838 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3839 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3840 ;;Total ram usage:        9 bytes
  3841 ;; Hardware stack levels used:    1
  3842 ;; Hardware stack levels required when called:    7
  3843 ;; This function calls:
  3844 ;;		_FSM
  3845 ;;		_bitExtracted
  3846 ;;		_readHr
  3847 ;;		_readMin
  3848 ;;		_writeData
  3849 ;;		_writeInst
  3850 ;; This function is called by:
  3851 ;;		_main
  3852 ;; This function uses a non-reentrant model
  3853 ;;
  3854                           
  3855                           
  3856                           ;psect for function _printReglageH
  3857  02C1                     _printReglageH:	
  3858                           
  3859                           ;main.c: 214: uint8_t minute=0;
  3860                           
  3861                           ;incstack = 0
  3862                           ; Regs used in _printReglageH: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3863  02C1  0020               	movlb	0	; select bank0
  3864  02C2  01AF               	clrf	printReglageH@minute
  3865                           
  3866                           ;main.c: 215: uint8_t heure=0;
  3867  02C3  01B0               	clrf	printReglageH@heure
  3868                           
  3869                           ;main.c: 216: uint8_t dizaineM=0;
  3870  02C4  01AB               	clrf	printReglageH@dizaineM
  3871                           
  3872                           ;main.c: 217: uint8_t uniteM=0;
  3873  02C5  01AC               	clrf	printReglageH@uniteM
  3874                           
  3875                           ;main.c: 218: uint8_t dizaineH=0;
  3876  02C6  01AD               	clrf	printReglageH@dizaineH
  3877                           
  3878                           ;main.c: 219: uint8_t uniteH=0;
  3879  02C7  01AE               	clrf	printReglageH@uniteH
  3880                           
  3881                           ;main.c: 220: writeInst(0b00000001);
  3882  02C8  3001               	movlw	1
  3883  02C9  3185  253B  3182   	fcall	_writeInst
  3884                           
  3885                           ;main.c: 221: writeData('R', 1, 1);
  3886  02CC  0020               	movlb	0	; select bank0
  3887  02CD  01A3               	clrf	writeData@adress
  3888  02CE  0AA3               	incf	writeData@adress,f
  3889  02CF  01A4               	clrf	writeData@ligne
  3890  02D0  0AA4               	incf	writeData@ligne,f
  3891  02D1  3052               	movlw	82
  3892  02D2  3184  245A  3182   	fcall	_writeData
  3893                           
  3894                           ;main.c: 222: writeData('E', 2, 1);
  3895  02D5  3002               	movlw	2
  3896  02D6  0020               	movlb	0	; select bank0
  3897  02D7  00A8               	movwf	??_printReglageH
  3898  02D8  0828               	movf	??_printReglageH,w
  3899  02D9  00A3               	movwf	writeData@adress
  3900  02DA  01A4               	clrf	writeData@ligne
  3901  02DB  0AA4               	incf	writeData@ligne,f
  3902  02DC  3045               	movlw	69
  3903  02DD  3184  245A  3182   	fcall	_writeData
  3904                           
  3905                           ;main.c: 223: writeData('G', 3, 1);
  3906  02E0  3003               	movlw	3
  3907  02E1  0020               	movlb	0	; select bank0
  3908  02E2  00A8               	movwf	??_printReglageH
  3909  02E3  0828               	movf	??_printReglageH,w
  3910  02E4  00A3               	movwf	writeData@adress
  3911  02E5  01A4               	clrf	writeData@ligne
  3912  02E6  0AA4               	incf	writeData@ligne,f
  3913  02E7  3047               	movlw	71
  3914  02E8  3184  245A  3182   	fcall	_writeData
  3915                           
  3916                           ;main.c: 224: writeData(' ', 4, 1);
  3917  02EB  3004               	movlw	4
  3918  02EC  0020               	movlb	0	; select bank0
  3919  02ED  00A8               	movwf	??_printReglageH
  3920  02EE  0828               	movf	??_printReglageH,w
  3921  02EF  00A3               	movwf	writeData@adress
  3922  02F0  01A4               	clrf	writeData@ligne
  3923  02F1  0AA4               	incf	writeData@ligne,f
  3924  02F2  3020               	movlw	32
  3925  02F3  3184  245A  3182   	fcall	_writeData
  3926                           
  3927                           ;main.c: 225: writeData('H', 5, 1);
  3928  02F6  3005               	movlw	5
  3929  02F7  0020               	movlb	0	; select bank0
  3930  02F8  00A8               	movwf	??_printReglageH
  3931  02F9  0828               	movf	??_printReglageH,w
  3932  02FA  00A3               	movwf	writeData@adress
  3933  02FB  01A4               	clrf	writeData@ligne
  3934  02FC  0AA4               	incf	writeData@ligne,f
  3935  02FD  3048               	movlw	72
  3936  02FE  3184  245A  3182   	fcall	_writeData
  3937                           
  3938                           ;main.c: 226: writeData('R', 6, 1);
  3939  0301  3006               	movlw	6
  3940  0302  0020               	movlb	0	; select bank0
  3941  0303  00A8               	movwf	??_printReglageH
  3942  0304  0828               	movf	??_printReglageH,w
  3943  0305  00A3               	movwf	writeData@adress
  3944  0306  01A4               	clrf	writeData@ligne
  3945  0307  0AA4               	incf	writeData@ligne,f
  3946  0308  3052               	movlw	82
  3947  0309  3184  245A  3182   	fcall	_writeData
  3948                           
  3949                           ;main.c: 227: minute = readMin();
  3950  030C  3185  25A0  3182   	fcall	_readMin
  3951  030F  0020               	movlb	0	; select bank0
  3952  0310  00A8               	movwf	??_printReglageH
  3953  0311  0828               	movf	??_printReglageH,w
  3954  0312  00AF               	movwf	printReglageH@minute
  3955                           
  3956                           ;main.c: 228: heure = readHr();
  3957  0313  3185  25CC  3182   	fcall	_readHr
  3958  0316  0020               	movlb	0	; select bank0
  3959  0317  00A8               	movwf	??_printReglageH
  3960  0318  0828               	movf	??_printReglageH,w
  3961  0319  00B0               	movwf	printReglageH@heure
  3962                           
  3963                           ;main.c: 229: uniteM = bitExtracted(minute, 4, 1);
  3964  031A  3004               	movlw	4
  3965  031B  00A8               	movwf	??_printReglageH
  3966  031C  0828               	movf	??_printReglageH,w
  3967  031D  00A0               	movwf	bitExtracted@k
  3968  031E  01A1               	clrf	bitExtracted@p
  3969  031F  0AA1               	incf	bitExtracted@p,f
  3970  0320  082F               	movf	printReglageH@minute,w
  3971  0321  3186  26B5  3182   	fcall	_bitExtracted
  3972  0324  0020               	movlb	0	; select bank0
  3973  0325  00A9               	movwf	??_printReglageH+1
  3974  0326  0829               	movf	??_printReglageH+1,w
  3975  0327  00AC               	movwf	printReglageH@uniteM
  3976                           
  3977                           ;main.c: 230: dizaineM = bitExtracted(minute, 3, 5);
  3978  0328  3003               	movlw	3
  3979  0329  00A8               	movwf	??_printReglageH
  3980  032A  0828               	movf	??_printReglageH,w
  3981  032B  00A0               	movwf	bitExtracted@k
  3982  032C  3005               	movlw	5
  3983  032D  00A9               	movwf	??_printReglageH+1
  3984  032E  0829               	movf	??_printReglageH+1,w
  3985  032F  00A1               	movwf	bitExtracted@p
  3986  0330  082F               	movf	printReglageH@minute,w
  3987  0331  3186  26B5  3182   	fcall	_bitExtracted
  3988  0334  0020               	movlb	0	; select bank0
  3989  0335  00AA               	movwf	??_printReglageH+2
  3990  0336  082A               	movf	??_printReglageH+2,w
  3991  0337  00AB               	movwf	printReglageH@dizaineM
  3992                           
  3993                           ;main.c: 231: uniteH = bitExtracted(heure, 4, 1);
  3994  0338  3004               	movlw	4
  3995  0339  00A8               	movwf	??_printReglageH
  3996  033A  0828               	movf	??_printReglageH,w
  3997  033B  00A0               	movwf	bitExtracted@k
  3998  033C  01A1               	clrf	bitExtracted@p
  3999  033D  0AA1               	incf	bitExtracted@p,f
  4000  033E  0830               	movf	printReglageH@heure,w
  4001  033F  3186  26B5  3182   	fcall	_bitExtracted
  4002  0342  0020               	movlb	0	; select bank0
  4003  0343  00A9               	movwf	??_printReglageH+1
  4004  0344  0829               	movf	??_printReglageH+1,w
  4005  0345  00AE               	movwf	printReglageH@uniteH
  4006                           
  4007                           ;main.c: 232: dizaineH = bitExtracted(heure, 2, 5);
  4008  0346  3002               	movlw	2
  4009  0347  00A8               	movwf	??_printReglageH
  4010  0348  0828               	movf	??_printReglageH,w
  4011  0349  00A0               	movwf	bitExtracted@k
  4012  034A  3005               	movlw	5
  4013  034B  00A9               	movwf	??_printReglageH+1
  4014  034C  0829               	movf	??_printReglageH+1,w
  4015  034D  00A1               	movwf	bitExtracted@p
  4016  034E  0830               	movf	printReglageH@heure,w
  4017  034F  3186  26B5  3182   	fcall	_bitExtracted
  4018  0352  0020               	movlb	0	; select bank0
  4019  0353  00AA               	movwf	??_printReglageH+2
  4020  0354  082A               	movf	??_printReglageH+2,w
  4021  0355  00AD               	movwf	printReglageH@dizaineH
  4022                           
  4023                           ;main.c: 233: writeData(FSM(dizaineM), 5, 2);
  4024  0356  3005               	movlw	5
  4025  0357  00A8               	movwf	??_printReglageH
  4026  0358  0828               	movf	??_printReglageH,w
  4027  0359  00A3               	movwf	writeData@adress
  4028  035A  3002               	movlw	2
  4029  035B  00A9               	movwf	??_printReglageH+1
  4030  035C  0829               	movf	??_printReglageH+1,w
  4031  035D  00A4               	movwf	writeData@ligne
  4032  035E  082B               	movf	printReglageH@dizaineM,w
  4033  035F  3186  2621  3182   	fcall	_FSM
  4034  0362  3184  245A  3182   	fcall	_writeData
  4035                           
  4036                           ;main.c: 234: writeData(FSM(uniteM), 6, 2);
  4037  0365  3006               	movlw	6
  4038  0366  0020               	movlb	0	; select bank0
  4039  0367  00A8               	movwf	??_printReglageH
  4040  0368  0828               	movf	??_printReglageH,w
  4041  0369  00A3               	movwf	writeData@adress
  4042  036A  3002               	movlw	2
  4043  036B  00A9               	movwf	??_printReglageH+1
  4044  036C  0829               	movf	??_printReglageH+1,w
  4045  036D  00A4               	movwf	writeData@ligne
  4046  036E  082C               	movf	printReglageH@uniteM,w
  4047  036F  3186  2621  3182   	fcall	_FSM
  4048  0372  3184  245A  3182   	fcall	_writeData
  4049                           
  4050                           ;main.c: 235: writeData(FSM(dizaineH), 2, 2);
  4051  0375  3002               	movlw	2
  4052  0376  0020               	movlb	0	; select bank0
  4053  0377  00A8               	movwf	??_printReglageH
  4054  0378  0828               	movf	??_printReglageH,w
  4055  0379  00A3               	movwf	writeData@adress
  4056  037A  3002               	movlw	2
  4057  037B  00A9               	movwf	??_printReglageH+1
  4058  037C  0829               	movf	??_printReglageH+1,w
  4059  037D  00A4               	movwf	writeData@ligne
  4060  037E  082D               	movf	printReglageH@dizaineH,w
  4061  037F  3186  2621  3182   	fcall	_FSM
  4062  0382  3184  245A  3182   	fcall	_writeData
  4063                           
  4064                           ;main.c: 236: writeData(FSM(uniteH), 3, 2);
  4065  0385  3003               	movlw	3
  4066  0386  0020               	movlb	0	; select bank0
  4067  0387  00A8               	movwf	??_printReglageH
  4068  0388  0828               	movf	??_printReglageH,w
  4069  0389  00A3               	movwf	writeData@adress
  4070  038A  3002               	movlw	2
  4071  038B  00A9               	movwf	??_printReglageH+1
  4072  038C  0829               	movf	??_printReglageH+1,w
  4073  038D  00A4               	movwf	writeData@ligne
  4074  038E  082E               	movf	printReglageH@uniteH,w
  4075  038F  3186  2621  3182   	fcall	_FSM
  4076  0392  3184  245A  3182   	fcall	_writeData
  4077                           
  4078                           ;main.c: 237: writeData(':', 4, 2);
  4079  0395  3004               	movlw	4
  4080  0396  0020               	movlb	0	; select bank0
  4081  0397  00A8               	movwf	??_printReglageH
  4082  0398  0828               	movf	??_printReglageH,w
  4083  0399  00A3               	movwf	writeData@adress
  4084  039A  3002               	movlw	2
  4085  039B  00A9               	movwf	??_printReglageH+1
  4086  039C  0829               	movf	??_printReglageH+1,w
  4087  039D  00A4               	movwf	writeData@ligne
  4088  039E  303A               	movlw	58
  4089  039F  3184  245A         	fcall	_writeData
  4090  03A1  0008               	return
  4091  03A2                     __end_of_printReglageH:	
  4092                           
  4093                           	psect	text3
  4094  045A                     __ptext3:	
  4095 ;; *************** function _writeData *****************
  4096 ;; Defined at:
  4097 ;;		line 20 in file "main.c"
  4098 ;; Parameters:    Size  Location     Type
  4099 ;;  data            1    wreg     unsigned char 
  4100 ;;  adress          1    3[BANK0 ] unsigned char 
  4101 ;;  ligne           1    4[BANK0 ] unsigned char 
  4102 ;; Auto vars:     Size  Location     Type
  4103 ;;  data            1    6[BANK0 ] unsigned char 
  4104 ;;  i               1    7[BANK0 ] unsigned char 
  4105 ;; Return value:  Size  Location     Type
  4106 ;;                  1    wreg      void 
  4107 ;; Registers used:
  4108 ;;		wreg, status,2, status,0, pclath, cstack
  4109 ;; Tracked objects:
  4110 ;;		On entry : 0/0
  4111 ;;		On exit  : 0/0
  4112 ;;		Unchanged: 0/0
  4113 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4114 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4115 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4116 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4117 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4118 ;;Total ram usage:        5 bytes
  4119 ;; Hardware stack levels used:    1
  4120 ;; Hardware stack levels required when called:    6
  4121 ;; This function calls:
  4122 ;;		_sendI2C
  4123 ;;		_startI2C
  4124 ;;		_stopI2C
  4125 ;;		_writeInst
  4126 ;; This function is called by:
  4127 ;;		_printReglageH
  4128 ;;		_main
  4129 ;; This function uses a non-reentrant model
  4130 ;;
  4131                           
  4132                           
  4133                           ;psect for function _writeData
  4134  045A                     _writeData:	
  4135                           
  4136                           ;incstack = 0
  4137                           ; Regs used in _writeData: [wreg+status,2+status,0+pclath+cstack]
  4138                           ;writeData@data stored from wreg
  4139  045A  0020               	movlb	0	; select bank0
  4140  045B  00A6               	movwf	writeData@data
  4141                           
  4142                           ;main.c: 21: if (ligne == 2) {
  4143  045C  3002               	movlw	2
  4144  045D  0624               	xorwf	writeData@ligne,w
  4145  045E  1D03               	btfss	3,2
  4146  045F  2C64               	goto	l2562
  4147                           
  4148                           ;main.c: 22: adress += 40;
  4149  0460  3028               	movlw	40
  4150  0461  00A5               	movwf	??_writeData
  4151  0462  0825               	movf	??_writeData,w
  4152  0463  07A3               	addwf	writeData@adress,f
  4153  0464                     l2562:	
  4154                           
  4155                           ;main.c: 23: }
  4156                           ;main.c: 24: for (uint8_t i = 0; i < adress; i++) {
  4157  0464  01A7               	clrf	writeData@i
  4158  0465                     l2568:	
  4159  0465  0823               	movf	writeData@adress,w
  4160  0466  0227               	subwf	writeData@i,w
  4161  0467  1803               	btfsc	3,0
  4162  0468  2C73               	goto	l2570
  4163                           
  4164                           ;main.c: 25: writeInst(0b00010100);
  4165  0469  3014               	movlw	20
  4166  046A  3185  253B  3184   	fcall	_writeInst
  4167  046D  3001               	movlw	1
  4168  046E  0020               	movlb	0	; select bank0
  4169  046F  00A5               	movwf	??_writeData
  4170  0470  0825               	movf	??_writeData,w
  4171  0471  07A7               	addwf	writeData@i,f
  4172  0472  2C65               	goto	l2568
  4173  0473                     l2570:	
  4174                           
  4175                           ;main.c: 26: }
  4176                           ;main.c: 28: startI2C();
  4177  0473  3187  2731  3184   	fcall	_startI2C
  4178                           
  4179                           ;main.c: 29: _delay((unsigned long)((1)*(16000000/4000.0)));
  4180  0476  3006               	movlw	6
  4181  0477  0020               	movlb	0	; select bank0
  4182  0478  00A5               	movwf	??_writeData
  4183  0479  3030               	movlw	48
  4184  047A                     u2327:	
  4185  047A  0B89               	decfsz	9,f
  4186  047B  2C7A               	goto	u2327
  4187  047C  0BA5               	decfsz	??_writeData,f
  4188  047D  2C7A               	goto	u2327
  4189  047E  0000               	nop
  4190                           
  4191                           ;main.c: 30: sendI2C(0x78);
  4192  047F  3078               	movlw	120
  4193  0480  3187  2723  3184   	fcall	_sendI2C
  4194                           
  4195                           ;main.c: 32: _delay((unsigned long)((1)*(16000000/4000.0)));
  4196  0483  3006               	movlw	6
  4197  0484  0020               	movlb	0	; select bank0
  4198  0485  00A5               	movwf	??_writeData
  4199  0486  3030               	movlw	48
  4200  0487                     u2337:	
  4201  0487  0B89               	decfsz	9,f
  4202  0488  2C87               	goto	u2337
  4203  0489  0BA5               	decfsz	??_writeData,f
  4204  048A  2C87               	goto	u2337
  4205  048B  0000               	nop
  4206                           
  4207                           ;main.c: 33: sendI2C(0x40);
  4208  048C  3040               	movlw	64
  4209  048D  3187  2723  3184   	fcall	_sendI2C
  4210                           
  4211                           ;main.c: 35: _delay((unsigned long)((1)*(16000000/4000.0)));
  4212  0490  3006               	movlw	6
  4213  0491  0020               	movlb	0	; select bank0
  4214  0492  00A5               	movwf	??_writeData
  4215  0493  3030               	movlw	48
  4216  0494                     u2347:	
  4217  0494  0B89               	decfsz	9,f
  4218  0495  2C94               	goto	u2347
  4219  0496  0BA5               	decfsz	??_writeData,f
  4220  0497  2C94               	goto	u2347
  4221  0498  0000               	nop
  4222                           
  4223                           ;main.c: 36: sendI2C(data);
  4224  0499  0020               	movlb	0	; select bank0
  4225  049A  0826               	movf	writeData@data,w
  4226  049B  3187  2723  3184   	fcall	_sendI2C
  4227                           
  4228                           ;main.c: 38: _delay((unsigned long)((1)*(16000000/4000.0)));
  4229  049E  3006               	movlw	6
  4230  049F  0020               	movlb	0	; select bank0
  4231  04A0  00A5               	movwf	??_writeData
  4232  04A1  3030               	movlw	48
  4233  04A2                     u2357:	
  4234  04A2  0B89               	decfsz	9,f
  4235  04A3  2CA2               	goto	u2357
  4236  04A4  0BA5               	decfsz	??_writeData,f
  4237  04A5  2CA2               	goto	u2357
  4238  04A6  0000               	nop
  4239                           
  4240                           ;main.c: 39: stopI2C();
  4241  04A7  3187  2742  3184   	fcall	_stopI2C
  4242                           
  4243                           ;main.c: 40: writeInst(0b00000010);
  4244  04AA  3002               	movlw	2
  4245  04AB  3185  253B         	fcall	_writeInst
  4246  04AD  0008               	return
  4247  04AE                     __end_of_writeData:	
  4248                           
  4249                           	psect	text4
  4250  0621                     __ptext4:	
  4251 ;; *************** function _FSM *****************
  4252 ;; Defined at:
  4253 ;;		line 91 in file "main.c"
  4254 ;; Parameters:    Size  Location     Type
  4255 ;;  IN              1    wreg     unsigned char 
  4256 ;; Auto vars:     Size  Location     Type
  4257 ;;  IN              1    0[BANK0 ] unsigned char 
  4258 ;; Return value:  Size  Location     Type
  4259 ;;                  1    wreg      unsigned char 
  4260 ;; Registers used:
  4261 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  4262 ;; Tracked objects:
  4263 ;;		On entry : 0/0
  4264 ;;		On exit  : 0/0
  4265 ;;		Unchanged: 0/0
  4266 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4267 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4268 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4269 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4270 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4271 ;;Total ram usage:        1 bytes
  4272 ;; Hardware stack levels used:    1
  4273 ;; Hardware stack levels required when called:    3
  4274 ;; This function calls:
  4275 ;;		Nothing
  4276 ;; This function is called by:
  4277 ;;		_printReglageH
  4278 ;;		_main
  4279 ;; This function uses a non-reentrant model
  4280 ;;
  4281                           
  4282                           
  4283                           ;psect for function _FSM
  4284  0621                     _FSM:	
  4285                           
  4286                           ;incstack = 0
  4287                           ; Regs used in _FSM: [wreg-fsr0h+status,2+status,0]
  4288                           ;FSM@IN stored from wreg
  4289  0621  0020               	movlb	0	; select bank0
  4290  0622  00A0               	movwf	FSM@IN
  4291                           
  4292                           ;main.c: 92: switch (IN) {
  4293  0623  2E38               	goto	l2654
  4294  0624                     l2592:	
  4295                           ;main.c: 93: case 0:
  4296                           
  4297                           
  4298                           ;main.c: 94: return '0';
  4299  0624  3030               	movlw	48
  4300                           
  4301                           ;main.c: 95: break;
  4302  0625  0008               	return
  4303  0626                     l2598:	
  4304                           ;main.c: 97: case 1:
  4305                           
  4306                           
  4307                           ;main.c: 98: return '1';
  4308  0626  3031               	movlw	49
  4309                           
  4310                           ;main.c: 99: break;
  4311  0627  0008               	return
  4312  0628                     l2604:	
  4313                           ;main.c: 101: case 2:
  4314                           
  4315                           
  4316                           ;main.c: 102: return '2';
  4317  0628  3032               	movlw	50
  4318                           
  4319                           ;main.c: 103: break;
  4320  0629  0008               	return
  4321  062A                     l2610:	
  4322                           ;main.c: 105: case 3:
  4323                           
  4324                           
  4325                           ;main.c: 106: return '3';
  4326  062A  3033               	movlw	51
  4327                           
  4328                           ;main.c: 107: break;
  4329  062B  0008               	return
  4330  062C                     l2616:	
  4331                           ;main.c: 109: case 4:
  4332                           
  4333                           
  4334                           ;main.c: 110: return '4';
  4335  062C  3034               	movlw	52
  4336                           
  4337                           ;main.c: 111: break;
  4338  062D  0008               	return
  4339  062E                     l2622:	
  4340                           ;main.c: 113: case 5:
  4341                           
  4342                           
  4343                           ;main.c: 114: return '5';
  4344  062E  3035               	movlw	53
  4345                           
  4346                           ;main.c: 115: break;
  4347  062F  0008               	return
  4348  0630                     l2628:	
  4349                           ;main.c: 117: case 6:
  4350                           
  4351                           
  4352                           ;main.c: 118: return '6';
  4353  0630  3036               	movlw	54
  4354                           
  4355                           ;main.c: 119: break;
  4356  0631  0008               	return
  4357  0632                     l2634:	
  4358                           ;main.c: 121: case 7:
  4359                           
  4360                           
  4361                           ;main.c: 122: return '7';
  4362  0632  3037               	movlw	55
  4363                           
  4364                           ;main.c: 123: break;
  4365  0633  0008               	return
  4366  0634                     l2640:	
  4367                           ;main.c: 125: case 8:
  4368                           
  4369                           
  4370                           ;main.c: 126: return '8';
  4371  0634  3038               	movlw	56
  4372                           
  4373                           ;main.c: 127: break;
  4374  0635  0008               	return
  4375  0636                     l2646:	
  4376                           ;main.c: 129: case 9:
  4377                           
  4378                           
  4379                           ;main.c: 130: return '9';
  4380  0636  3039               	movlw	57
  4381                           
  4382                           ;main.c: 136: }
  4383                           
  4384                           ;main.c: 134: break;
  4385                           
  4386                           ;main.c: 133: default:
  4387                           
  4388                           ;main.c: 131: break;
  4389  0637  0008               	return
  4390  0638                     l2654:	
  4391  0638  0820               	movf	FSM@IN,w
  4392                           
  4393                           ; Switch size 1, requested type "space"
  4394                           ; Number of cases is 10, Range of values is 0 to 9
  4395                           ; switch strategies available:
  4396                           ; Name         Instructions Cycles
  4397                           ; direct_byte           26     6 (fixed)
  4398                           ; simple_byte           31    16 (average)
  4399                           ; jumptable            260     6 (fixed)
  4400                           ;	Chosen strategy is direct_byte
  4401  0639  0084               	movwf	4
  4402  063A  300A               	movlw	10
  4403  063B  0204               	subwf	4,w
  4404  063C  1803               	skipnc
  4405  063D  0008               	return
  4406  063E  3186               	movlp	high S3056
  4407  063F  3504               	lslf	4,w
  4408  0640  3ECB               	addlw	low S3056
  4409  0641  0082               	movwf	2
  4410  0642  0008               	return
  4411  0643                     __end_of_FSM:	
  4412                           
  4413                           	psect	swtext1
  4414  06CB                     __pswtext1:	
  4415  06CB                     S3056:	
  4416  06CB  3186  2E24         	ljmp	l2592
  4417  06CD  3186  2E26         	ljmp	l2598
  4418  06CF  3186  2E28         	ljmp	l2604
  4419  06D1  3186  2E2A         	ljmp	l2610
  4420  06D3  3186  2E2C         	ljmp	l2616
  4421  06D5  3186  2E2E         	ljmp	l2622
  4422  06D7  3186  2E30         	ljmp	l2628
  4423  06D9  3186  2E32         	ljmp	l2634
  4424  06DB  3186  2E34         	ljmp	l2640
  4425  06DD  3186  2E36         	ljmp	l2646
  4426                           
  4427                           	psect	text5
  4428  0703                     __ptext5:	
  4429 ;; *************** function _initRW1063 *****************
  4430 ;; Defined at:
  4431 ;;		line 43 in file "main.c"
  4432 ;; Parameters:    Size  Location     Type
  4433 ;;		None
  4434 ;; Auto vars:     Size  Location     Type
  4435 ;;		None
  4436 ;; Return value:  Size  Location     Type
  4437 ;;                  1    wreg      void 
  4438 ;; Registers used:
  4439 ;;		wreg, status,2, status,0, pclath, cstack
  4440 ;; Tracked objects:
  4441 ;;		On entry : 0/0
  4442 ;;		On exit  : 0/0
  4443 ;;		Unchanged: 0/0
  4444 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4445 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4446 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4447 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4448 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4449 ;;Total ram usage:        0 bytes
  4450 ;; Hardware stack levels used:    1
  4451 ;; Hardware stack levels required when called:    6
  4452 ;; This function calls:
  4453 ;;		_writeInst
  4454 ;; This function is called by:
  4455 ;;		_main
  4456 ;; This function uses a non-reentrant model
  4457 ;;
  4458                           
  4459                           
  4460                           ;psect for function _initRW1063
  4461  0703                     _initRW1063:	
  4462                           
  4463                           ;main.c: 44: writeInst(0x38);
  4464                           
  4465                           ;incstack = 0
  4466                           ; Regs used in _initRW1063: [wreg+status,2+status,0+pclath+cstack]
  4467  0703  3038               	movlw	56
  4468  0704  3185  253B  3187   	fcall	_writeInst
  4469                           
  4470                           ;main.c: 45: writeInst(0x0c);
  4471  0707  300C               	movlw	12
  4472  0708  3185  253B  3187   	fcall	_writeInst
  4473                           
  4474                           ;main.c: 46: writeInst(0x06);
  4475  070B  3006               	movlw	6
  4476  070C  3185  253B  3187   	fcall	_writeInst
  4477                           
  4478                           ;main.c: 47: writeInst(0b00001100);
  4479  070F  300C               	movlw	12
  4480  0710  3185  253B         	fcall	_writeInst
  4481  0712  0008               	return
  4482  0713                     __end_of_initRW1063:	
  4483                           
  4484                           	psect	text6
  4485  053B                     __ptext6:	
  4486 ;; *************** function _writeInst *****************
  4487 ;; Defined at:
  4488 ;;		line 5 in file "main.c"
  4489 ;; Parameters:    Size  Location     Type
  4490 ;;  Inst            1    wreg     unsigned char 
  4491 ;; Auto vars:     Size  Location     Type
  4492 ;;  Inst            1    2[BANK0 ] unsigned char 
  4493 ;; Return value:  Size  Location     Type
  4494 ;;                  1    wreg      void 
  4495 ;; Registers used:
  4496 ;;		wreg, status,2, status,0, pclath, cstack
  4497 ;; Tracked objects:
  4498 ;;		On entry : 0/0
  4499 ;;		On exit  : 0/0
  4500 ;;		Unchanged: 0/0
  4501 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4502 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4503 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4504 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4505 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4506 ;;Total ram usage:        2 bytes
  4507 ;; Hardware stack levels used:    1
  4508 ;; Hardware stack levels required when called:    5
  4509 ;; This function calls:
  4510 ;;		_sendI2C
  4511 ;;		_startI2C
  4512 ;;		_stopI2C
  4513 ;; This function is called by:
  4514 ;;		_writeData
  4515 ;;		_initRW1063
  4516 ;;		_printReglageH
  4517 ;;		_main
  4518 ;; This function uses a non-reentrant model
  4519 ;;
  4520                           
  4521                           
  4522                           ;psect for function _writeInst
  4523  053B                     _writeInst:	
  4524                           
  4525                           ;incstack = 0
  4526                           ; Regs used in _writeInst: [wreg+status,2+status,0+pclath+cstack]
  4527                           ;writeInst@Inst stored from wreg
  4528  053B  0020               	movlb	0	; select bank0
  4529  053C  00A2               	movwf	writeInst@Inst
  4530                           
  4531                           ;main.c: 6: startI2C();
  4532  053D  3187  2731  3185   	fcall	_startI2C
  4533                           
  4534                           ;main.c: 7: _delay((unsigned long)((1)*(16000000/4000.0)));
  4535  0540  3006               	movlw	6
  4536  0541  0020               	movlb	0	; select bank0
  4537  0542  00A1               	movwf	??_writeInst
  4538  0543  3030               	movlw	48
  4539  0544                     u2367:	
  4540  0544  0B89               	decfsz	9,f
  4541  0545  2D44               	goto	u2367
  4542  0546  0BA1               	decfsz	??_writeInst,f
  4543  0547  2D44               	goto	u2367
  4544  0548  0000               	nop
  4545                           
  4546                           ;main.c: 8: sendI2C(0x78);
  4547  0549  3078               	movlw	120
  4548  054A  3187  2723  3185   	fcall	_sendI2C
  4549                           
  4550                           ;main.c: 10: _delay((unsigned long)((1)*(16000000/4000.0)));
  4551  054D  3006               	movlw	6
  4552  054E  0020               	movlb	0	; select bank0
  4553  054F  00A1               	movwf	??_writeInst
  4554  0550  3030               	movlw	48
  4555  0551                     u2377:	
  4556  0551  0B89               	decfsz	9,f
  4557  0552  2D51               	goto	u2377
  4558  0553  0BA1               	decfsz	??_writeInst,f
  4559  0554  2D51               	goto	u2377
  4560  0555  0000               	nop
  4561                           
  4562                           ;main.c: 11: sendI2C(0x00);
  4563  0556  3000               	movlw	0
  4564  0557  3187  2723  3185   	fcall	_sendI2C
  4565                           
  4566                           ;main.c: 13: _delay((unsigned long)((1)*(16000000/4000.0)));
  4567  055A  3006               	movlw	6
  4568  055B  0020               	movlb	0	; select bank0
  4569  055C  00A1               	movwf	??_writeInst
  4570  055D  3030               	movlw	48
  4571  055E                     u2387:	
  4572  055E  0B89               	decfsz	9,f
  4573  055F  2D5E               	goto	u2387
  4574  0560  0BA1               	decfsz	??_writeInst,f
  4575  0561  2D5E               	goto	u2387
  4576  0562  0000               	nop
  4577                           
  4578                           ;main.c: 14: sendI2C(Inst);
  4579  0563  0020               	movlb	0	; select bank0
  4580  0564  0822               	movf	writeInst@Inst,w
  4581  0565  3187  2723  3185   	fcall	_sendI2C
  4582                           
  4583                           ;main.c: 16: _delay((unsigned long)((1)*(16000000/4000.0)));
  4584  0568  3006               	movlw	6
  4585  0569  0020               	movlb	0	; select bank0
  4586  056A  00A1               	movwf	??_writeInst
  4587  056B  3030               	movlw	48
  4588  056C                     u2397:	
  4589  056C  0B89               	decfsz	9,f
  4590  056D  2D6C               	goto	u2397
  4591  056E  0BA1               	decfsz	??_writeInst,f
  4592  056F  2D6C               	goto	u2397
  4593  0570  0000               	nop
  4594                           
  4595                           ;main.c: 17: stopI2C();
  4596  0571  3187  2742         	fcall	_stopI2C
  4597  0573  0008               	return
  4598  0574                     __end_of_writeInst:	
  4599                           
  4600                           	psect	text7
  4601  04AE                     __ptext7:	
  4602 ;; *************** function _initRTC *****************
  4603 ;; Defined at:
  4604 ;;		line 50 in file "main.c"
  4605 ;; Parameters:    Size  Location     Type
  4606 ;;		None
  4607 ;; Auto vars:     Size  Location     Type
  4608 ;;		None
  4609 ;; Return value:  Size  Location     Type
  4610 ;;                  1    wreg      void 
  4611 ;; Registers used:
  4612 ;;		wreg, status,2, status,0, pclath, cstack
  4613 ;; Tracked objects:
  4614 ;;		On entry : 0/0
  4615 ;;		On exit  : 0/0
  4616 ;;		Unchanged: 0/0
  4617 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4618 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4619 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4620 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4621 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4622 ;;Total ram usage:        0 bytes
  4623 ;; Hardware stack levels used:    1
  4624 ;; Hardware stack levels required when called:    5
  4625 ;; This function calls:
  4626 ;;		_sendI2C
  4627 ;;		_startI2C
  4628 ;;		_stopI2C
  4629 ;; This function is called by:
  4630 ;;		_main
  4631 ;; This function uses a non-reentrant model
  4632 ;;
  4633                           
  4634                           
  4635                           ;psect for function _initRTC
  4636  04AE                     _initRTC:	
  4637                           
  4638                           ;main.c: 51: startI2C();
  4639                           
  4640                           ;incstack = 0
  4641                           ; Regs used in _initRTC: [wreg+status,2+status,0+pclath+cstack]
  4642  04AE  3187  2731  3184   	fcall	_startI2C
  4643                           
  4644                           ;main.c: 52: sendI2C(0b11011110);
  4645  04B1  30DE               	movlw	222
  4646  04B2  3187  2723  3184   	fcall	_sendI2C
  4647  04B5                     l358:	
  4648                           ;main.c: 53: while (SSP1CON2bits.ACKSTAT == 1);
  4649                           
  4650  04B5  0024               	movlb	4	; select bank4
  4651  04B6  1B16               	btfsc	22,6	;volatile
  4652  04B7  2CB5               	goto	l358
  4653                           
  4654                           ;main.c: 54: sendI2C(0x00);
  4655  04B8  3000               	movlw	0
  4656  04B9  3187  2723  3184   	fcall	_sendI2C
  4657  04BC                     l361:	
  4658                           ;main.c: 55: while (SSP1CON2bits.ACKSTAT == 1);
  4659                           
  4660  04BC  0024               	movlb	4	; select bank4
  4661  04BD  1B16               	btfsc	22,6	;volatile
  4662  04BE  2CBC               	goto	l361
  4663                           
  4664                           ;main.c: 56: sendI2C(0b11011001);
  4665  04BF  30D9               	movlw	217
  4666  04C0  3187  2723  3184   	fcall	_sendI2C
  4667  04C3                     l364:	
  4668                           ;main.c: 57: while (SSP1CON2bits.ACKSTAT == 1);
  4669                           
  4670  04C3  0024               	movlb	4	; select bank4
  4671  04C4  1B16               	btfsc	22,6	;volatile
  4672  04C5  2CC3               	goto	l364
  4673                           
  4674                           ;main.c: 58: stopI2C();
  4675  04C6  3187  2742  3184   	fcall	_stopI2C
  4676                           
  4677                           ;main.c: 60: startI2C();
  4678  04C9  3187  2731  3184   	fcall	_startI2C
  4679                           
  4680                           ;main.c: 61: sendI2C(0b11011110);
  4681  04CC  30DE               	movlw	222
  4682  04CD  3187  2723  3184   	fcall	_sendI2C
  4683  04D0                     l367:	
  4684                           ;main.c: 62: while (SSP1CON2bits.ACKSTAT == 1);
  4685                           
  4686  04D0  0024               	movlb	4	; select bank4
  4687  04D1  1B16               	btfsc	22,6	;volatile
  4688  04D2  2CD0               	goto	l367
  4689                           
  4690                           ;main.c: 63: sendI2C(0x01);
  4691  04D3  3001               	movlw	1
  4692  04D4  3187  2723  3184   	fcall	_sendI2C
  4693  04D7                     l370:	
  4694                           ;main.c: 64: while (SSP1CON2bits.ACKSTAT == 1);
  4695                           
  4696  04D7  0024               	movlb	4	; select bank4
  4697  04D8  1B16               	btfsc	22,6	;volatile
  4698  04D9  2CD7               	goto	l370
  4699                           
  4700                           ;main.c: 65: sendI2C(0b01011001);
  4701  04DA  3059               	movlw	89
  4702  04DB  3187  2723  3184   	fcall	_sendI2C
  4703  04DE                     l373:	
  4704                           ;main.c: 66: while (SSP1CON2bits.ACKSTAT == 1);
  4705                           
  4706  04DE  0024               	movlb	4	; select bank4
  4707  04DF  1B16               	btfsc	22,6	;volatile
  4708  04E0  2CDE               	goto	l373
  4709                           
  4710                           ;main.c: 67: stopI2C();
  4711  04E1  3187  2742  3184   	fcall	_stopI2C
  4712                           
  4713                           ;main.c: 69: startI2C();
  4714  04E4  3187  2731  3184   	fcall	_startI2C
  4715                           
  4716                           ;main.c: 70: sendI2C(0b11011110);
  4717  04E7  30DE               	movlw	222
  4718  04E8  3187  2723  3184   	fcall	_sendI2C
  4719  04EB                     l376:	
  4720                           ;main.c: 71: while (SSP1CON2bits.ACKSTAT == 1);
  4721                           
  4722  04EB  0024               	movlb	4	; select bank4
  4723  04EC  1B16               	btfsc	22,6	;volatile
  4724  04ED  2CEB               	goto	l376
  4725                           
  4726                           ;main.c: 72: sendI2C(0x02);
  4727  04EE  3002               	movlw	2
  4728  04EF  3187  2723  3184   	fcall	_sendI2C
  4729  04F2                     l379:	
  4730                           ;main.c: 73: while (SSP1CON2bits.ACKSTAT == 1);
  4731                           
  4732  04F2  0024               	movlb	4	; select bank4
  4733  04F3  1B16               	btfsc	22,6	;volatile
  4734  04F4  2CF2               	goto	l379
  4735                           
  4736                           ;main.c: 74: sendI2C(0b00000001);
  4737  04F5  3001               	movlw	1
  4738  04F6  3187  2723  3184   	fcall	_sendI2C
  4739  04F9                     l382:	
  4740                           ;main.c: 75: while (SSP1CON2bits.ACKSTAT == 1);
  4741                           
  4742  04F9  0024               	movlb	4	; select bank4
  4743  04FA  1B16               	btfsc	22,6	;volatile
  4744  04FB  2CF9               	goto	l382
  4745                           
  4746                           ;main.c: 76: stopI2C();
  4747  04FC  3187  2742         	fcall	_stopI2C
  4748  04FE  0008               	return
  4749  04FF                     __end_of_initRTC:	
  4750                           
  4751                           	psect	text8
  4752  04FF                     __ptext8:	
  4753 ;; *************** function _initI2C *****************
  4754 ;; Defined at:
  4755 ;;		line 5 in file "i2c.c"
  4756 ;; Parameters:    Size  Location     Type
  4757 ;;		None
  4758 ;; Auto vars:     Size  Location     Type
  4759 ;;  i               2    1[BANK0 ] int 
  4760 ;; Return value:  Size  Location     Type
  4761 ;;                  1    wreg      void 
  4762 ;; Registers used:
  4763 ;;		wreg, status,2
  4764 ;; Tracked objects:
  4765 ;;		On entry : 0/0
  4766 ;;		On exit  : 0/0
  4767 ;;		Unchanged: 0/0
  4768 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4769 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4770 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4771 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4772 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4773 ;;Total ram usage:        3 bytes
  4774 ;; Hardware stack levels used:    1
  4775 ;; Hardware stack levels required when called:    3
  4776 ;; This function calls:
  4777 ;;		Nothing
  4778 ;; This function is called by:
  4779 ;;		_main
  4780 ;; This function uses a non-reentrant model
  4781 ;;
  4782                           
  4783                           
  4784                           ;psect for function _initI2C
  4785  04FF                     _initI2C:	
  4786                           
  4787                           ;i2c.c: 6: int i = 0;
  4788                           
  4789                           ;incstack = 0
  4790                           ; Regs used in _initI2C: [wreg+status,2]
  4791  04FF  0020               	movlb	0	; select bank0
  4792  0500  01A1               	clrf	initI2C@i
  4793  0501  01A2               	clrf	initI2C@i+1
  4794                           
  4795                           ;i2c.c: 11: TRISB6 = 0;
  4796  0502  0021               	movlb	1	; select bank1
  4797  0503  130D               	bcf	13,6	;volatile
  4798                           
  4799                           ;i2c.c: 12: for (i = 0; i < 9; i++) {
  4800  0504  0020               	movlb	0	; select bank0
  4801  0505  01A1               	clrf	initI2C@i
  4802  0506  01A2               	clrf	initI2C@i+1
  4803  0507  0822               	movf	initI2C@i+1,w
  4804  0508  3A80               	xorlw	128
  4805  0509  00A0               	movwf	??_initI2C
  4806  050A  3080               	movlw	128
  4807  050B  0220               	subwf	??_initI2C,w
  4808  050C  1D03               	skipz
  4809  050D  2D10               	goto	u1985
  4810  050E  3009               	movlw	9
  4811  050F  0221               	subwf	initI2C@i,w
  4812  0510                     u1985:	
  4813  0510  1803               	btfsc	3,0
  4814  0511  2D25               	goto	l275
  4815  0512                     l274:	
  4816                           
  4817                           ;i2c.c: 13: LATB6 = 1;
  4818  0512  0022               	movlb	2	; select bank2
  4819  0513  170D               	bsf	13,6	;volatile
  4820                           
  4821                           ;i2c.c: 14: LATB6 = 0;
  4822  0514  130D               	bcf	13,6	;volatile
  4823  0515  3001               	movlw	1
  4824  0516  0020               	movlb	0	; select bank0
  4825  0517  07A1               	addwf	initI2C@i,f
  4826  0518  3000               	movlw	0
  4827  0519  3DA2               	addwfc	initI2C@i+1,f
  4828  051A  0822               	movf	initI2C@i+1,w
  4829  051B  3A80               	xorlw	128
  4830  051C  00A0               	movwf	??_initI2C
  4831  051D  3080               	movlw	128
  4832  051E  0220               	subwf	??_initI2C,w
  4833  051F  1D03               	skipz
  4834  0520  2D23               	goto	u1995
  4835  0521  3009               	movlw	9
  4836  0522  0221               	subwf	initI2C@i,w
  4837  0523                     u1995:	
  4838  0523  1C03               	skipc
  4839  0524  2D12               	goto	l274
  4840  0525                     l275:	
  4841                           
  4842                           ;i2c.c: 15: }
  4843                           ;i2c.c: 18: TRISB6 = 1;
  4844  0525  0021               	movlb	1	; select bank1
  4845  0526  170D               	bsf	13,6	;volatile
  4846                           
  4847                           ;i2c.c: 19: TRISB4 = 1;
  4848  0527  160D               	bsf	13,4	;volatile
  4849                           
  4850                           ;i2c.c: 22: ANSELB = 0x00;
  4851  0528  0023               	movlb	3	; select bank3
  4852  0529  018D               	clrf	13	;volatile
  4853                           
  4854                           ;i2c.c: 25: LATB4 = 1;
  4855  052A  0022               	movlb	2	; select bank2
  4856  052B  160D               	bsf	13,4	;volatile
  4857                           
  4858                           ;i2c.c: 26: LATB6 = 1;
  4859  052C  170D               	bsf	13,6	;volatile
  4860                           
  4861                           ;i2c.c: 29: SSP1STAT = 0x80;
  4862  052D  3080               	movlw	128
  4863  052E  0024               	movlb	4	; select bank4
  4864  052F  0094               	movwf	20	;volatile
  4865                           
  4866                           ;i2c.c: 30: SSP1CON1 = 0x28;
  4867  0530  3028               	movlw	40
  4868  0531  0095               	movwf	21	;volatile
  4869                           
  4870                           ;i2c.c: 31: SSP1CON2 = 0x00;
  4871  0532  0196               	clrf	22	;volatile
  4872                           
  4873                           ;i2c.c: 32: SSP1ADD = 0x27;
  4874  0533  3027               	movlw	39
  4875  0534  0092               	movwf	18	;volatile
  4876                           
  4877                           ;i2c.c: 35: OPTION_REG = 0x0;
  4878  0535  0021               	movlb	1	; select bank1
  4879  0536  0195               	clrf	21	;volatile
  4880                           
  4881                           ;i2c.c: 36: WPUB = 0b00010000;
  4882  0537  3010               	movlw	16
  4883  0538  0024               	movlb	4	; select bank4
  4884  0539  008D               	movwf	13	;volatile
  4885  053A  0008               	return
  4886  053B                     __end_of_initI2C:	
  4887                           
  4888                           	psect	text9
  4889  0402                     __ptext9:	
  4890 ;; *************** function _incrMin *****************
  4891 ;; Defined at:
  4892 ;;		line 240 in file "main.c"
  4893 ;; Parameters:    Size  Location     Type
  4894 ;;		None
  4895 ;; Auto vars:     Size  Location     Type
  4896 ;;  minute          1   10[BANK0 ] unsigned char 
  4897 ;;  uniteM          1    9[BANK0 ] unsigned char 
  4898 ;;  dizaineM        1    8[BANK0 ] unsigned char 
  4899 ;; Return value:  Size  Location     Type
  4900 ;;                  1    wreg      void 
  4901 ;; Registers used:
  4902 ;;		wreg, status,2, status,0, pclath, cstack
  4903 ;; Tracked objects:
  4904 ;;		On entry : 0/0
  4905 ;;		On exit  : 0/0
  4906 ;;		Unchanged: 0/0
  4907 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4908 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4909 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4910 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4911 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4912 ;;Total ram usage:        6 bytes
  4913 ;; Hardware stack levels used:    1
  4914 ;; Hardware stack levels required when called:    6
  4915 ;; This function calls:
  4916 ;;		_bitExtracted
  4917 ;;		_changeMin
  4918 ;;		_readMin
  4919 ;; This function is called by:
  4920 ;;		_main
  4921 ;; This function uses a non-reentrant model
  4922 ;;
  4923                           
  4924                           
  4925                           ;psect for function _incrMin
  4926  0402                     _incrMin:	
  4927                           
  4928                           ;main.c: 242: uint8_t minute=0;
  4929                           
  4930                           ;incstack = 0
  4931                           ; Regs used in _incrMin: [wreg+status,2+status,0+pclath+cstack]
  4932  0402  0020               	movlb	0	; select bank0
  4933  0403  01AA               	clrf	incrMin@minute
  4934                           
  4935                           ;main.c: 243: uint8_t dizaineM=0;
  4936  0404  01A8               	clrf	incrMin@dizaineM
  4937                           
  4938                           ;main.c: 244: uint8_t uniteM=0;
  4939  0405  01A9               	clrf	incrMin@uniteM
  4940                           
  4941                           ;main.c: 245: minute = readMin();
  4942  0406  3185  25A0  3184   	fcall	_readMin
  4943  0409  0020               	movlb	0	; select bank0
  4944  040A  00A5               	movwf	??_incrMin
  4945  040B  0825               	movf	??_incrMin,w
  4946  040C  00AA               	movwf	incrMin@minute
  4947                           
  4948                           ;main.c: 246: uniteM = bitExtracted(minute, 4, 1);
  4949  040D  3004               	movlw	4
  4950  040E  00A5               	movwf	??_incrMin
  4951  040F  0825               	movf	??_incrMin,w
  4952  0410  00A0               	movwf	bitExtracted@k
  4953  0411  01A1               	clrf	bitExtracted@p
  4954  0412  0AA1               	incf	bitExtracted@p,f
  4955  0413  082A               	movf	incrMin@minute,w
  4956  0414  3186  26B5  3184   	fcall	_bitExtracted
  4957  0417  0020               	movlb	0	; select bank0
  4958  0418  00A6               	movwf	??_incrMin+1
  4959  0419  0826               	movf	??_incrMin+1,w
  4960  041A  00A9               	movwf	incrMin@uniteM
  4961                           
  4962                           ;main.c: 247: dizaineM = bitExtracted(minute, 3, 5);
  4963  041B  3003               	movlw	3
  4964  041C  00A5               	movwf	??_incrMin
  4965  041D  0825               	movf	??_incrMin,w
  4966  041E  00A0               	movwf	bitExtracted@k
  4967  041F  3005               	movlw	5
  4968  0420  00A6               	movwf	??_incrMin+1
  4969  0421  0826               	movf	??_incrMin+1,w
  4970  0422  00A1               	movwf	bitExtracted@p
  4971  0423  082A               	movf	incrMin@minute,w
  4972  0424  3186  26B5  3184   	fcall	_bitExtracted
  4973  0427  0020               	movlb	0	; select bank0
  4974  0428  00A7               	movwf	??_incrMin+2
  4975  0429  0827               	movf	??_incrMin+2,w
  4976  042A  00A8               	movwf	incrMin@dizaineM
  4977                           
  4978                           ;main.c: 248: minute=0;
  4979  042B  01AA               	clrf	incrMin@minute
  4980                           
  4981                           ;main.c: 249: uniteM=uniteM+1;
  4982  042C  0829               	movf	incrMin@uniteM,w
  4983  042D  3E01               	addlw	1
  4984  042E  00A5               	movwf	??_incrMin
  4985  042F  0825               	movf	??_incrMin,w
  4986  0430  00A9               	movwf	incrMin@uniteM
  4987                           
  4988                           ;main.c: 250: if(uniteM>9)
  4989  0431  300A               	movlw	10
  4990  0432  0229               	subwf	incrMin@uniteM,w
  4991  0433  1C03               	skipc
  4992  0434  2C3B               	goto	l2854
  4993                           
  4994                           ;main.c: 251: {
  4995                           ;main.c: 252: uniteM=0;
  4996  0435  01A9               	clrf	incrMin@uniteM
  4997                           
  4998                           ;main.c: 253: dizaineM=dizaineM+1;
  4999  0436  0828               	movf	incrMin@dizaineM,w
  5000  0437  3E01               	addlw	1
  5001  0438  00A5               	movwf	??_incrMin
  5002  0439  0825               	movf	??_incrMin,w
  5003  043A  00A8               	movwf	incrMin@dizaineM
  5004  043B                     l2854:	
  5005                           
  5006                           ;main.c: 254: }
  5007                           ;main.c: 255: if(dizaineM>6)
  5008  043B  3007               	movlw	7
  5009  043C  0228               	subwf	incrMin@dizaineM,w
  5010  043D  1C03               	skipc
  5011  043E  2C41               	goto	l2858
  5012                           
  5013                           ;main.c: 256: {
  5014                           ;main.c: 257: dizaineM=0;
  5015  043F  01A8               	clrf	incrMin@dizaineM
  5016                           
  5017                           ;main.c: 258: uniteM=0;
  5018  0440  01A9               	clrf	incrMin@uniteM
  5019  0441                     l2858:	
  5020                           
  5021                           ;main.c: 259: }
  5022                           ;main.c: 260: minute=minute+dizaineM;
  5023  0441  082A               	movf	incrMin@minute,w
  5024  0442  0728               	addwf	incrMin@dizaineM,w
  5025  0443  00A5               	movwf	??_incrMin
  5026  0444  0825               	movf	??_incrMin,w
  5027  0445  00AA               	movwf	incrMin@minute
  5028                           
  5029                           ;main.c: 261: minute=minute<<4;
  5030  0446  082A               	movf	incrMin@minute,w
  5031  0447  00A5               	movwf	??_incrMin
  5032  0448  3003               	movlw	3
  5033  0449                     u2155:	
  5034  0449  35A5               	lslf	??_incrMin,f
  5035  044A  3EFF               	addlw	-1
  5036  044B  1D03               	skipz
  5037  044C  2C49               	goto	u2155
  5038  044D  3525               	lslf	??_incrMin,w
  5039  044E  00A6               	movwf	??_incrMin+1
  5040  044F  0826               	movf	??_incrMin+1,w
  5041  0450  00AA               	movwf	incrMin@minute
  5042                           
  5043                           ;main.c: 262: minute=minute+uniteM;
  5044  0451  082A               	movf	incrMin@minute,w
  5045  0452  0729               	addwf	incrMin@uniteM,w
  5046  0453  00A5               	movwf	??_incrMin
  5047  0454  0825               	movf	??_incrMin,w
  5048  0455  00AA               	movwf	incrMin@minute
  5049                           
  5050                           ;main.c: 263: changeMin(minute);
  5051  0456  082A               	movf	incrMin@minute,w
  5052  0457  3186  2643         	fcall	_changeMin
  5053  0459  0008               	return
  5054  045A                     __end_of_incrMin:	
  5055                           
  5056                           	psect	text10
  5057  05A0                     __ptext10:	
  5058 ;; *************** function _readMin *****************
  5059 ;; Defined at:
  5060 ;;		line 180 in file "main.c"
  5061 ;; Parameters:    Size  Location     Type
  5062 ;;		None
  5063 ;; Auto vars:     Size  Location     Type
  5064 ;;  minute          1    3[BANK0 ] unsigned char 
  5065 ;; Return value:  Size  Location     Type
  5066 ;;                  1    wreg      unsigned char 
  5067 ;; Registers used:
  5068 ;;		wreg, status,2, status,0, pclath, cstack
  5069 ;; Tracked objects:
  5070 ;;		On entry : 0/0
  5071 ;;		On exit  : 0/0
  5072 ;;		Unchanged: 0/0
  5073 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5074 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5075 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5076 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5077 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5078 ;;Total ram usage:        2 bytes
  5079 ;; Hardware stack levels used:    1
  5080 ;; Hardware stack levels required when called:    5
  5081 ;; This function calls:
  5082 ;;		_re_startI2C
  5083 ;;		_readI2C
  5084 ;;		_sendI2C
  5085 ;;		_sendNoAckI2C
  5086 ;;		_startI2C
  5087 ;;		_stopI2C
  5088 ;; This function is called by:
  5089 ;;		_printReglageH
  5090 ;;		_incrMin
  5091 ;;		_main
  5092 ;; This function uses a non-reentrant model
  5093 ;;
  5094                           
  5095                           
  5096                           ;psect for function _readMin
  5097  05A0                     _readMin:	
  5098                           
  5099                           ;main.c: 181: uint8_t minute = 0;
  5100                           
  5101                           ;incstack = 0
  5102                           ; Regs used in _readMin: [wreg+status,2+status,0+pclath+cstack]
  5103  05A0  0020               	movlb	0	; select bank0
  5104  05A1  01A3               	clrf	readMin@minute
  5105                           
  5106                           ;main.c: 182: startI2C();
  5107  05A2  3187  2731  3185   	fcall	_startI2C
  5108                           
  5109                           ;main.c: 183: sendI2C(0b11011110);
  5110  05A5  30DE               	movlw	222
  5111  05A6  3187  2723  3185   	fcall	_sendI2C
  5112  05A9                     l446:	
  5113                           ;main.c: 184: while (SSP1CON2bits.ACKSTAT == 1);
  5114                           
  5115  05A9  0024               	movlb	4	; select bank4
  5116  05AA  1B16               	btfsc	22,6	;volatile
  5117  05AB  2DA9               	goto	l446
  5118                           
  5119                           ;main.c: 185: sendI2C(0x01);
  5120  05AC  3001               	movlw	1
  5121  05AD  3187  2723  3185   	fcall	_sendI2C
  5122  05B0                     l449:	
  5123                           ;main.c: 186: while (SSP1CON2bits.ACKSTAT == 1);
  5124                           
  5125  05B0  0024               	movlb	4	; select bank4
  5126  05B1  1B16               	btfsc	22,6	;volatile
  5127  05B2  2DB0               	goto	l449
  5128                           
  5129                           ;main.c: 187: re_startI2C();
  5130  05B3  3187  273A  3185   	fcall	_re_startI2C
  5131                           
  5132                           ;main.c: 188: sendI2C(0b11011111);
  5133  05B6  30DF               	movlw	223
  5134  05B7  3187  2723  3185   	fcall	_sendI2C
  5135  05BA                     l452:	
  5136                           ;main.c: 189: while (SSP1CON2bits.ACKSTAT == 1);
  5137                           
  5138  05BA  0024               	movlb	4	; select bank4
  5139  05BB  1B16               	btfsc	22,6	;volatile
  5140  05BC  2DBA               	goto	l452
  5141                           
  5142                           ;main.c: 190: minute = readI2C();
  5143  05BD  3186  26DF  3185   	fcall	_readI2C
  5144  05C0  0020               	movlb	0	; select bank0
  5145  05C1  00A2               	movwf	??_readMin
  5146  05C2  0822               	movf	??_readMin,w
  5147  05C3  00A3               	movwf	readMin@minute
  5148                           
  5149                           ;main.c: 191: sendNoAckI2C();
  5150  05C4  3187  275F  3185   	fcall	_sendNoAckI2C
  5151                           
  5152                           ;main.c: 192: stopI2C();
  5153  05C7  3187  2742         	fcall	_stopI2C
  5154                           
  5155                           ;main.c: 193: return minute;
  5156  05C9  0020               	movlb	0	; select bank0
  5157  05CA  0823               	movf	readMin@minute,w
  5158  05CB  0008               	return
  5159  05CC                     __end_of_readMin:	
  5160                           
  5161                           	psect	text11
  5162  0643                     __ptext11:	
  5163 ;; *************** function _changeMin *****************
  5164 ;; Defined at:
  5165 ;;		line 140 in file "main.c"
  5166 ;; Parameters:    Size  Location     Type
  5167 ;;  minute          1    wreg     unsigned char 
  5168 ;; Auto vars:     Size  Location     Type
  5169 ;;  minute          1    1[BANK0 ] unsigned char 
  5170 ;; Return value:  Size  Location     Type
  5171 ;;                  1    wreg      void 
  5172 ;; Registers used:
  5173 ;;		wreg, status,2, status,0, pclath, cstack
  5174 ;; Tracked objects:
  5175 ;;		On entry : 0/0
  5176 ;;		On exit  : 0/0
  5177 ;;		Unchanged: 0/0
  5178 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5179 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5180 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5181 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5182 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5183 ;;Total ram usage:        1 bytes
  5184 ;; Hardware stack levels used:    1
  5185 ;; Hardware stack levels required when called:    5
  5186 ;; This function calls:
  5187 ;;		_sendI2C
  5188 ;;		_startI2C
  5189 ;;		_stopI2C
  5190 ;; This function is called by:
  5191 ;;		_incrMin
  5192 ;; This function uses a non-reentrant model
  5193 ;;
  5194                           
  5195                           
  5196                           ;psect for function _changeMin
  5197  0643                     _changeMin:	
  5198                           
  5199                           ;incstack = 0
  5200                           ; Regs used in _changeMin: [wreg+status,2+status,0+pclath+cstack]
  5201                           ;changeMin@minute stored from wreg
  5202  0643  0020               	movlb	0	; select bank0
  5203  0644  00A1               	movwf	changeMin@minute
  5204                           
  5205                           ;main.c: 142: startI2C();
  5206  0645  3187  2731  3186   	fcall	_startI2C
  5207                           
  5208                           ;main.c: 143: sendI2C(0b11011110);
  5209  0648  30DE               	movlw	222
  5210  0649  3187  2723  3186   	fcall	_sendI2C
  5211  064C                     l410:	
  5212                           ;main.c: 144: while (SSP1CON2bits.ACKSTAT == 1);
  5213                           
  5214  064C  0024               	movlb	4	; select bank4
  5215  064D  1B16               	btfsc	22,6	;volatile
  5216  064E  2E4C               	goto	l410
  5217                           
  5218                           ;main.c: 145: sendI2C(0x01);
  5219  064F  3001               	movlw	1
  5220  0650  3187  2723  3186   	fcall	_sendI2C
  5221  0653                     l413:	
  5222                           ;main.c: 146: while (SSP1CON2bits.ACKSTAT == 1);
  5223                           
  5224  0653  0024               	movlb	4	; select bank4
  5225  0654  1B16               	btfsc	22,6	;volatile
  5226  0655  2E53               	goto	l413
  5227                           
  5228                           ;main.c: 147: sendI2C(minute);
  5229  0656  0020               	movlb	0	; select bank0
  5230  0657  0821               	movf	changeMin@minute,w
  5231  0658  3187  2723  3186   	fcall	_sendI2C
  5232  065B                     l416:	
  5233                           ;main.c: 148: while (SSP1CON2bits.ACKSTAT == 1);
  5234                           
  5235  065B  0024               	movlb	4	; select bank4
  5236  065C  1B16               	btfsc	22,6	;volatile
  5237  065D  2E5B               	goto	l416
  5238                           
  5239                           ;main.c: 149: stopI2C();
  5240  065E  3187  2742         	fcall	_stopI2C
  5241  0660  0008               	return
  5242  0661                     __end_of_changeMin:	
  5243                           
  5244                           	psect	text12
  5245  03A2                     __ptext12:	
  5246 ;; *************** function _incrHeure *****************
  5247 ;; Defined at:
  5248 ;;		line 266 in file "main.c"
  5249 ;; Parameters:    Size  Location     Type
  5250 ;;		None
  5251 ;; Auto vars:     Size  Location     Type
  5252 ;;  heure           1   10[BANK0 ] unsigned char 
  5253 ;;  uniteH          1    9[BANK0 ] unsigned char 
  5254 ;;  dizaineH        1    8[BANK0 ] unsigned char 
  5255 ;; Return value:  Size  Location     Type
  5256 ;;                  1    wreg      void 
  5257 ;; Registers used:
  5258 ;;		wreg, status,2, status,0, pclath, cstack
  5259 ;; Tracked objects:
  5260 ;;		On entry : 0/0
  5261 ;;		On exit  : 0/0
  5262 ;;		Unchanged: 0/0
  5263 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5264 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5265 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5266 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5267 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5268 ;;Total ram usage:        6 bytes
  5269 ;; Hardware stack levels used:    1
  5270 ;; Hardware stack levels required when called:    6
  5271 ;; This function calls:
  5272 ;;		_bitExtracted
  5273 ;;		_changeHeure
  5274 ;;		_readHr
  5275 ;; This function is called by:
  5276 ;;		_main
  5277 ;; This function uses a non-reentrant model
  5278 ;;
  5279                           
  5280                           
  5281                           ;psect for function _incrHeure
  5282  03A2                     _incrHeure:	
  5283                           
  5284                           ;main.c: 268: uint8_t heure=0;
  5285                           
  5286                           ;incstack = 0
  5287                           ; Regs used in _incrHeure: [wreg+status,2+status,0+pclath+cstack]
  5288  03A2  0020               	movlb	0	; select bank0
  5289  03A3  01AA               	clrf	incrHeure@heure
  5290                           
  5291                           ;main.c: 269: uint8_t dizaineH=0;
  5292  03A4  01A8               	clrf	incrHeure@dizaineH
  5293                           
  5294                           ;main.c: 270: uint8_t uniteH=0;
  5295  03A5  01A9               	clrf	incrHeure@uniteH
  5296                           
  5297                           ;main.c: 271: heure = readHr();
  5298  03A6  3185  25CC  3183   	fcall	_readHr
  5299  03A9  0020               	movlb	0	; select bank0
  5300  03AA  00A5               	movwf	??_incrHeure
  5301  03AB  0825               	movf	??_incrHeure,w
  5302  03AC  00AA               	movwf	incrHeure@heure
  5303                           
  5304                           ;main.c: 272: uniteH = bitExtracted(heure, 4, 1);
  5305  03AD  3004               	movlw	4
  5306  03AE  00A5               	movwf	??_incrHeure
  5307  03AF  0825               	movf	??_incrHeure,w
  5308  03B0  00A0               	movwf	bitExtracted@k
  5309  03B1  01A1               	clrf	bitExtracted@p
  5310  03B2  0AA1               	incf	bitExtracted@p,f
  5311  03B3  082A               	movf	incrHeure@heure,w
  5312  03B4  3186  26B5  3183   	fcall	_bitExtracted
  5313  03B7  0020               	movlb	0	; select bank0
  5314  03B8  00A6               	movwf	??_incrHeure+1
  5315  03B9  0826               	movf	??_incrHeure+1,w
  5316  03BA  00A9               	movwf	incrHeure@uniteH
  5317                           
  5318                           ;main.c: 273: dizaineH = bitExtracted(heure, 2, 5);
  5319  03BB  3002               	movlw	2
  5320  03BC  00A5               	movwf	??_incrHeure
  5321  03BD  0825               	movf	??_incrHeure,w
  5322  03BE  00A0               	movwf	bitExtracted@k
  5323  03BF  3005               	movlw	5
  5324  03C0  00A6               	movwf	??_incrHeure+1
  5325  03C1  0826               	movf	??_incrHeure+1,w
  5326  03C2  00A1               	movwf	bitExtracted@p
  5327  03C3  082A               	movf	incrHeure@heure,w
  5328  03C4  3186  26B5  3183   	fcall	_bitExtracted
  5329  03C7  0020               	movlb	0	; select bank0
  5330  03C8  00A7               	movwf	??_incrHeure+2
  5331  03C9  0827               	movf	??_incrHeure+2,w
  5332  03CA  00A8               	movwf	incrHeure@dizaineH
  5333                           
  5334                           ;main.c: 274: heure=0;
  5335  03CB  01AA               	clrf	incrHeure@heure
  5336                           
  5337                           ;main.c: 275: uniteH=uniteH+1;
  5338  03CC  0829               	movf	incrHeure@uniteH,w
  5339  03CD  3E01               	addlw	1
  5340  03CE  00A5               	movwf	??_incrHeure
  5341  03CF  0825               	movf	??_incrHeure,w
  5342  03D0  00A9               	movwf	incrHeure@uniteH
  5343                           
  5344                           ;main.c: 276: if(uniteH>9)
  5345  03D1  300A               	movlw	10
  5346  03D2  0229               	subwf	incrHeure@uniteH,w
  5347  03D3  1C03               	skipc
  5348  03D4  2BDB               	goto	l2884
  5349                           
  5350                           ;main.c: 277: {
  5351                           ;main.c: 278: uniteH=0;
  5352  03D5  01A9               	clrf	incrHeure@uniteH
  5353                           
  5354                           ;main.c: 279: dizaineH=dizaineH+1;
  5355  03D6  0828               	movf	incrHeure@dizaineH,w
  5356  03D7  3E01               	addlw	1
  5357  03D8  00A5               	movwf	??_incrHeure
  5358  03D9  0825               	movf	??_incrHeure,w
  5359  03DA  00A8               	movwf	incrHeure@dizaineH
  5360  03DB                     l2884:	
  5361                           
  5362                           ;main.c: 280: }
  5363                           ;main.c: 281: if(dizaineH>2 && uniteH==4)
  5364  03DB  3003               	movlw	3
  5365  03DC  0228               	subwf	incrHeure@dizaineH,w
  5366  03DD  1C03               	skipc
  5367  03DE  2BE9               	goto	l2892
  5368  03DF  3004               	movlw	4
  5369  03E0  0629               	xorwf	incrHeure@uniteH,w
  5370  03E1  1D03               	btfss	3,2
  5371  03E2  2BE9               	goto	l2892
  5372                           
  5373                           ;main.c: 282: {
  5374                           ;main.c: 283: dizaineH=0;
  5375  03E3  01A8               	clrf	incrHeure@dizaineH
  5376                           
  5377                           ;main.c: 284: uniteH=uniteH+1;
  5378  03E4  0829               	movf	incrHeure@uniteH,w
  5379  03E5  3E01               	addlw	1
  5380  03E6  00A5               	movwf	??_incrHeure
  5381  03E7  0825               	movf	??_incrHeure,w
  5382  03E8  00A9               	movwf	incrHeure@uniteH
  5383  03E9                     l2892:	
  5384                           
  5385                           ;main.c: 285: }
  5386                           ;main.c: 286: heure=heure+dizaineH;
  5387  03E9  082A               	movf	incrHeure@heure,w
  5388  03EA  0728               	addwf	incrHeure@dizaineH,w
  5389  03EB  00A5               	movwf	??_incrHeure
  5390  03EC  0825               	movf	??_incrHeure,w
  5391  03ED  00AA               	movwf	incrHeure@heure
  5392                           
  5393                           ;main.c: 287: heure=heure<<4;
  5394  03EE  082A               	movf	incrHeure@heure,w
  5395  03EF  00A5               	movwf	??_incrHeure
  5396  03F0  3003               	movlw	3
  5397  03F1                     u2195:	
  5398  03F1  35A5               	lslf	??_incrHeure,f
  5399  03F2  3EFF               	addlw	-1
  5400  03F3  1D03               	skipz
  5401  03F4  2BF1               	goto	u2195
  5402  03F5  3525               	lslf	??_incrHeure,w
  5403  03F6  00A6               	movwf	??_incrHeure+1
  5404  03F7  0826               	movf	??_incrHeure+1,w
  5405  03F8  00AA               	movwf	incrHeure@heure
  5406                           
  5407                           ;main.c: 288: heure=heure+uniteH;
  5408  03F9  082A               	movf	incrHeure@heure,w
  5409  03FA  0729               	addwf	incrHeure@uniteH,w
  5410  03FB  00A5               	movwf	??_incrHeure
  5411  03FC  0825               	movf	??_incrHeure,w
  5412  03FD  00AA               	movwf	incrHeure@heure
  5413                           
  5414                           ;main.c: 289: changeHeure(heure);
  5415  03FE  082A               	movf	incrHeure@heure,w
  5416  03FF  3186  2661         	fcall	_changeHeure
  5417  0401  0008               	return
  5418  0402                     __end_of_incrHeure:	
  5419                           
  5420                           	psect	text13
  5421  05CC                     __ptext13:	
  5422 ;; *************** function _readHr *****************
  5423 ;; Defined at:
  5424 ;;		line 196 in file "main.c"
  5425 ;; Parameters:    Size  Location     Type
  5426 ;;		None
  5427 ;; Auto vars:     Size  Location     Type
  5428 ;;  heure           1    3[BANK0 ] unsigned char 
  5429 ;; Return value:  Size  Location     Type
  5430 ;;                  1    wreg      unsigned char 
  5431 ;; Registers used:
  5432 ;;		wreg, status,2, status,0, pclath, cstack
  5433 ;; Tracked objects:
  5434 ;;		On entry : 0/0
  5435 ;;		On exit  : 0/0
  5436 ;;		Unchanged: 0/0
  5437 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5438 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5439 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5440 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5441 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5442 ;;Total ram usage:        2 bytes
  5443 ;; Hardware stack levels used:    1
  5444 ;; Hardware stack levels required when called:    5
  5445 ;; This function calls:
  5446 ;;		_re_startI2C
  5447 ;;		_readI2C
  5448 ;;		_sendI2C
  5449 ;;		_sendNoAckI2C
  5450 ;;		_startI2C
  5451 ;;		_stopI2C
  5452 ;; This function is called by:
  5453 ;;		_printReglageH
  5454 ;;		_incrHeure
  5455 ;;		_main
  5456 ;; This function uses a non-reentrant model
  5457 ;;
  5458                           
  5459                           
  5460                           ;psect for function _readHr
  5461  05CC                     _readHr:	
  5462                           
  5463                           ;main.c: 197: uint8_t heure = 0;
  5464                           
  5465                           ;incstack = 0
  5466                           ; Regs used in _readHr: [wreg+status,2+status,0+pclath+cstack]
  5467  05CC  0020               	movlb	0	; select bank0
  5468  05CD  01A3               	clrf	readHr@heure
  5469                           
  5470                           ;main.c: 198: startI2C();
  5471  05CE  3187  2731  3185   	fcall	_startI2C
  5472                           
  5473                           ;main.c: 199: sendI2C(0b11011110);
  5474  05D1  30DE               	movlw	222
  5475  05D2  3187  2723  3185   	fcall	_sendI2C
  5476  05D5                     l458:	
  5477                           ;main.c: 200: while (SSP1CON2bits.ACKSTAT == 1);
  5478                           
  5479  05D5  0024               	movlb	4	; select bank4
  5480  05D6  1B16               	btfsc	22,6	;volatile
  5481  05D7  2DD5               	goto	l458
  5482                           
  5483                           ;main.c: 201: sendI2C(0x02);
  5484  05D8  3002               	movlw	2
  5485  05D9  3187  2723  3185   	fcall	_sendI2C
  5486  05DC                     l461:	
  5487                           ;main.c: 202: while (SSP1CON2bits.ACKSTAT == 1);
  5488                           
  5489  05DC  0024               	movlb	4	; select bank4
  5490  05DD  1B16               	btfsc	22,6	;volatile
  5491  05DE  2DDC               	goto	l461
  5492                           
  5493                           ;main.c: 203: re_startI2C();
  5494  05DF  3187  273A  3185   	fcall	_re_startI2C
  5495                           
  5496                           ;main.c: 204: sendI2C(0b11011111);
  5497  05E2  30DF               	movlw	223
  5498  05E3  3187  2723  3185   	fcall	_sendI2C
  5499  05E6                     l464:	
  5500                           ;main.c: 205: while (SSP1CON2bits.ACKSTAT == 1);
  5501                           
  5502  05E6  0024               	movlb	4	; select bank4
  5503  05E7  1B16               	btfsc	22,6	;volatile
  5504  05E8  2DE6               	goto	l464
  5505                           
  5506                           ;main.c: 206: heure = readI2C();
  5507  05E9  3186  26DF  3185   	fcall	_readI2C
  5508  05EC  0020               	movlb	0	; select bank0
  5509  05ED  00A2               	movwf	??_readHr
  5510  05EE  0822               	movf	??_readHr,w
  5511  05EF  00A3               	movwf	readHr@heure
  5512                           
  5513                           ;main.c: 207: sendNoAckI2C();
  5514  05F0  3187  275F  3185   	fcall	_sendNoAckI2C
  5515                           
  5516                           ;main.c: 208: stopI2C();
  5517  05F3  3187  2742         	fcall	_stopI2C
  5518                           
  5519                           ;main.c: 209: return heure;
  5520  05F5  0020               	movlb	0	; select bank0
  5521  05F6  0823               	movf	readHr@heure,w
  5522  05F7  0008               	return
  5523  05F8                     __end_of_readHr:	
  5524                           
  5525                           	psect	text14
  5526  075F                     __ptext14:	
  5527 ;; *************** function _sendNoAckI2C *****************
  5528 ;; Defined at:
  5529 ;;		line 88 in file "i2c.c"
  5530 ;; Parameters:    Size  Location     Type
  5531 ;;		None
  5532 ;; Auto vars:     Size  Location     Type
  5533 ;;		None
  5534 ;; Return value:  Size  Location     Type
  5535 ;;                  1    wreg      void 
  5536 ;; Registers used:
  5537 ;;		wreg, status,2, status,0, pclath, cstack
  5538 ;; Tracked objects:
  5539 ;;		On entry : 0/0
  5540 ;;		On exit  : 0/0
  5541 ;;		Unchanged: 0/0
  5542 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5543 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5544 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5545 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5546 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5547 ;;Total ram usage:        0 bytes
  5548 ;; Hardware stack levels used:    1
  5549 ;; Hardware stack levels required when called:    4
  5550 ;; This function calls:
  5551 ;;		_waitI2C
  5552 ;; This function is called by:
  5553 ;;		_readSec
  5554 ;;		_readMin
  5555 ;;		_readHr
  5556 ;; This function uses a non-reentrant model
  5557 ;;
  5558                           
  5559                           
  5560                           ;psect for function _sendNoAckI2C
  5561  075F                     _sendNoAckI2C:	
  5562                           
  5563                           ;i2c.c: 90: waitI2C();
  5564                           
  5565                           ;incstack = 0
  5566                           ; Regs used in _sendNoAckI2C: [wreg+status,2+status,0+pclath+cstack]
  5567  075F  3187  274A         	fcall	_waitI2C
  5568                           
  5569                           ;i2c.c: 91: SSP1CON2bits.ACKDT = 1;
  5570  0761  0024               	movlb	4	; select bank4
  5571  0762  1696               	bsf	22,5	;volatile
  5572                           
  5573                           ;i2c.c: 92: SSP1CON2bits.ACKEN = 1;
  5574  0763  1616               	bsf	22,4	;volatile
  5575  0764  0008               	return
  5576  0765                     __end_of_sendNoAckI2C:	
  5577                           
  5578                           	psect	text15
  5579  06DF                     __ptext15:	
  5580 ;; *************** function _readI2C *****************
  5581 ;; Defined at:
  5582 ;;		line 64 in file "i2c.c"
  5583 ;; Parameters:    Size  Location     Type
  5584 ;;		None
  5585 ;; Auto vars:     Size  Location     Type
  5586 ;;  temp            1    1[BANK0 ] unsigned char 
  5587 ;; Return value:  Size  Location     Type
  5588 ;;                  1    wreg      unsigned char 
  5589 ;; Registers used:
  5590 ;;		wreg, status,2, status,0, pclath, cstack
  5591 ;; Tracked objects:
  5592 ;;		On entry : 0/0
  5593 ;;		On exit  : 0/0
  5594 ;;		Unchanged: 0/0
  5595 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5596 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5597 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5598 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5599 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5600 ;;Total ram usage:        2 bytes
  5601 ;; Hardware stack levels used:    1
  5602 ;; Hardware stack levels required when called:    4
  5603 ;; This function calls:
  5604 ;;		_waitI2C
  5605 ;; This function is called by:
  5606 ;;		_readSec
  5607 ;;		_readMin
  5608 ;;		_readHr
  5609 ;; This function uses a non-reentrant model
  5610 ;;
  5611                           
  5612                           
  5613                           ;psect for function _readI2C
  5614  06DF                     _readI2C:	
  5615                           
  5616                           ;i2c.c: 66: uint8_t temp;
  5617                           ;i2c.c: 67: waitI2C();
  5618                           
  5619                           ;incstack = 0
  5620                           ; Regs used in _readI2C: [wreg+status,2+status,0+pclath+cstack]
  5621  06DF  3187  274A  3186   	fcall	_waitI2C
  5622                           
  5623                           ;i2c.c: 68: SSP1CON2bits.RCEN = 1;
  5624  06E2  0024               	movlb	4	; select bank4
  5625  06E3  1596               	bsf	22,3	;volatile
  5626                           
  5627                           ;i2c.c: 69: waitI2C();
  5628  06E4  3187  274A  3186   	fcall	_waitI2C
  5629  06E7                     l303:	
  5630                           ;i2c.c: 70: while(SSP1CON2bits.RCEN == 1);
  5631                           
  5632  06E7  0024               	movlb	4	; select bank4
  5633  06E8  1996               	btfsc	22,3	;volatile
  5634  06E9  2EE7               	goto	l303
  5635                           
  5636                           ;i2c.c: 71: temp = SSP1BUF;
  5637  06EA  0811               	movf	17,w	;volatile
  5638  06EB  0020               	movlb	0	; select bank0
  5639  06EC  00A0               	movwf	??_readI2C
  5640  06ED  0820               	movf	??_readI2C,w
  5641  06EE  00A1               	movwf	readI2C@temp
  5642                           
  5643                           ;i2c.c: 73: return temp;
  5644  06EF  0821               	movf	readI2C@temp,w
  5645  06F0  0008               	return
  5646  06F1                     __end_of_readI2C:	
  5647                           
  5648                           	psect	text16
  5649  073A                     __ptext16:	
  5650 ;; *************** function _re_startI2C *****************
  5651 ;; Defined at:
  5652 ;;		line 75 in file "i2c.c"
  5653 ;; Parameters:    Size  Location     Type
  5654 ;;		None
  5655 ;; Auto vars:     Size  Location     Type
  5656 ;;		None
  5657 ;; Return value:  Size  Location     Type
  5658 ;;                  1    wreg      void 
  5659 ;; Registers used:
  5660 ;;		wreg, status,2, status,0, pclath, cstack
  5661 ;; Tracked objects:
  5662 ;;		On entry : 0/0
  5663 ;;		On exit  : 0/0
  5664 ;;		Unchanged: 0/0
  5665 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5666 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5667 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5668 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5669 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5670 ;;Total ram usage:        0 bytes
  5671 ;; Hardware stack levels used:    1
  5672 ;; Hardware stack levels required when called:    4
  5673 ;; This function calls:
  5674 ;;		_waitI2C
  5675 ;; This function is called by:
  5676 ;;		_readSec
  5677 ;;		_readMin
  5678 ;;		_readHr
  5679 ;; This function uses a non-reentrant model
  5680 ;;
  5681                           
  5682                           
  5683                           ;psect for function _re_startI2C
  5684  073A                     _re_startI2C:	
  5685                           
  5686                           ;i2c.c: 77: waitI2C();
  5687                           
  5688                           ;incstack = 0
  5689                           ; Regs used in _re_startI2C: [wreg+status,2+status,0+pclath+cstack]
  5690  073A  3187  274A  3187   	fcall	_waitI2C
  5691                           
  5692                           ;i2c.c: 78: SSP1CON2bits.RSEN = 1;
  5693  073D  0024               	movlb	4	; select bank4
  5694  073E  1496               	bsf	22,1	;volatile
  5695  073F                     l309:	
  5696                           ;i2c.c: 79: while(SSP1CON2bits.RSEN == 1);
  5697                           
  5698  073F  1C96               	btfss	22,1	;volatile
  5699  0740  0008               	return
  5700  0741  2F3F               	goto	l309
  5701  0742                     __end_of_re_startI2C:	
  5702                           
  5703                           	psect	text17
  5704  0661                     __ptext17:	
  5705 ;; *************** function _changeHeure *****************
  5706 ;; Defined at:
  5707 ;;		line 152 in file "main.c"
  5708 ;; Parameters:    Size  Location     Type
  5709 ;;  heure           1    wreg     unsigned char 
  5710 ;; Auto vars:     Size  Location     Type
  5711 ;;  heure           1    1[BANK0 ] unsigned char 
  5712 ;; Return value:  Size  Location     Type
  5713 ;;                  1    wreg      void 
  5714 ;; Registers used:
  5715 ;;		wreg, status,2, status,0, pclath, cstack
  5716 ;; Tracked objects:
  5717 ;;		On entry : 0/0
  5718 ;;		On exit  : 0/0
  5719 ;;		Unchanged: 0/0
  5720 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5721 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5722 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5723 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5724 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5725 ;;Total ram usage:        1 bytes
  5726 ;; Hardware stack levels used:    1
  5727 ;; Hardware stack levels required when called:    5
  5728 ;; This function calls:
  5729 ;;		_sendI2C
  5730 ;;		_startI2C
  5731 ;;		_stopI2C
  5732 ;; This function is called by:
  5733 ;;		_incrHeure
  5734 ;; This function uses a non-reentrant model
  5735 ;;
  5736                           
  5737                           
  5738                           ;psect for function _changeHeure
  5739  0661                     _changeHeure:	
  5740                           
  5741                           ;incstack = 0
  5742                           ; Regs used in _changeHeure: [wreg+status,2+status,0+pclath+cstack]
  5743                           ;changeHeure@heure stored from wreg
  5744  0661  0020               	movlb	0	; select bank0
  5745  0662  00A1               	movwf	changeHeure@heure
  5746                           
  5747                           ;main.c: 154: startI2C();
  5748  0663  3187  2731  3186   	fcall	_startI2C
  5749                           
  5750                           ;main.c: 155: sendI2C(0b11011110);
  5751  0666  30DE               	movlw	222
  5752  0667  3187  2723  3186   	fcall	_sendI2C
  5753  066A                     l422:	
  5754                           ;main.c: 156: while (SSP1CON2bits.ACKSTAT == 1);
  5755                           
  5756  066A  0024               	movlb	4	; select bank4
  5757  066B  1B16               	btfsc	22,6	;volatile
  5758  066C  2E6A               	goto	l422
  5759                           
  5760                           ;main.c: 157: sendI2C(0x02);
  5761  066D  3002               	movlw	2
  5762  066E  3187  2723  3186   	fcall	_sendI2C
  5763  0671                     l425:	
  5764                           ;main.c: 158: while (SSP1CON2bits.ACKSTAT == 1);
  5765                           
  5766  0671  0024               	movlb	4	; select bank4
  5767  0672  1B16               	btfsc	22,6	;volatile
  5768  0673  2E71               	goto	l425
  5769                           
  5770                           ;main.c: 159: sendI2C(heure);
  5771  0674  0020               	movlb	0	; select bank0
  5772  0675  0821               	movf	changeHeure@heure,w
  5773  0676  3187  2723  3186   	fcall	_sendI2C
  5774  0679                     l428:	
  5775                           ;main.c: 160: while (SSP1CON2bits.ACKSTAT == 1);
  5776                           
  5777  0679  0024               	movlb	4	; select bank4
  5778  067A  1B16               	btfsc	22,6	;volatile
  5779  067B  2E79               	goto	l428
  5780                           
  5781                           ;main.c: 161: stopI2C();
  5782  067C  3187  2742         	fcall	_stopI2C
  5783  067E  0008               	return
  5784  067F                     __end_of_changeHeure:	
  5785                           
  5786                           	psect	text18
  5787  0742                     __ptext18:	
  5788 ;; *************** function _stopI2C *****************
  5789 ;; Defined at:
  5790 ;;		line 50 in file "i2c.c"
  5791 ;; Parameters:    Size  Location     Type
  5792 ;;		None
  5793 ;; Auto vars:     Size  Location     Type
  5794 ;;		None
  5795 ;; Return value:  Size  Location     Type
  5796 ;;                  1    wreg      void 
  5797 ;; Registers used:
  5798 ;;		wreg, status,2, status,0, pclath, cstack
  5799 ;; Tracked objects:
  5800 ;;		On entry : 0/0
  5801 ;;		On exit  : 0/0
  5802 ;;		Unchanged: 0/0
  5803 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5804 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5805 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5806 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5807 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5808 ;;Total ram usage:        0 bytes
  5809 ;; Hardware stack levels used:    1
  5810 ;; Hardware stack levels required when called:    4
  5811 ;; This function calls:
  5812 ;;		_waitI2C
  5813 ;; This function is called by:
  5814 ;;		_writeInst
  5815 ;;		_writeData
  5816 ;;		_initRTC
  5817 ;;		_changeMin
  5818 ;;		_changeHeure
  5819 ;;		_readSec
  5820 ;;		_readMin
  5821 ;;		_readHr
  5822 ;; This function uses a non-reentrant model
  5823 ;;
  5824                           
  5825                           
  5826                           ;psect for function _stopI2C
  5827  0742                     _stopI2C:	
  5828                           
  5829                           ;i2c.c: 52: waitI2C();
  5830                           
  5831                           ;incstack = 0
  5832                           ; Regs used in _stopI2C: [wreg+status,2+status,0+pclath+cstack]
  5833  0742  3187  274A  3187   	fcall	_waitI2C
  5834                           
  5835                           ;i2c.c: 53: SSP1CON2bits.PEN = 1;
  5836  0745  0024               	movlb	4	; select bank4
  5837  0746  1516               	bsf	22,2	;volatile
  5838  0747                     l291:	
  5839                           ;i2c.c: 54: while(SSP1CON2bits.PEN == 1);
  5840                           
  5841  0747  1D16               	btfss	22,2	;volatile
  5842  0748  0008               	return
  5843  0749  2F47               	goto	l291
  5844  074A                     __end_of_stopI2C:	
  5845                           
  5846                           	psect	text19
  5847  0731                     __ptext19:	
  5848 ;; *************** function _startI2C *****************
  5849 ;; Defined at:
  5850 ;;		line 40 in file "i2c.c"
  5851 ;; Parameters:    Size  Location     Type
  5852 ;;		None
  5853 ;; Auto vars:     Size  Location     Type
  5854 ;;		None
  5855 ;; Return value:  Size  Location     Type
  5856 ;;                  1    wreg      void 
  5857 ;; Registers used:
  5858 ;;		wreg, status,2, status,0, pclath, cstack
  5859 ;; Tracked objects:
  5860 ;;		On entry : 0/0
  5861 ;;		On exit  : 0/0
  5862 ;;		Unchanged: 0/0
  5863 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5864 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5865 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5866 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5867 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5868 ;;Total ram usage:        0 bytes
  5869 ;; Hardware stack levels used:    1
  5870 ;; Hardware stack levels required when called:    4
  5871 ;; This function calls:
  5872 ;;		_waitI2C
  5873 ;; This function is called by:
  5874 ;;		_writeInst
  5875 ;;		_writeData
  5876 ;;		_initRTC
  5877 ;;		_changeMin
  5878 ;;		_changeHeure
  5879 ;;		_readSec
  5880 ;;		_readMin
  5881 ;;		_readHr
  5882 ;; This function uses a non-reentrant model
  5883 ;;
  5884                           
  5885                           
  5886                           ;psect for function _startI2C
  5887  0731                     _startI2C:	
  5888                           
  5889                           ;i2c.c: 42: waitI2C();
  5890                           
  5891                           ;incstack = 0
  5892                           ; Regs used in _startI2C: [wreg+status,2+status,0+pclath+cstack]
  5893  0731  3187  274A  3187   	fcall	_waitI2C
  5894                           
  5895                           ;i2c.c: 43: SSP1CON2=0b00000001;
  5896  0734  3001               	movlw	1
  5897  0735  0024               	movlb	4	; select bank4
  5898  0736  0096               	movwf	22	;volatile
  5899  0737                     l279:	
  5900                           ;i2c.c: 44: while(SSP1CON2bits.SEN == 1);
  5901                           
  5902  0737  1C16               	btfss	22,0	;volatile
  5903  0738  0008               	return
  5904  0739  2F37               	goto	l279
  5905  073A                     __end_of_startI2C:	
  5906                           
  5907                           	psect	text20
  5908  0723                     __ptext20:	
  5909 ;; *************** function _sendI2C *****************
  5910 ;; Defined at:
  5911 ;;		line 56 in file "i2c.c"
  5912 ;; Parameters:    Size  Location     Type
  5913 ;;  data            1    wreg     unsigned char 
  5914 ;; Auto vars:     Size  Location     Type
  5915 ;;  data            1    0[BANK0 ] unsigned char 
  5916 ;; Return value:  Size  Location     Type
  5917 ;;                  1    wreg      void 
  5918 ;; Registers used:
  5919 ;;		wreg, status,2, status,0, pclath, cstack
  5920 ;; Tracked objects:
  5921 ;;		On entry : 0/0
  5922 ;;		On exit  : 0/0
  5923 ;;		Unchanged: 0/0
  5924 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5925 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5926 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5927 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5928 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5929 ;;Total ram usage:        1 bytes
  5930 ;; Hardware stack levels used:    1
  5931 ;; Hardware stack levels required when called:    4
  5932 ;; This function calls:
  5933 ;;		_waitI2C
  5934 ;; This function is called by:
  5935 ;;		_writeInst
  5936 ;;		_writeData
  5937 ;;		_initRTC
  5938 ;;		_changeMin
  5939 ;;		_changeHeure
  5940 ;;		_readSec
  5941 ;;		_readMin
  5942 ;;		_readHr
  5943 ;; This function uses a non-reentrant model
  5944 ;;
  5945                           
  5946                           
  5947                           ;psect for function _sendI2C
  5948  0723                     _sendI2C:	
  5949                           
  5950                           ;incstack = 0
  5951                           ; Regs used in _sendI2C: [wreg+status,2+status,0+pclath+cstack]
  5952                           ;sendI2C@data stored from wreg
  5953  0723  0020               	movlb	0	; select bank0
  5954  0724  00A0               	movwf	sendI2C@data
  5955                           
  5956                           ;i2c.c: 58: waitI2C();
  5957  0725  3187  274A  3187   	fcall	_waitI2C
  5958                           
  5959                           ;i2c.c: 59: SSP1BUF = data;
  5960  0728  0020               	movlb	0	; select bank0
  5961  0729  0820               	movf	sendI2C@data,w
  5962  072A  0024               	movlb	4	; select bank4
  5963  072B  0091               	movwf	17	;volatile
  5964                           
  5965                           ;i2c.c: 60: PIR1bits.SSP1IF = 0;
  5966  072C  0020               	movlb	0	; select bank0
  5967  072D  1190               	bcf	16,3	;volatile
  5968  072E                     l297:	
  5969                           ;i2c.c: 61: while(PIR1bits.SSP1IF == 0);
  5970                           
  5971  072E  1990               	btfsc	16,3	;volatile
  5972  072F  0008               	return
  5973  0730  2F2E               	goto	l297
  5974  0731                     __end_of_sendI2C:	
  5975                           
  5976                           	psect	text21
  5977  074A                     __ptext21:	
  5978 ;; *************** function _waitI2C *****************
  5979 ;; Defined at:
  5980 ;;		line 46 in file "i2c.c"
  5981 ;; Parameters:    Size  Location     Type
  5982 ;;		None
  5983 ;; Auto vars:     Size  Location     Type
  5984 ;;		None
  5985 ;; Return value:  Size  Location     Type
  5986 ;;                  1    wreg      void 
  5987 ;; Registers used:
  5988 ;;		wreg, status,2
  5989 ;; Tracked objects:
  5990 ;;		On entry : 0/0
  5991 ;;		On exit  : 0/0
  5992 ;;		Unchanged: 0/0
  5993 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5994 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5995 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5996 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5997 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5998 ;;Total ram usage:        0 bytes
  5999 ;; Hardware stack levels used:    1
  6000 ;; Hardware stack levels required when called:    3
  6001 ;; This function calls:
  6002 ;;		Nothing
  6003 ;; This function is called by:
  6004 ;;		_startI2C
  6005 ;;		_stopI2C
  6006 ;;		_sendI2C
  6007 ;;		_readI2C
  6008 ;;		_re_startI2C
  6009 ;;		_sendNoAckI2C
  6010 ;;		_sendAckI2C
  6011 ;; This function uses a non-reentrant model
  6012 ;;
  6013                           
  6014                           
  6015                           ;psect for function _waitI2C
  6016  074A                     _waitI2C:	
  6017  074A                     l285:	
  6018                           ;i2c.c: 48: while ((SSP1STAT & 0x04) || (SSP1CON2 & 0x1F));
  6019                           
  6020                           ;incstack = 0
  6021                           ; Regs used in _waitI2C: [wreg+status,2]
  6022                           
  6023  074A  0024               	movlb	4	; select bank4
  6024  074B  1914               	btfsc	20,2	;volatile
  6025  074C  2F4A               	goto	l285
  6026  074D  0816               	movf	22,w	;volatile
  6027  074E  391F               	andlw	31
  6028  074F  1903               	btfsc	3,2
  6029  0750  0008               	return
  6030  0751  2F4A               	goto	l285
  6031  0752                     __end_of_waitI2C:	
  6032                           
  6033                           	psect	text22
  6034  06B5                     __ptext22:	
  6035 ;; *************** function _bitExtracted *****************
  6036 ;; Defined at:
  6037 ;;		line 79 in file "main.c"
  6038 ;; Parameters:    Size  Location     Type
  6039 ;;  number          1    wreg     unsigned char 
  6040 ;;  k               1    0[BANK0 ] unsigned char 
  6041 ;;  p               1    1[BANK0 ] unsigned char 
  6042 ;; Auto vars:     Size  Location     Type
  6043 ;;  number          1    4[BANK0 ] unsigned char 
  6044 ;; Return value:  Size  Location     Type
  6045 ;;                  1    wreg      unsigned char 
  6046 ;; Registers used:
  6047 ;;		wreg, status,2, status,0
  6048 ;; Tracked objects:
  6049 ;;		On entry : 0/0
  6050 ;;		On exit  : 0/0
  6051 ;;		Unchanged: 0/0
  6052 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6053 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6054 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6055 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6056 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6057 ;;Total ram usage:        5 bytes
  6058 ;; Hardware stack levels used:    1
  6059 ;; Hardware stack levels required when called:    3
  6060 ;; This function calls:
  6061 ;;		Nothing
  6062 ;; This function is called by:
  6063 ;;		_printReglageH
  6064 ;;		_incrMin
  6065 ;;		_incrHeure
  6066 ;;		_main
  6067 ;; This function uses a non-reentrant model
  6068 ;;
  6069                           
  6070                           
  6071                           ;psect for function _bitExtracted
  6072  06B5                     _bitExtracted:	
  6073                           
  6074                           ;incstack = 0
  6075                           ; Regs used in _bitExtracted: [wreg+status,2+status,0]
  6076                           ;bitExtracted@number stored from wreg
  6077  06B5  0020               	movlb	0	; select bank0
  6078  06B6  00A4               	movwf	bitExtracted@number
  6079                           
  6080                           ;main.c: 80: return (((1 << k) - 1) & (number >> (p - 1)));
  6081  06B7  0824               	movf	bitExtracted@number,w
  6082  06B8  00A2               	movwf	??_bitExtracted
  6083  06B9  0821               	movf	bitExtracted@p,w
  6084  06BA  3EFF               	addlw	-1
  6085  06BB  0A89               	incf	9,f
  6086  06BC  2EBE               	goto	u1824
  6087  06BD                     u1825:	
  6088  06BD  36A2               	lsrf	??_bitExtracted,f
  6089  06BE                     u1824:	
  6090  06BE  0B89               	decfsz	9,f
  6091  06BF  2EBD               	goto	u1825
  6092  06C0  3001               	movlw	1
  6093  06C1  00A3               	movwf	??_bitExtracted+1
  6094  06C2  0A20               	incf	bitExtracted@k,w
  6095  06C3  2EC5               	goto	u1834
  6096  06C4                     u1835:	
  6097  06C4  35A3               	lslf	??_bitExtracted+1,f
  6098  06C5                     u1834:	
  6099  06C5  0B89               	decfsz	9,f
  6100  06C6  2EC4               	goto	u1835
  6101  06C7  0823               	movf	??_bitExtracted+1,w
  6102  06C8  3EFF               	addlw	255
  6103  06C9  0522               	andwf	??_bitExtracted,w
  6104  06CA  0008               	return
  6105  06CB                     __end_of_bitExtracted:	
  6106                           
  6107                           	psect	text23
  6108  067F                     __ptext23:	
  6109 ;; *************** function _convertFromBcd *****************
  6110 ;; Defined at:
  6111 ;;		line 83 in file "main.c"
  6112 ;; Parameters:    Size  Location     Type
  6113 ;;  byteBCD         1    wreg     unsigned char 
  6114 ;; Auto vars:     Size  Location     Type
  6115 ;;  byteBCD         1    8[BANK0 ] unsigned char 
  6116 ;;  byteLSB         1    7[BANK0 ] unsigned char 
  6117 ;;  byteMSB         1    6[BANK0 ] unsigned char 
  6118 ;; Return value:  Size  Location     Type
  6119 ;;                  1    wreg      unsigned char 
  6120 ;; Registers used:
  6121 ;;		wreg, status,2, status,0, pclath, cstack
  6122 ;; Tracked objects:
  6123 ;;		On entry : 0/0
  6124 ;;		On exit  : 0/0
  6125 ;;		Unchanged: 0/0
  6126 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6127 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6128 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6129 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6130 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6131 ;;Total ram usage:        5 bytes
  6132 ;; Hardware stack levels used:    1
  6133 ;; Hardware stack levels required when called:    4
  6134 ;; This function calls:
  6135 ;;		___bmul
  6136 ;; This function is called by:
  6137 ;;		_main
  6138 ;; This function uses a non-reentrant model
  6139 ;;
  6140                           
  6141                           
  6142                           ;psect for function _convertFromBcd
  6143  067F                     _convertFromBcd:	
  6144                           
  6145                           ;incstack = 0
  6146                           ; Regs used in _convertFromBcd: [wreg+status,2+status,0+pclath+cstack]
  6147                           ;convertFromBcd@byteBCD stored from wreg
  6148  067F  0020               	movlb	0	; select bank0
  6149  0680  00A8               	movwf	convertFromBcd@byteBCD
  6150                           
  6151                           ;main.c: 84: uint8_t byteMSB = 0;
  6152  0681  01A6               	clrf	convertFromBcd@byteMSB
  6153                           
  6154                           ;main.c: 85: uint8_t byteLSB = 0;
  6155  0682  01A7               	clrf	convertFromBcd@byteLSB
  6156                           
  6157                           ;main.c: 86: byteMSB = (byteBCD & 0b11110000) >> 4;
  6158  0683  0828               	movf	convertFromBcd@byteBCD,w
  6159  0684  00A4               	movwf	??_convertFromBcd
  6160  0685  3004               	movlw	4
  6161  0686                     u2095:	
  6162  0686  36A4               	lsrf	??_convertFromBcd,f
  6163  0687  0B89               	decfsz	9,f
  6164  0688  2E86               	goto	u2095
  6165  0689  0824               	movf	??_convertFromBcd,w
  6166  068A  390F               	andlw	15
  6167  068B  00A5               	movwf	??_convertFromBcd+1
  6168  068C  0825               	movf	??_convertFromBcd+1,w
  6169  068D  00A6               	movwf	convertFromBcd@byteMSB
  6170                           
  6171                           ;main.c: 87: byteLSB = (byteBCD & 0b00001111);
  6172  068E  0828               	movf	convertFromBcd@byteBCD,w
  6173  068F  390F               	andlw	15
  6174  0690  00A4               	movwf	??_convertFromBcd
  6175  0691  0824               	movf	??_convertFromBcd,w
  6176  0692  00A7               	movwf	convertFromBcd@byteLSB
  6177                           
  6178                           ;main.c: 88: return ((byteMSB * 10) + byteLSB);
  6179  0693  300A               	movlw	10
  6180  0694  00A4               	movwf	??_convertFromBcd
  6181  0695  0824               	movf	??_convertFromBcd,w
  6182  0696  00A0               	movwf	___bmul@multiplicand
  6183  0697  0826               	movf	convertFromBcd@byteMSB,w
  6184  0698  3186  26F1         	fcall	___bmul
  6185  069A  0020               	movlb	0	; select bank0
  6186  069B  0727               	addwf	convertFromBcd@byteLSB,w
  6187  069C  0008               	return
  6188  069D                     __end_of_convertFromBcd:	
  6189                           
  6190                           	psect	text24
  6191  06F1                     __ptext24:	
  6192 ;; *************** function ___bmul *****************
  6193 ;; Defined at:
  6194 ;;		line 4 in file "/opt/microchip/xc8/v1.45/sources/common/Umul8.c"
  6195 ;; Parameters:    Size  Location     Type
  6196 ;;  multiplier      1    wreg     unsigned char 
  6197 ;;  multiplicand    1    0[BANK0 ] unsigned char 
  6198 ;; Auto vars:     Size  Location     Type
  6199 ;;  multiplier      1    3[BANK0 ] unsigned char 
  6200 ;;  product         1    2[BANK0 ] unsigned char 
  6201 ;; Return value:  Size  Location     Type
  6202 ;;                  1    wreg      unsigned char 
  6203 ;; Registers used:
  6204 ;;		wreg, status,2, status,0
  6205 ;; Tracked objects:
  6206 ;;		On entry : 0/0
  6207 ;;		On exit  : 0/0
  6208 ;;		Unchanged: 0/0
  6209 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6210 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6211 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6212 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6213 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6214 ;;Total ram usage:        4 bytes
  6215 ;; Hardware stack levels used:    1
  6216 ;; Hardware stack levels required when called:    3
  6217 ;; This function calls:
  6218 ;;		Nothing
  6219 ;; This function is called by:
  6220 ;;		_convertFromBcd
  6221 ;; This function uses a non-reentrant model
  6222 ;;
  6223                           
  6224                           
  6225                           ;psect for function ___bmul
  6226  06F1                     ___bmul:	
  6227                           
  6228                           ;incstack = 0
  6229                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  6230                           ;___bmul@multiplier stored from wreg
  6231  06F1  0020               	movlb	0	; select bank0
  6232  06F2  00A3               	movwf	___bmul@multiplier
  6233  06F3  01A2               	clrf	___bmul@product
  6234  06F4                     l2712:	
  6235  06F4  1C23               	btfss	___bmul@multiplier,0
  6236  06F5  2EFA               	goto	l2716
  6237  06F6  0820               	movf	___bmul@multiplicand,w
  6238  06F7  00A1               	movwf	??___bmul
  6239  06F8  0821               	movf	??___bmul,w
  6240  06F9  07A2               	addwf	___bmul@product,f
  6241  06FA                     l2716:	
  6242  06FA  1003               	clrc
  6243  06FB  0DA0               	rlf	___bmul@multiplicand,f
  6244  06FC  1003               	clrc
  6245  06FD  0CA3               	rrf	___bmul@multiplier,f
  6246  06FE  0823               	movf	___bmul@multiplier,w
  6247  06FF  1D03               	btfss	3,2
  6248  0700  2EF4               	goto	l2712
  6249  0701  0822               	movf	___bmul@product,w
  6250  0702  0008               	return
  6251  0703                     __end_of___bmul:	
  6252                           
  6253                           	psect	text25
  6254  0765                     __ptext25:	
  6255 ;; *************** function _SYSTEM_Initialize *****************
  6256 ;; Defined at:
  6257 ;;		line 50 in file "mcc_generated_files/mcc.c"
  6258 ;; Parameters:    Size  Location     Type
  6259 ;;		None
  6260 ;; Auto vars:     Size  Location     Type
  6261 ;;		None
  6262 ;; Return value:  Size  Location     Type
  6263 ;;                  1    wreg      void 
  6264 ;; Registers used:
  6265 ;;		wreg, status,2, status,0, pclath, cstack
  6266 ;; Tracked objects:
  6267 ;;		On entry : 0/0
  6268 ;;		On exit  : 0/0
  6269 ;;		Unchanged: 0/0
  6270 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6271 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6272 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6273 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6274 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6275 ;;Total ram usage:        0 bytes
  6276 ;; Hardware stack levels used:    1
  6277 ;; Hardware stack levels required when called:    4
  6278 ;; This function calls:
  6279 ;;		_OSCILLATOR_Initialize
  6280 ;;		_PIN_MANAGER_Initialize
  6281 ;; This function is called by:
  6282 ;;		_main
  6283 ;; This function uses a non-reentrant model
  6284 ;;
  6285                           
  6286                           
  6287                           ;psect for function _SYSTEM_Initialize
  6288  0765                     _SYSTEM_Initialize:	
  6289                           
  6290                           ;mcc.c: 52: PIN_MANAGER_Initialize();
  6291                           
  6292                           ;incstack = 0
  6293                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  6294  0765  3185  25F8  3187   	fcall	_PIN_MANAGER_Initialize
  6295                           
  6296                           ;mcc.c: 53: OSCILLATOR_Initialize();
  6297  0768  3187  2752         	fcall	_OSCILLATOR_Initialize
  6298  076A  0008               	return
  6299  076B                     __end_of_SYSTEM_Initialize:	
  6300                           
  6301                           	psect	text26
  6302  05F8                     __ptext26:	
  6303 ;; *************** function _PIN_MANAGER_Initialize *****************
  6304 ;; Defined at:
  6305 ;;		line 57 in file "mcc_generated_files/pin_manager.c"
  6306 ;; Parameters:    Size  Location     Type
  6307 ;;		None
  6308 ;; Auto vars:     Size  Location     Type
  6309 ;;		None
  6310 ;; Return value:  Size  Location     Type
  6311 ;;                  1    wreg      void 
  6312 ;; Registers used:
  6313 ;;		wreg, status,2
  6314 ;; Tracked objects:
  6315 ;;		On entry : 0/0
  6316 ;;		On exit  : 0/0
  6317 ;;		Unchanged: 0/0
  6318 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6319 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6320 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6321 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6322 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6323 ;;Total ram usage:        0 bytes
  6324 ;; Hardware stack levels used:    1
  6325 ;; Hardware stack levels required when called:    3
  6326 ;; This function calls:
  6327 ;;		Nothing
  6328 ;; This function is called by:
  6329 ;;		_SYSTEM_Initialize
  6330 ;; This function uses a non-reentrant model
  6331 ;;
  6332                           
  6333                           
  6334                           ;psect for function _PIN_MANAGER_Initialize
  6335  05F8                     _PIN_MANAGER_Initialize:	
  6336                           
  6337                           ;pin_manager.c: 62: LATA = 0x00;
  6338                           
  6339                           ;incstack = 0
  6340                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
  6341  05F8  0022               	movlb	2	; select bank2
  6342  05F9  018C               	clrf	12	;volatile
  6343                           
  6344                           ;pin_manager.c: 63: LATB = 0x00;
  6345  05FA  018D               	clrf	13	;volatile
  6346                           
  6347                           ;pin_manager.c: 64: LATC = 0x00;
  6348  05FB  018E               	clrf	14	;volatile
  6349                           
  6350                           ;pin_manager.c: 69: TRISA = 0x37;
  6351  05FC  3037               	movlw	55
  6352  05FD  0021               	movlb	1	; select bank1
  6353  05FE  008C               	movwf	12	;volatile
  6354                           
  6355                           ;pin_manager.c: 70: TRISB = 0xF0;
  6356  05FF  30F0               	movlw	240
  6357  0600  008D               	movwf	13	;volatile
  6358                           
  6359                           ;pin_manager.c: 71: TRISC = 0xFF;
  6360  0601  30FF               	movlw	255
  6361  0602  008E               	movwf	14	;volatile
  6362                           
  6363                           ;pin_manager.c: 76: ANSELC = 0xC7;
  6364  0603  30C7               	movlw	199
  6365  0604  0023               	movlb	3	; select bank3
  6366  0605  008E               	movwf	14	;volatile
  6367                           
  6368                           ;pin_manager.c: 77: ANSELB = 0xA0;
  6369  0606  30A0               	movlw	160
  6370  0607  008D               	movwf	13	;volatile
  6371                           
  6372                           ;pin_manager.c: 78: ANSELA = 0x17;
  6373  0608  3017               	movlw	23
  6374  0609  008C               	movwf	12	;volatile
  6375                           
  6376                           ;pin_manager.c: 83: WPUB = 0x00;
  6377  060A  0024               	movlb	4	; select bank4
  6378  060B  018D               	clrf	13	;volatile
  6379                           
  6380                           ;pin_manager.c: 84: WPUA = 0x00;
  6381  060C  018C               	clrf	12	;volatile
  6382                           
  6383                           ;pin_manager.c: 85: WPUC = 0x1C;
  6384  060D  301C               	movlw	28
  6385  060E  008E               	movwf	14	;volatile
  6386                           
  6387                           ;pin_manager.c: 86: OPTION_REGbits.nWPUEN = 0;
  6388  060F  0021               	movlb	1	; select bank1
  6389  0610  1395               	bcf	21,7	;volatile
  6390                           
  6391                           ;pin_manager.c: 91: ODCONA = 0x00;
  6392  0611  0025               	movlb	5	; select bank5
  6393  0612  018C               	clrf	12	;volatile
  6394                           
  6395                           ;pin_manager.c: 92: ODCONB = 0x00;
  6396  0613  018D               	clrf	13	;volatile
  6397                           
  6398                           ;pin_manager.c: 93: ODCONC = 0x00;
  6399  0614  018E               	clrf	14	;volatile
  6400                           
  6401                           ;pin_manager.c: 102: SSPDATPPS = 0x0C;
  6402  0615  300C               	movlw	12
  6403  0616  003C               	movlb	28	; select bank28
  6404  0617  00A1               	movwf	33	;volatile
  6405                           
  6406                           ;pin_manager.c: 103: RB6PPS = 0x10;
  6407  0618  3010               	movlw	16
  6408  0619  003D               	movlb	29	; select bank29
  6409  061A  009E               	movwf	30	;volatile
  6410                           
  6411                           ;pin_manager.c: 104: RB4PPS = 0x11;
  6412  061B  3011               	movlw	17
  6413  061C  009C               	movwf	28	;volatile
  6414                           
  6415                           ;pin_manager.c: 105: SSPCLKPPS = 0x0E;
  6416  061D  300E               	movlw	14
  6417  061E  003C               	movlb	28	; select bank28
  6418  061F  00A0               	movwf	32	;volatile
  6419  0620  0008               	return
  6420  0621                     __end_of_PIN_MANAGER_Initialize:	
  6421                           
  6422                           	psect	text27
  6423  0752                     __ptext27:	
  6424 ;; *************** function _OSCILLATOR_Initialize *****************
  6425 ;; Defined at:
  6426 ;;		line 57 in file "mcc_generated_files/mcc.c"
  6427 ;; Parameters:    Size  Location     Type
  6428 ;;		None
  6429 ;; Auto vars:     Size  Location     Type
  6430 ;;		None
  6431 ;; Return value:  Size  Location     Type
  6432 ;;                  1    wreg      void 
  6433 ;; Registers used:
  6434 ;;		wreg, status,2
  6435 ;; Tracked objects:
  6436 ;;		On entry : 0/0
  6437 ;;		On exit  : 0/0
  6438 ;;		Unchanged: 0/0
  6439 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6440 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6441 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6442 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6443 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6444 ;;Total ram usage:        0 bytes
  6445 ;; Hardware stack levels used:    1
  6446 ;; Hardware stack levels required when called:    3
  6447 ;; This function calls:
  6448 ;;		Nothing
  6449 ;; This function is called by:
  6450 ;;		_SYSTEM_Initialize
  6451 ;; This function uses a non-reentrant model
  6452 ;;
  6453                           
  6454                           
  6455                           ;psect for function _OSCILLATOR_Initialize
  6456  0752                     _OSCILLATOR_Initialize:	
  6457                           
  6458                           ;mcc.c: 60: OSCCON = 0x7A;
  6459                           
  6460                           ;incstack = 0
  6461                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  6462  0752  307A               	movlw	122
  6463  0753  0021               	movlb	1	; select bank1
  6464  0754  0099               	movwf	25	;volatile
  6465                           
  6466                           ;mcc.c: 62: OSCTUNE = 0x00;
  6467  0755  0198               	clrf	24	;volatile
  6468                           
  6469                           ;mcc.c: 64: BORCON = 0x00;
  6470  0756  0022               	movlb	2	; select bank2
  6471  0757  0196               	clrf	22	;volatile
  6472  0758  0008               	return
  6473  0759                     __end_of_OSCILLATOR_Initialize:	
  6474                           
  6475                           	psect	intentry
  6476  0004                     __pintentry:	
  6477 ;; *************** function _INTERRUPT_InterruptManager *****************
  6478 ;; Defined at:
  6479 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
  6480 ;; Parameters:    Size  Location     Type
  6481 ;;		None
  6482 ;; Auto vars:     Size  Location     Type
  6483 ;;		None
  6484 ;; Return value:  Size  Location     Type
  6485 ;;                  1    wreg      void 
  6486 ;; Registers used:
  6487 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6488 ;; Tracked objects:
  6489 ;;		On entry : 0/0
  6490 ;;		On exit  : 0/0
  6491 ;;		Unchanged: 0/0
  6492 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6493 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6494 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6495 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6496 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6497 ;;Total ram usage:        1 bytes
  6498 ;; Hardware stack levels used:    1
  6499 ;; Hardware stack levels required when called:    2
  6500 ;; This function calls:
  6501 ;;		_I2C_BusCollisionISR
  6502 ;;		_I2C_ISR
  6503 ;; This function is called by:
  6504 ;;		Interrupt level 1
  6505 ;; This function uses a non-reentrant model
  6506 ;;
  6507                           
  6508  0004                     _INTERRUPT_InterruptManager:	
  6509                           
  6510                           ;incstack = 0
  6511  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  6512                           
  6513                           ; Regs used in _INTERRUPT_InterruptManager: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6514  0005  3180               	pagesel	$
  6515  0006  0020               	movlb	0	; select bank0
  6516  0007  087F               	movf	127,w
  6517  0008  00FB               	movwf	??_INTERRUPT_InterruptManager
  6518                           
  6519                           ;interrupt_manager.c: 55: if(INTCONbits.PEIE == 1)
  6520  0009  1F0B               	btfss	11,6	;volatile
  6521  000A  281D               	goto	i1l179
  6522                           
  6523                           ;interrupt_manager.c: 56: {
  6524                           ;interrupt_manager.c: 57: if(PIE2bits.BCL1IE == 1 && PIR2bits.BCL1IF == 1)
  6525  000B  0021               	movlb	1	; select bank1
  6526  000C  1D91               	btfss	17,3	;volatile
  6527  000D  2815               	goto	i1l174
  6528  000E  0020               	movlb	0	; select bank0
  6529  000F  1D91               	btfss	17,3	;volatile
  6530  0010  2815               	goto	i1l174
  6531                           
  6532                           ;interrupt_manager.c: 58: {
  6533                           ;interrupt_manager.c: 59: I2C_BusCollisionISR();
  6534  0011  3187  276F  3180   	fcall	_I2C_BusCollisionISR
  6535                           
  6536                           ;interrupt_manager.c: 60: }
  6537  0014  281D               	goto	i1l179
  6538  0015                     i1l174:	
  6539                           
  6540                           ;interrupt_manager.c: 61: else if(PIE1bits.SSP1IE == 1 && PIR1bits.SSP1IF == 1)
  6541  0015  0021               	movlb	1	; select bank1
  6542  0016  1D90               	btfss	16,3	;volatile
  6543  0017  281D               	goto	i1l179
  6544  0018  0020               	movlb	0	; select bank0
  6545  0019  1D90               	btfss	16,3	;volatile
  6546  001A  281D               	goto	i1l179
  6547                           
  6548                           ;interrupt_manager.c: 62: {
  6549                           ;interrupt_manager.c: 63: I2C_ISR();
  6550  001B  3181  2193         	fcall	_I2C_ISR
  6551  001D                     i1l179:	
  6552                           ;interrupt_manager.c: 70: else
  6553                           ;interrupt_manager.c: 71: {
  6554                           
  6555                           ;interrupt_manager.c: 68: }
  6556                           ;interrupt_manager.c: 69: }
  6557                           
  6558                           ;interrupt_manager.c: 65: else
  6559                           ;interrupt_manager.c: 66: {
  6560                           
  6561                           ;interrupt_manager.c: 64: }
  6562                           
  6563  001D  087B               	movf	??_INTERRUPT_InterruptManager,w
  6564  001E  0020               	movlb	0	; select bank0
  6565  001F  00FF               	movwf	127
  6566  0020  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  6567  0021  0009               	retfie
  6568  0022                     __end_of_INTERRUPT_InterruptManager:	
  6569                           
  6570                           	psect	text29
  6571  0193                     __ptext29:	
  6572 ;; *************** function _I2C_ISR *****************
  6573 ;; Defined at:
  6574 ;;		line 235 in file "mcc_generated_files/i2c.c"
  6575 ;; Parameters:    Size  Location     Type
  6576 ;;		None
  6577 ;; Auto vars:     Size  Location     Type
  6578 ;;		None
  6579 ;; Return value:  Size  Location     Type
  6580 ;;                  1    wreg      void 
  6581 ;; Registers used:
  6582 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6583 ;; Tracked objects:
  6584 ;;		On entry : 0/0
  6585 ;;		On exit  : 0/0
  6586 ;;		Unchanged: 0/0
  6587 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6588 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6589 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6590 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6591 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6592 ;;Total ram usage:        4 bytes
  6593 ;; Hardware stack levels used:    1
  6594 ;; Hardware stack levels required when called:    1
  6595 ;; This function calls:
  6596 ;;		_I2C_FunctionComplete
  6597 ;;		_I2C_Stop
  6598 ;; This function is called by:
  6599 ;;		_INTERRUPT_InterruptManager
  6600 ;; This function uses a non-reentrant model
  6601 ;;
  6602                           
  6603                           
  6604                           ;psect for function _I2C_ISR
  6605  0193                     _I2C_ISR:	
  6606                           
  6607                           ;i2c.c: 238: static uint8_t *pi2c_buf_ptr;
  6608                           ;i2c.c: 239: static uint16_t i2c_address = 0;
  6609                           ;i2c.c: 240: static uint8_t i2c_bytes_left = 0;
  6610                           ;i2c.c: 241: static uint8_t i2c_10bit_address_restart = 0;
  6611                           ;i2c.c: 243: PIR1bits.SSP1IF = 0;
  6612                           
  6613                           ;incstack = 0
  6614                           ; Regs used in _I2C_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6615  0193  0020               	movlb	0	; select bank0
  6616  0194  1190               	bcf	16,3	;volatile
  6617                           
  6618                           ;i2c.c: 247: if(SSP1CON1bits.WCOL)
  6619  0195  0024               	movlb	4	; select bank4
  6620  0196  1F95               	btfss	21,7	;volatile
  6621  0197  2AB6               	goto	i1l2076
  6622                           
  6623                           ;i2c.c: 248: {
  6624                           ;i2c.c: 250: SSP1CON1bits.WCOL = 0;
  6625  0198  1395               	bcf	21,7	;volatile
  6626                           
  6627                           ;i2c.c: 252: *(p_i2c_current->pTrFlag) = I2C_MESSAGE_FAIL;
  6628  0199  01F3               	clrf	_i2c_state
  6629                           
  6630                           ;i2c.c: 255: p_i2c_current = (0);
  6631  019A  0020               	movlb	0	; select bank0
  6632  019B  01C7               	clrf	_p_i2c_current
  6633                           
  6634                           ;i2c.c: 257: return;
  6635  019C  0008               	return
  6636  019D                     i1l64:	
  6637                           ;i2c.c: 262: {
  6638                           ;i2c.c: 263: case S_MASTER_IDLE:
  6639                           
  6640                           ;i2c.c: 258: }
  6641                           ;i2c.c: 261: switch(i2c_state)
  6642                           
  6643                           
  6644                           ;i2c.c: 265: if(i2c_object.trStatus.s.empty != 1)
  6645  019D  0020               	movlb	0	; select bank0
  6646  019E  18C2               	btfsc	_i2c_object+2,1
  6647  019F  0008               	return
  6648                           
  6649                           ;i2c.c: 266: {
  6650                           ;i2c.c: 268: p_i2c_current = i2c_object.pTrHead;
  6651  01A0  0841               	movf	low ((_i2c_object| 0+1)),w
  6652  01A1  00F7               	movwf	??_I2C_ISR
  6653  01A2  0877               	movf	??_I2C_ISR,w
  6654  01A3  00C7               	movwf	_p_i2c_current
  6655                           
  6656                           ;i2c.c: 269: i2c_trb_count = i2c_object.pTrHead->count;
  6657  01A4  0841               	movf	low ((_i2c_object| 0+1)),w
  6658  01A5  0086               	movwf	6
  6659  01A6  0187               	clrf	7
  6660  01A7  0801               	movf	1,w
  6661  01A8  00F7               	movwf	??_I2C_ISR
  6662  01A9  0877               	movf	??_I2C_ISR,w
  6663  01AA  00F2               	movwf	_i2c_trb_count
  6664                           
  6665                           ;i2c.c: 270: p_i2c_trb_current = i2c_object.pTrHead->ptrb_list;
  6666  01AB  0841               	movf	low ((_i2c_object| 0+1)),w
  6667  01AC  0086               	movwf	6
  6668  01AD  0187               	clrf	7
  6669  01AE  3F41               	moviw [1]fsr1
  6670  01AF  00F1               	movwf	_p_i2c_trb_current
  6671                           
  6672                           ;i2c.c: 272: i2c_object.pTrHead++;
  6673  01B0  3003               	movlw	3
  6674  01B1  00F7               	movwf	??_I2C_ISR
  6675  01B2  0877               	movf	??_I2C_ISR,w
  6676  01B3  07C1               	addwf	low ((_i2c_object| 0+1)),f
  6677                           
  6678                           ;i2c.c: 275: if(i2c_object.pTrHead == (i2c_tr_queue + 1))
  6679  01B4  0841               	movf	low ((_i2c_object| 0+1)),w
  6680  01B5  3A53               	xorlw	(low ((_i2c_tr_queue| 0+3)))& (0+255)
  6681  01B6  1D03               	skipz
  6682  01B7  29BC               	goto	i1l1964
  6683                           
  6684                           ;i2c.c: 276: {
  6685                           ;i2c.c: 278: i2c_object.pTrHead = i2c_tr_queue;
  6686  01B8  3050               	movlw	(low (_i2c_tr_queue| 0))& (0+255)
  6687  01B9  00F7               	movwf	??_I2C_ISR
  6688  01BA  0877               	movf	??_I2C_ISR,w
  6689  01BB  00C1               	movwf	low ((_i2c_object| 0+1))
  6690  01BC                     i1l1964:	
  6691                           
  6692                           ;i2c.c: 279: }
  6693                           ;i2c.c: 283: i2c_object.trStatus.s.full = 0;
  6694  01BC  1042               	bcf	_i2c_object+2,0
  6695                           
  6696                           ;i2c.c: 286: if(i2c_object.pTrHead == i2c_object.pTrTail)
  6697  01BD  0841               	movf	low ((_i2c_object| 0+1)),w
  6698  01BE  0640               	xorwf	_i2c_object,w
  6699  01BF  1903               	btfsc	3,2
  6700                           
  6701                           ;i2c.c: 287: {
  6702                           ;i2c.c: 289: i2c_object.trStatus.s.empty = 1;
  6703  01C0  14C2               	bsf	_i2c_object+2,1
  6704                           
  6705                           ;i2c.c: 290: }
  6706                           ;i2c.c: 293: SSP1CON2bits.SEN = 1;
  6707  01C1  0024               	movlb	4	; select bank4
  6708  01C2  1416               	bsf	22,0	;volatile
  6709                           
  6710                           ;i2c.c: 296: i2c_state = S_MASTER_SEND_ADDR;
  6711  01C3  3002               	movlw	2
  6712  01C4  00F7               	movwf	??_I2C_ISR
  6713  01C5  0877               	movf	??_I2C_ISR,w
  6714  01C6  00F3               	movwf	_i2c_state
  6715                           
  6716                           ;i2c.c: 297: }
  6717                           ;i2c.c: 299: break;
  6718  01C7  0008               	return
  6719  01C8                     i1l69:	
  6720                           ;i2c.c: 301: case S_MASTER_RESTART:
  6721                           
  6722                           
  6723                           ;i2c.c: 306: SSP1CON2bits.RSEN = 1;
  6724  01C8  0024               	movlb	4	; select bank4
  6725  01C9  1496               	bsf	22,1	;volatile
  6726                           
  6727                           ;i2c.c: 309: i2c_state = S_MASTER_SEND_ADDR;
  6728  01CA  3002               	movlw	2
  6729  01CB  00F7               	movwf	??_I2C_ISR
  6730  01CC  0877               	movf	??_I2C_ISR,w
  6731  01CD  00F3               	movwf	_i2c_state
  6732                           
  6733                           ;i2c.c: 311: break;
  6734  01CE  0008               	return
  6735  01CF                     i1l70:	
  6736                           ;i2c.c: 313: case S_MASTER_SEND_ADDR_10BIT_LSB:
  6737                           
  6738                           
  6739                           ;i2c.c: 315: if(SSP1CON2bits.ACKSTAT)
  6740  01CF  0024               	movlb	4	; select bank4
  6741  01D0  1F16               	btfss	22,6	;volatile
  6742  01D1  29DB               	goto	i1l1976
  6743                           
  6744                           ;i2c.c: 316: {
  6745                           ;i2c.c: 317: i2c_object.i2cErrors++;
  6746  01D2  3001               	movlw	1
  6747  01D3  00F7               	movwf	??_I2C_ISR
  6748  01D4  0877               	movf	??_I2C_ISR,w
  6749  01D5  0020               	movlb	0	; select bank0
  6750  01D6  07C4               	addwf	_i2c_object+4,f
  6751                           
  6752                           ;i2c.c: 318: I2C_Stop(I2C_MESSAGE_ADDRESS_NO_ACK);
  6753  01D7  3004               	movlw	4
  6754  01D8  3187  276B         	fcall	_I2C_Stop
  6755                           
  6756                           ;i2c.c: 319: }
  6757  01DA  0008               	return
  6758  01DB                     i1l1976:	
  6759                           
  6760                           ;i2c.c: 320: else
  6761                           ;i2c.c: 321: {
  6762                           ;i2c.c: 323: SSP1BUF = (i2c_address >> 1) & 0x00FF;
  6763  01DB  0875               	movf	I2C_ISR@i2c_address+1,w
  6764  01DC  00F8               	movwf	??_I2C_ISR+1
  6765  01DD  0874               	movf	I2C_ISR@i2c_address,w
  6766  01DE  00F7               	movwf	??_I2C_ISR
  6767  01DF  36F8               	lsrf	??_I2C_ISR+1,f
  6768  01E0  0CF7               	rrf	??_I2C_ISR,f
  6769  01E1  0877               	movf	??_I2C_ISR,w
  6770  01E2  0024               	movlb	4	; select bank4
  6771  01E3  0091               	movwf	17	;volatile
  6772                           
  6773                           ;i2c.c: 326: if(i2c_address & 0x01)
  6774  01E4  1C74               	btfss	I2C_ISR@i2c_address,0
  6775  01E5  29EB               	goto	i1l1982
  6776                           
  6777                           ;i2c.c: 327: {
  6778                           ;i2c.c: 330: i2c_state = S_MASTER_10BIT_RESTART;
  6779  01E6  300B               	movlw	11
  6780  01E7  00F7               	movwf	??_I2C_ISR
  6781  01E8  0877               	movf	??_I2C_ISR,w
  6782  01E9  00F3               	movwf	_i2c_state
  6783                           
  6784                           ;i2c.c: 331: }
  6785  01EA  0008               	return
  6786  01EB                     i1l1982:	
  6787                           
  6788                           ;i2c.c: 332: else
  6789                           ;i2c.c: 333: {
  6790                           ;i2c.c: 335: i2c_state = S_MASTER_SEND_DATA;
  6791  01EB  3003               	movlw	3
  6792  01EC  00F7               	movwf	??_I2C_ISR
  6793  01ED  0877               	movf	??_I2C_ISR,w
  6794  01EE  00F3               	movwf	_i2c_state
  6795                           
  6796                           ;i2c.c: 336: }
  6797                           ;i2c.c: 337: }
  6798                           ;i2c.c: 339: break;
  6799  01EF  0008               	return
  6800  01F0                     i1l75:	
  6801                           ;i2c.c: 341: case S_MASTER_10BIT_RESTART:
  6802                           
  6803                           
  6804                           ;i2c.c: 343: if(SSP1CON2bits.ACKSTAT)
  6805  01F0  0024               	movlb	4	; select bank4
  6806  01F1  1F16               	btfss	22,6	;volatile
  6807  01F2  29FC               	goto	i1l76
  6808                           
  6809                           ;i2c.c: 344: {
  6810                           ;i2c.c: 345: i2c_object.i2cErrors++;
  6811  01F3  3001               	movlw	1
  6812  01F4  00F7               	movwf	??_I2C_ISR
  6813  01F5  0877               	movf	??_I2C_ISR,w
  6814  01F6  0020               	movlb	0	; select bank0
  6815  01F7  07C4               	addwf	_i2c_object+4,f
  6816                           
  6817                           ;i2c.c: 346: I2C_Stop(I2C_MESSAGE_ADDRESS_NO_ACK);
  6818  01F8  3004               	movlw	4
  6819  01F9  3187  276B         	fcall	_I2C_Stop
  6820                           
  6821                           ;i2c.c: 347: }
  6822  01FB  0008               	return
  6823  01FC                     i1l76:	
  6824                           
  6825                           ;i2c.c: 348: else
  6826                           ;i2c.c: 349: {
  6827                           ;i2c.c: 352: SSP1CON2bits.RSEN = 1;
  6828  01FC  1496               	bsf	22,1	;volatile
  6829                           
  6830                           ;i2c.c: 356: i2c_address = 0x00F0 | ((i2c_address >> 8) & 0x0006);
  6831  01FD  0875               	movf	I2C_ISR@i2c_address+1,w
  6832  01FE  00F8               	movwf	??_I2C_ISR+1
  6833  01FF  0874               	movf	I2C_ISR@i2c_address,w
  6834  0200  00F7               	movwf	??_I2C_ISR
  6835  0201  0878               	movf	??_I2C_ISR+1,w
  6836  0202  00F7               	movwf	??_I2C_ISR
  6837  0203  01F8               	clrf	??_I2C_ISR+1
  6838  0204  3006               	movlw	6
  6839  0205  0577               	andwf	??_I2C_ISR,w
  6840  0206  00F9               	movwf	??_I2C_ISR+2
  6841  0207  3000               	movlw	0
  6842  0208  0578               	andwf	??_I2C_ISR+1,w
  6843  0209  00FA               	movwf	??_I2C_ISR+3
  6844  020A  30F0               	movlw	240
  6845  020B  0479               	iorwf	??_I2C_ISR+2,w
  6846  020C  00F4               	movwf	I2C_ISR@i2c_address
  6847  020D  3000               	movlw	0
  6848  020E  047A               	iorwf	??_I2C_ISR+3,w
  6849  020F  00F5               	movwf	I2C_ISR@i2c_address+1
  6850                           
  6851                           ;i2c.c: 359: i2c_address |= 0x0001;
  6852  0210  1474               	bsf	I2C_ISR@i2c_address,0
  6853                           
  6854                           ;i2c.c: 362: i2c_10bit_address_restart = 1;
  6855  0211  0020               	movlb	0	; select bank0
  6856  0212  01C5               	clrf	I2C_ISR@i2c_10bit_address_restart
  6857  0213  0AC5               	incf	I2C_ISR@i2c_10bit_address_restart,f
  6858                           
  6859                           ;i2c.c: 365: i2c_state = S_MASTER_SEND_ADDR;
  6860  0214  3002               	movlw	2
  6861  0215  00F7               	movwf	??_I2C_ISR
  6862  0216  0877               	movf	??_I2C_ISR,w
  6863  0217  00F3               	movwf	_i2c_state
  6864                           
  6865                           ;i2c.c: 366: }
  6866                           ;i2c.c: 368: break;
  6867  0218  0008               	return
  6868  0219                     i1l1996:	
  6869                           ;i2c.c: 370: case S_MASTER_SEND_ADDR:
  6870                           
  6871                           
  6872                           ;i2c.c: 383: if(i2c_10bit_address_restart != 1)
  6873  0219  0020               	movlb	0	; select bank0
  6874  021A  0345               	decf	I2C_ISR@i2c_10bit_address_restart,w
  6875  021B  1903               	btfsc	3,2
  6876  021C  2A2E               	goto	i1l2016
  6877                           
  6878                           ;i2c.c: 384: {
  6879                           ;i2c.c: 386: i2c_address = p_i2c_trb_current->address;
  6880  021D  0871               	movf	_p_i2c_trb_current,w
  6881  021E  0086               	movwf	6
  6882  021F  0187               	clrf	7
  6883  0220  3F40               	moviw [0]fsr1
  6884  0221  00F4               	movwf	I2C_ISR@i2c_address
  6885  0222  3F41               	moviw [1]fsr1
  6886  0223  00F5               	movwf	I2C_ISR@i2c_address+1
  6887                           
  6888                           ;i2c.c: 387: pi2c_buf_ptr = p_i2c_trb_current->pbuffer;
  6889  0224  0871               	movf	_p_i2c_trb_current,w
  6890  0225  0086               	movwf	6
  6891  0226  0187               	clrf	7
  6892  0227  3F43               	moviw [3]fsr1
  6893  0228  00F0               	movwf	I2C_ISR@pi2c_buf_ptr
  6894                           
  6895                           ;i2c.c: 388: i2c_bytes_left = p_i2c_trb_current->length;
  6896  0229  0871               	movf	_p_i2c_trb_current,w
  6897  022A  0086               	movwf	6
  6898  022B  0187               	clrf	7
  6899  022C  3F42               	moviw [2]fsr1
  6900  022D  00C6               	movwf	I2C_ISR@i2c_bytes_left
  6901  022E                     i1l2016:	
  6902                           ;i2c.c: 409: }
  6903                           ;i2c.c: 410: }
  6904                           
  6905                           ;i2c.c: 408: i2c_10bit_address_restart = 0;
  6906                           
  6907                           ;i2c.c: 406: i2c_state = S_MASTER_ACK_ADDR;
  6908                           
  6909                           ;i2c.c: 402: else
  6910                           ;i2c.c: 403: {
  6911                           ;i2c.c: 405: SSP1BUF = i2c_address;
  6912                           
  6913                           ;i2c.c: 401: }
  6914                           
  6915                           ;i2c.c: 400: i2c_state = S_MASTER_SEND_ADDR_10BIT_LSB;
  6916                           
  6917                           ;i2c.c: 395: {
  6918                           ;i2c.c: 399: SSP1BUF = 0xF0 | ((i2c_address >> 8) & 0x0006);
  6919                           
  6920                           ;i2c.c: 393: {
  6921                           ;i2c.c: 394: if (0 == i2c_10bit_address_restart)
  6922                           
  6923                           ;i2c.c: 389: }
  6924                           ;i2c.c: 392: if(!1 && (0x0 != i2c_address))
  6925                           
  6926                           
  6927                           ;i2c.c: 411: else
  6928                           ;i2c.c: 412: {
  6929                           ;i2c.c: 414: SSP1BUF = i2c_address;
  6930  022E  0874               	movf	I2C_ISR@i2c_address,w
  6931  022F  0024               	movlb	4	; select bank4
  6932  0230  0091               	movwf	17	;volatile
  6933                           
  6934                           ;i2c.c: 415: if(i2c_address & 0x01)
  6935  0231  1C74               	btfss	I2C_ISR@i2c_address,0
  6936  0232  2A38               	goto	i1l2022
  6937                           
  6938                           ;i2c.c: 416: {
  6939                           ;i2c.c: 418: i2c_state = S_MASTER_ACK_ADDR;
  6940  0233  3005               	movlw	5
  6941  0234  00F7               	movwf	??_I2C_ISR
  6942  0235  0877               	movf	??_I2C_ISR,w
  6943  0236  00F3               	movwf	_i2c_state
  6944                           
  6945                           ;i2c.c: 419: }
  6946  0237  0008               	return
  6947  0238                     i1l2022:	
  6948                           
  6949                           ;i2c.c: 420: else
  6950                           ;i2c.c: 421: {
  6951                           ;i2c.c: 423: i2c_state = S_MASTER_SEND_DATA;
  6952  0238  3003               	movlw	3
  6953  0239  00F7               	movwf	??_I2C_ISR
  6954  023A  0877               	movf	??_I2C_ISR,w
  6955  023B  00F3               	movwf	_i2c_state
  6956                           
  6957                           ;i2c.c: 424: }
  6958                           ;i2c.c: 425: }
  6959                           ;i2c.c: 426: break;
  6960  023C  0008               	return
  6961  023D                     i1l86:	
  6962                           ;i2c.c: 428: case S_MASTER_SEND_DATA:
  6963                           
  6964                           
  6965                           ;i2c.c: 431: if(SSP1CON2bits.ACKSTAT)
  6966  023D  0024               	movlb	4	; select bank4
  6967  023E  1F16               	btfss	22,6	;volatile
  6968  023F  2A4B               	goto	i1l2030
  6969                           
  6970                           ;i2c.c: 432: {
  6971                           ;i2c.c: 434: i2c_object.i2cErrors++;
  6972  0240  3001               	movlw	1
  6973  0241  00F7               	movwf	??_I2C_ISR
  6974  0242  0877               	movf	??_I2C_ISR,w
  6975  0243  0020               	movlb	0	; select bank0
  6976  0244  07C4               	addwf	_i2c_object+4,f
  6977                           
  6978                           ;i2c.c: 437: SSP1CON2bits.ACKSTAT = 0;
  6979  0245  0024               	movlb	4	; select bank4
  6980  0246  1316               	bcf	22,6	;volatile
  6981                           
  6982                           ;i2c.c: 440: I2C_Stop(I2C_DATA_NO_ACK);
  6983  0247  3005               	movlw	5
  6984  0248  3187  276B         	fcall	_I2C_Stop
  6985                           
  6986                           ;i2c.c: 442: }
  6987  024A  0008               	return
  6988  024B                     i1l2030:	
  6989                           
  6990                           ;i2c.c: 443: else
  6991                           ;i2c.c: 444: {
  6992                           ;i2c.c: 446: if(i2c_bytes_left-- == 0U)
  6993  024B  3001               	movlw	1
  6994  024C  0020               	movlb	0	; select bank0
  6995  024D  02C6               	subwf	I2C_ISR@i2c_bytes_left,f
  6996  024E  0A46               	incf	I2C_ISR@i2c_bytes_left,w
  6997  024F  1D03               	btfss	3,2
  6998  0250  2A64               	goto	i1l2038
  6999                           
  7000                           ;i2c.c: 447: {
  7001                           ;i2c.c: 451: p_i2c_trb_current++;
  7002  0251  3004               	movlw	4
  7003  0252  00F7               	movwf	??_I2C_ISR
  7004  0253  0877               	movf	??_I2C_ISR,w
  7005  0254  07F1               	addwf	_p_i2c_trb_current,f
  7006                           
  7007                           ;i2c.c: 454: if(--i2c_trb_count == 0)
  7008  0255  3001               	movlw	1
  7009  0256  02F2               	subwf	_i2c_trb_count,f
  7010  0257  1D03               	btfss	3,2
  7011  0258  2A5D               	goto	i1l90
  7012                           
  7013                           ;i2c.c: 455: {
  7014                           ;i2c.c: 456: I2C_Stop(I2C_MESSAGE_COMPLETE);
  7015  0259  3000               	movlw	0
  7016  025A  3187  276B         	fcall	_I2C_Stop
  7017                           
  7018                           ;i2c.c: 457: }
  7019  025C  0008               	return
  7020  025D                     i1l90:	
  7021                           
  7022                           ;i2c.c: 458: else
  7023                           ;i2c.c: 459: {
  7024                           ;i2c.c: 466: SSP1CON2bits.RSEN = 1;
  7025  025D  0024               	movlb	4	; select bank4
  7026  025E  1496               	bsf	22,1	;volatile
  7027                           
  7028                           ;i2c.c: 469: i2c_state = S_MASTER_SEND_ADDR;
  7029  025F  3002               	movlw	2
  7030  0260  00F7               	movwf	??_I2C_ISR
  7031  0261  0877               	movf	??_I2C_ISR,w
  7032  0262  00F3               	movwf	_i2c_state
  7033                           
  7034                           ;i2c.c: 471: }
  7035                           ;i2c.c: 472: }
  7036  0263  0008               	return
  7037  0264                     i1l2038:	
  7038                           
  7039                           ;i2c.c: 473: else
  7040                           ;i2c.c: 474: {
  7041                           ;i2c.c: 476: SSP1BUF = *pi2c_buf_ptr++;
  7042  0264  0870               	movf	I2C_ISR@pi2c_buf_ptr,w
  7043  0265  0086               	movwf	6
  7044  0266  0187               	clrf	7
  7045  0267  0801               	movf	1,w
  7046  0268  0024               	movlb	4	; select bank4
  7047  0269  0091               	movwf	17	;volatile
  7048  026A  3001               	movlw	1
  7049  026B  00F7               	movwf	??_I2C_ISR
  7050  026C  0877               	movf	??_I2C_ISR,w
  7051  026D  07F0               	addwf	I2C_ISR@pi2c_buf_ptr,f
  7052                           
  7053                           ;i2c.c: 477: }
  7054                           ;i2c.c: 478: }
  7055                           ;i2c.c: 479: break;
  7056  026E  0008               	return
  7057  026F                     i1l93:	
  7058                           ;i2c.c: 481: case S_MASTER_ACK_ADDR:
  7059                           
  7060                           
  7061                           ;i2c.c: 484: if(SSP1CON2bits.ACKSTAT)
  7062  026F  0024               	movlb	4	; select bank4
  7063  0270  1F16               	btfss	22,6	;volatile
  7064  0271  2A7D               	goto	i1l94
  7065                           
  7066                           ;i2c.c: 485: {
  7067                           ;i2c.c: 488: i2c_object.i2cErrors++;
  7068  0272  3001               	movlw	1
  7069  0273  00F7               	movwf	??_I2C_ISR
  7070  0274  0877               	movf	??_I2C_ISR,w
  7071  0275  0020               	movlb	0	; select bank0
  7072  0276  07C4               	addwf	_i2c_object+4,f
  7073                           
  7074                           ;i2c.c: 491: I2C_Stop(I2C_MESSAGE_ADDRESS_NO_ACK);
  7075  0277  3004               	movlw	4
  7076  0278  3187  276B         	fcall	_I2C_Stop
  7077                           
  7078                           ;i2c.c: 494: SSP1CON2bits.ACKSTAT = 0;
  7079  027A  0024               	movlb	4	; select bank4
  7080  027B  1316               	bcf	22,6	;volatile
  7081                           
  7082                           ;i2c.c: 495: }
  7083  027C  0008               	return
  7084  027D                     i1l94:	
  7085                           
  7086                           ;i2c.c: 496: else
  7087                           ;i2c.c: 497: {
  7088                           ;i2c.c: 498: SSP1CON2bits.RCEN = 1;
  7089  027D  1596               	bsf	22,3	;volatile
  7090                           
  7091                           ;i2c.c: 499: i2c_state = S_MASTER_ACK_RCV_DATA;
  7092  027E  3008               	movlw	8
  7093  027F  00F7               	movwf	??_I2C_ISR
  7094  0280  0877               	movf	??_I2C_ISR,w
  7095  0281  00F3               	movwf	_i2c_state
  7096                           
  7097                           ;i2c.c: 500: }
  7098                           ;i2c.c: 501: break;
  7099  0282  0008               	return
  7100  0283                     i1l2050:	
  7101                           ;i2c.c: 503: case S_MASTER_RCV_DATA:
  7102                           
  7103                           
  7104                           ;i2c.c: 508: i2c_state = S_MASTER_ACK_RCV_DATA;
  7105  0283  3008               	movlw	8
  7106  0284  00F7               	movwf	??_I2C_ISR
  7107  0285  0877               	movf	??_I2C_ISR,w
  7108  0286  00F3               	movwf	_i2c_state
  7109                           
  7110                           ;i2c.c: 511: SSP1CON2bits.RCEN = 1;
  7111  0287  0024               	movlb	4	; select bank4
  7112  0288  1596               	bsf	22,3	;volatile
  7113                           
  7114                           ;i2c.c: 513: break;
  7115  0289  0008               	return
  7116  028A                     i1l2054:	
  7117                           ;i2c.c: 515: case S_MASTER_ACK_RCV_DATA:
  7118                           
  7119                           
  7120                           ;i2c.c: 518: *pi2c_buf_ptr++ = SSP1BUF;
  7121  028A  0024               	movlb	4	; select bank4
  7122  028B  0811               	movf	17,w	;volatile
  7123  028C  00F7               	movwf	??_I2C_ISR
  7124  028D  0870               	movf	I2C_ISR@pi2c_buf_ptr,w
  7125  028E  0086               	movwf	6
  7126  028F  0187               	clrf	7
  7127  0290  0877               	movf	??_I2C_ISR,w
  7128  0291  0081               	movwf	1
  7129  0292  3001               	movlw	1
  7130  0293  00F7               	movwf	??_I2C_ISR
  7131  0294  0877               	movf	??_I2C_ISR,w
  7132  0295  07F0               	addwf	I2C_ISR@pi2c_buf_ptr,f
  7133                           
  7134                           ;i2c.c: 521: if(--i2c_bytes_left)
  7135  0296  3001               	movlw	1
  7136  0297  0020               	movlb	0	; select bank0
  7137  0298  02C6               	subwf	I2C_ISR@i2c_bytes_left,f
  7138  0299  1903               	btfsc	3,2
  7139  029A  2AA2               	goto	i1l98
  7140                           
  7141                           ;i2c.c: 522: {
  7142                           ;i2c.c: 528: SSP1CON2bits.ACKDT = 0;
  7143  029B  0024               	movlb	4	; select bank4
  7144  029C  1296               	bcf	22,5	;volatile
  7145                           
  7146                           ;i2c.c: 531: i2c_state = S_MASTER_RCV_DATA;
  7147  029D  3006               	movlw	6
  7148  029E  00F7               	movwf	??_I2C_ISR
  7149  029F  0877               	movf	??_I2C_ISR,w
  7150  02A0  00F3               	movwf	_i2c_state
  7151                           
  7152                           ;i2c.c: 532: }
  7153  02A1  2AA6               	goto	i1l2066
  7154  02A2                     i1l98:	
  7155                           
  7156                           ;i2c.c: 533: else
  7157                           ;i2c.c: 534: {
  7158                           ;i2c.c: 538: SSP1CON2bits.ACKDT = 1;
  7159  02A2  0024               	movlb	4	; select bank4
  7160  02A3  1696               	bsf	22,5	;volatile
  7161                           
  7162                           ;i2c.c: 540: I2C_FunctionComplete();
  7163  02A4  3187  2713         	fcall	_I2C_FunctionComplete
  7164  02A6                     i1l2066:	
  7165                           
  7166                           ;i2c.c: 541: }
  7167                           ;i2c.c: 544: SSP1CON2bits.ACKEN = 1;
  7168  02A6  0024               	movlb	4	; select bank4
  7169  02A7  1616               	bsf	22,4	;volatile
  7170                           
  7171                           ;i2c.c: 545: break;
  7172  02A8  0008               	return
  7173  02A9                     i1l2068:	
  7174                           ;i2c.c: 547: case S_MASTER_RCV_STOP:
  7175                           
  7176                           
  7177                           ;i2c.c: 548: case S_MASTER_SEND_STOP:
  7178                           ;i2c.c: 551: I2C_Stop(I2C_MESSAGE_COMPLETE);
  7179  02A9  3000               	movlw	0
  7180  02AA  3187  276B         	fcall	_I2C_Stop
  7181                           
  7182                           ;i2c.c: 552: break;
  7183  02AC  0008               	return
  7184  02AD                     i1l2070:	
  7185                           ;i2c.c: 554: default:
  7186                           
  7187                           
  7188                           ;i2c.c: 558: i2c_object.i2cErrors++;
  7189  02AD  3001               	movlw	1
  7190  02AE  00F7               	movwf	??_I2C_ISR
  7191  02AF  0877               	movf	??_I2C_ISR,w
  7192  02B0  0020               	movlb	0	; select bank0
  7193  02B1  07C4               	addwf	_i2c_object+4,f
  7194                           
  7195                           ;i2c.c: 559: I2C_Stop(I2C_LOST_STATE);
  7196  02B2  3006               	movlw	6
  7197  02B3  3187  276B         	fcall	_I2C_Stop
  7198                           
  7199                           ;i2c.c: 562: }
  7200                           
  7201                           ;i2c.c: 560: break;
  7202  02B5  0008               	return
  7203  02B6                     i1l2076:	
  7204  02B6  0873               	movf	_i2c_state,w
  7205                           
  7206                           ; Switch size 1, requested type "space"
  7207                           ; Number of cases is 11, Range of values is 0 to 11
  7208                           ; switch strategies available:
  7209                           ; Name         Instructions Cycles
  7210                           ; direct_byte           30     6 (fixed)
  7211                           ; simple_byte           34    18 (average)
  7212                           ; jumptable            260     6 (fixed)
  7213                           ;	Chosen strategy is direct_byte
  7214  02B7  0084               	movwf	4
  7215  02B8  300C               	movlw	12
  7216  02B9  0204               	subwf	4,w
  7217  02BA  1803               	skipnc
  7218  02BB  2AAD               	goto	i1l2070
  7219  02BC  3186               	movlp	high i1S3058
  7220  02BD  3504               	lslf	4,w
  7221  02BE  3E9D               	addlw	low i1S3058
  7222  02BF  0082               	movwf	2
  7223  02C0  0008               	return
  7224  02C1                     __end_of_I2C_ISR:	
  7225                           
  7226                           	psect	swtext2
  7227  069D                     __pswtext2:	
  7228  069D                     i1S3058:	
  7229  069D  3181  299D         	ljmp	i1l64
  7230  069F  3181  29C8         	ljmp	i1l69
  7231  06A1  3182  2A19         	ljmp	i1l1996
  7232  06A3  3182  2A3D         	ljmp	i1l86
  7233  06A5  3182  2AA9         	ljmp	i1l2068
  7234  06A7  3182  2A6F         	ljmp	i1l93
  7235  06A9  3182  2A83         	ljmp	i1l2050
  7236  06AB  3182  2AA9         	ljmp	i1l2068
  7237  06AD  3182  2A8A         	ljmp	i1l2054
  7238  06AF  3182  2AAD         	ljmp	i1l2070
  7239  06B1  3181  29CF         	ljmp	i1l70
  7240  06B3  3181  29F0         	ljmp	i1l75
  7241                           
  7242                           	psect	text30
  7243  076B                     __ptext30:	
  7244 ;; *************** function _I2C_Stop *****************
  7245 ;; Defined at:
  7246 ;;		line 583 in file "mcc_generated_files/i2c.c"
  7247 ;; Parameters:    Size  Location     Type
  7248 ;;  completion_c    1    wreg     enum E11987
  7249 ;; Auto vars:     Size  Location     Type
  7250 ;;  completion_c    1    0[COMMON] enum E11987
  7251 ;; Return value:  Size  Location     Type
  7252 ;;                  1    wreg      void 
  7253 ;; Registers used:
  7254 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  7255 ;; Tracked objects:
  7256 ;;		On entry : 0/0
  7257 ;;		On exit  : 0/0
  7258 ;;		Unchanged: 0/0
  7259 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7260 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7261 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7262 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7263 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7264 ;;Total ram usage:        0 bytes
  7265 ;; Hardware stack levels used:    1
  7266 ;; This function calls:
  7267 ;;		Nothing
  7268 ;; This function is called by:
  7269 ;;		_I2C_ISR
  7270 ;; This function uses a non-reentrant model
  7271 ;;
  7272                           
  7273                           
  7274                           ;psect for function _I2C_Stop
  7275  076B                     _I2C_Stop:	
  7276                           
  7277                           ;i2c.c: 586: SSP1CON2bits.PEN = 1;
  7278                           
  7279                           ;incstack = 0
  7280                           ; Regs used in _I2C_Stop: [wreg+fsr1l+fsr1h+status,2+status,0]
  7281  076B  0024               	movlb	4	; select bank4
  7282  076C  1516               	bsf	22,2	;volatile
  7283                           
  7284                           ;i2c.c: 593: }
  7285                           ;i2c.c: 596: i2c_state = S_MASTER_IDLE;
  7286  076D  01F3               	clrf	_i2c_state
  7287  076E  0008               	return
  7288  076F                     __end_of_I2C_Stop:	
  7289                           
  7290                           	psect	text31
  7291  0713                     __ptext31:	
  7292 ;; *************** function _I2C_FunctionComplete *****************
  7293 ;; Defined at:
  7294 ;;		line 565 in file "mcc_generated_files/i2c.c"
  7295 ;; Parameters:    Size  Location     Type
  7296 ;;		None
  7297 ;; Auto vars:     Size  Location     Type
  7298 ;;		None
  7299 ;; Return value:  Size  Location     Type
  7300 ;;                  1    wreg      void 
  7301 ;; Registers used:
  7302 ;;		wreg, status,2, status,0
  7303 ;; Tracked objects:
  7304 ;;		On entry : 0/0
  7305 ;;		On exit  : 0/0
  7306 ;;		Unchanged: 0/0
  7307 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7308 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7309 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7310 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7311 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7312 ;;Total ram usage:        1 bytes
  7313 ;; Hardware stack levels used:    1
  7314 ;; This function calls:
  7315 ;;		Nothing
  7316 ;; This function is called by:
  7317 ;;		_I2C_ISR
  7318 ;; This function uses a non-reentrant model
  7319 ;;
  7320                           
  7321                           
  7322                           ;psect for function _I2C_FunctionComplete
  7323  0713                     _I2C_FunctionComplete:	
  7324                           
  7325                           ;i2c.c: 569: p_i2c_trb_current++;
  7326                           
  7327                           ;incstack = 0
  7328                           ; Regs used in _I2C_FunctionComplete: [wreg+status,2+status,0]
  7329  0713  3004               	movlw	4
  7330  0714  00F6               	movwf	??_I2C_FunctionComplete
  7331  0715  0876               	movf	??_I2C_FunctionComplete,w
  7332  0716  07F1               	addwf	_p_i2c_trb_current,f
  7333                           
  7334                           ;i2c.c: 572: if(--i2c_trb_count == 0)
  7335  0717  3001               	movlw	1
  7336  0718  02F2               	subwf	_i2c_trb_count,f
  7337  0719  1D03               	btfss	3,2
  7338  071A  2F20               	goto	i1l105
  7339                           
  7340                           ;i2c.c: 573: {
  7341                           ;i2c.c: 574: i2c_state = S_MASTER_SEND_STOP;
  7342  071B  3004               	movlw	4
  7343  071C  00F6               	movwf	??_I2C_FunctionComplete
  7344  071D  0876               	movf	??_I2C_FunctionComplete,w
  7345  071E  00F3               	movwf	_i2c_state
  7346                           
  7347                           ;i2c.c: 575: }
  7348  071F  0008               	return
  7349  0720                     i1l105:	
  7350                           
  7351                           ;i2c.c: 576: else
  7352                           ;i2c.c: 577: {
  7353                           ;i2c.c: 578: i2c_state = S_MASTER_RESTART;
  7354  0720  01F3               	clrf	_i2c_state
  7355  0721  0AF3               	incf	_i2c_state,f
  7356  0722  0008               	return
  7357  0723                     __end_of_I2C_FunctionComplete:	
  7358                           
  7359                           	psect	text32
  7360  076F                     __ptext32:	
  7361 ;; *************** function _I2C_BusCollisionISR *****************
  7362 ;; Defined at:
  7363 ;;		line 742 in file "mcc_generated_files/i2c.c"
  7364 ;; Parameters:    Size  Location     Type
  7365 ;;		None
  7366 ;; Auto vars:     Size  Location     Type
  7367 ;;		None
  7368 ;; Return value:  Size  Location     Type
  7369 ;;                  1    wreg      void 
  7370 ;; Registers used:
  7371 ;;		None
  7372 ;; Tracked objects:
  7373 ;;		On entry : 0/0
  7374 ;;		On exit  : 0/0
  7375 ;;		Unchanged: 0/0
  7376 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7377 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7378 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7379 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7380 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7381 ;;Total ram usage:        0 bytes
  7382 ;; Hardware stack levels used:    1
  7383 ;; This function calls:
  7384 ;;		Nothing
  7385 ;; This function is called by:
  7386 ;;		_INTERRUPT_InterruptManager
  7387 ;; This function uses a non-reentrant model
  7388 ;;
  7389                           
  7390                           
  7391                           ;psect for function _I2C_BusCollisionISR
  7392  076F                     _I2C_BusCollisionISR:	
  7393                           
  7394                           ;i2c.c: 745: PIR2bits.BCL1IF = 0;
  7395                           
  7396                           ;incstack = 0
  7397                           ; Regs used in _I2C_BusCollisionISR: []
  7398  076F  0020               	movlb	0	; select bank0
  7399  0770  1191               	bcf	17,3	;volatile
  7400  0771  0008               	return
  7401  0772                     __end_of_I2C_BusCollisionISR:	
  7402  007E                     btemp	set	126	;btemp
  7403  007E                     int$flags	set	126
  7404  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         25
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6      12
    BANK0            80     32      51
    BANK1            80      0       0
    BANK2            80      0       0
    BANK3            80      0       0
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    i2c_tr_queue.ptrb_list.pbuffer	PTR unsigned char  size(1) Largest target is 0

    i2c_tr_queue.pTrFlag	PTR enum E11987 size(1) Largest target is 0

    i2c_tr_queue.ptrb_list	PTR struct . size(1) Largest target is 5
		 -> I2C_MasterRead@trBlock(BANK0[4]), I2C_MasterWrite@trBlock(BANK0[4]), 

    I2C_MasterWriteTRBBuild@ptrb.pbuffer	PTR unsigned char  size(1) Largest target is 0

    I2C_MasterReadTRBBuild@ptrb.pbuffer	PTR unsigned char  size(1) Largest target is 0

    i2c_object.pTrTail.ptrb_list.pbuffer	PTR unsigned char  size(1) Largest target is 0

    i2c_object.pTrTail.pTrFlag	PTR enum E11987 size(1) Largest target is 0

    i2c_object.pTrTail.ptrb_list	PTR struct . size(1) Largest target is 5
		 -> I2C_MasterRead@trBlock(BANK0[4]), I2C_MasterWrite@trBlock(BANK0[4]), 

    F12099.pbuffer	PTR unsigned char  size(1) Largest target is 0

    F12094.pbuffer	PTR unsigned char  size(1) Largest target is 0

    I2C_ISR@pi2c_buf_ptr	PTR unsigned char  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    p_i2c_trb_current.pbuffer	PTR unsigned char  size(1) Largest target is 0

    p_i2c_trb_current	PTR struct . size(1) Largest target is 5
		 -> I2C_MasterRead@trBlock(BANK0[4]), I2C_MasterWrite@trBlock(BANK0[4]), NULL(NULL[0]), 

    i2c_object.pTrHead.pTrFlag	PTR enum E11987 size(1) Largest target is 0

    i2c_object.pTrHead.ptrb_list	PTR struct . size(1) Largest target is 5
		 -> I2C_MasterRead@trBlock(BANK0[4]), I2C_MasterWrite@trBlock(BANK0[4]), 

    S19$pbuffer	PTR unsigned char  size(1) Largest target is 0

    p_i2c_current.pbuffer	PTR unsigned char  size(1) Largest target is 0

    S31$pTrFlag	PTR enum E11987 size(1) Largest target is 0

    p_i2c_current.pTrFlag	PTR enum E11987 size(1) Largest target is 0

    S31$ptrb_list	PTR struct . size(1) Largest target is 5
		 -> I2C_MasterRead@trBlock(BANK0[4]), I2C_MasterWrite@trBlock(BANK0[4]), 

    p_i2c_current.ptrb_list	PTR struct . size(1) Largest target is 5
		 -> I2C_MasterRead@trBlock(BANK0[4]), I2C_MasterWrite@trBlock(BANK0[4]), 

    p_i2c_current	PTR struct . size(1) Largest target is 5
		 -> i2c_tr_queue(BANK0[3]), NULL(NULL[0]), 

    S42$pTrHead	PTR struct . size(1) Largest target is 5
		 -> i2c_tr_queue(BANK0[3]), 

    i2c_object.pTrHead	PTR struct . size(1) Largest target is 5
		 -> i2c_tr_queue(BANK0[3]), 

    S42$pTrTail	PTR struct . size(1) Largest target is 5
		 -> i2c_tr_queue(BANK0[3]), 

    i2c_object.pTrTail	PTR struct . size(1) Largest target is 5
		 -> i2c_tr_queue(BANK0[3]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _INTERRUPT_InterruptManager->_I2C_ISR
    _I2C_ISR->_I2C_FunctionComplete

Critical Paths under _main in BANK0

    _main->_printReglageH
    _readSec->_readI2C
    _printReglageH->_writeData
    _writeData->_writeInst
    _initRW1063->_writeInst
    _writeInst->_sendI2C
    _initRTC->_sendI2C
    _incrMin->_bitExtracted
    _readMin->_readI2C
    _changeMin->_sendI2C
    _incrHeure->_bitExtracted
    _readHr->_readI2C
    _changeHeure->_sendI2C
    _convertFromBcd->___bmul

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                15    15      0   16456
                                             17 BANK0     15    15      0
                                _FSM
                  _SYSTEM_Initialize
                       _bitExtracted
                     _convertFromBcd
                          _incrHeure
                            _incrMin
                            _initI2C
                            _initRTC
                         _initRW1063
                      _printReglageH
                             _readHr
                            _readMin
                            _readSec
                          _writeData
                          _writeInst
 ---------------------------------------------------------------------------------
 (1) _readSec                                              2     2      0     102
                                              2 BANK0      2     2      0
                        _re_startI2C
                            _readI2C
                            _sendI2C
                       _sendNoAckI2C
                           _startI2C
                            _stopI2C
 ---------------------------------------------------------------------------------
 (1) _printReglageH                                        9     9      0    5190
                                              8 BANK0      9     9      0
                                _FSM
                       _bitExtracted
                             _readHr
                            _readMin
                          _writeData
                          _writeInst
 ---------------------------------------------------------------------------------
 (1) _writeData                                            5     3      2    2696
                                              3 BANK0      5     3      2
                                _FSM (ARG)
                            _sendI2C
                           _startI2C
                            _stopI2C
                          _writeInst
 ---------------------------------------------------------------------------------
 (2) _FSM                                                  1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _initRW1063                                           0     0      0      62
                          _writeInst
 ---------------------------------------------------------------------------------
 (1) _writeInst                                            2     2      0      62
                                              1 BANK0      2     2      0
                            _sendI2C
                           _startI2C
                            _stopI2C
 ---------------------------------------------------------------------------------
 (1) _initRTC                                              0     0      0      31
                            _sendI2C
                           _startI2C
                            _stopI2C
 ---------------------------------------------------------------------------------
 (1) _initI2C                                              3     3      0      71
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _incrMin                                              6     6      0    2494
                                              5 BANK0      6     6      0
                       _bitExtracted
                          _changeMin
                            _readMin
 ---------------------------------------------------------------------------------
 (1) _readMin                                              2     2      0     102
                                              2 BANK0      2     2      0
                        _re_startI2C
                            _readI2C
                            _sendI2C
                       _sendNoAckI2C
                           _startI2C
                            _stopI2C
 ---------------------------------------------------------------------------------
 (2) _changeMin                                            1     1      0      62
                                              1 BANK0      1     1      0
                            _sendI2C
                           _startI2C
                            _stopI2C
 ---------------------------------------------------------------------------------
 (1) _incrHeure                                            6     6      0    2556
                                              5 BANK0      6     6      0
                       _bitExtracted
                        _changeHeure
                             _readHr
 ---------------------------------------------------------------------------------
 (1) _readHr                                               2     2      0     102
                                              2 BANK0      2     2      0
                        _re_startI2C
                            _readI2C
                            _sendI2C
                       _sendNoAckI2C
                           _startI2C
                            _stopI2C
 ---------------------------------------------------------------------------------
 (2) _sendNoAckI2C                                         0     0      0       0
                            _waitI2C
 ---------------------------------------------------------------------------------
 (2) _readI2C                                              2     2      0      34
                                              0 BANK0      2     2      0
                            _waitI2C
 ---------------------------------------------------------------------------------
 (2) _re_startI2C                                          0     0      0       0
                            _waitI2C
 ---------------------------------------------------------------------------------
 (2) _changeHeure                                          1     1      0      62
                                              1 BANK0      1     1      0
                            _sendI2C
                           _startI2C
                            _stopI2C
 ---------------------------------------------------------------------------------
 (2) _stopI2C                                              0     0      0       0
                            _waitI2C
 ---------------------------------------------------------------------------------
 (2) _startI2C                                             0     0      0       0
                            _waitI2C
 ---------------------------------------------------------------------------------
 (2) _sendI2C                                              1     1      0      31
                                              0 BANK0      1     1      0
                            _waitI2C
 ---------------------------------------------------------------------------------
 (3) _waitI2C                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _bitExtracted                                         5     3      2    1913
                                              0 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 (1) _convertFromBcd                                       5     5      0     337
                                              4 BANK0      5     5      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (2) ___bmul                                               4     3      1     201
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0       0
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _INTERRUPT_InterruptManager                           1     1      0       0
                                              5 COMMON     1     1      0
                _I2C_BusCollisionISR
                            _I2C_ISR
 ---------------------------------------------------------------------------------
 (7) _I2C_ISR                                              4     4      0       0
                                              1 COMMON     4     4      0
               _I2C_FunctionComplete
                           _I2C_Stop
 ---------------------------------------------------------------------------------
 (8) _I2C_Stop                                             1     1      0       0
 ---------------------------------------------------------------------------------
 (8) _I2C_FunctionComplete                                 1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (7) _I2C_BusCollisionISR                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _FSM
   _SYSTEM_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
   _bitExtracted
   _convertFromBcd
     ___bmul
   _incrHeure
     _bitExtracted
     _changeHeure
       _sendI2C
         _waitI2C
       _startI2C
         _waitI2C
       _stopI2C
         _waitI2C
     _readHr
       _re_startI2C
         _waitI2C
       _readI2C
         _waitI2C
       _sendI2C
         _waitI2C
       _sendNoAckI2C
         _waitI2C
       _startI2C
         _waitI2C
       _stopI2C
         _waitI2C
   _incrMin
     _bitExtracted
     _changeMin
       _sendI2C
         _waitI2C
       _startI2C
         _waitI2C
       _stopI2C
         _waitI2C
     _readMin
       _re_startI2C
         _waitI2C
       _readI2C
         _waitI2C
       _sendI2C
         _waitI2C
       _sendNoAckI2C
         _waitI2C
       _startI2C
         _waitI2C
       _stopI2C
         _waitI2C
   _initI2C
   _initRTC
     _sendI2C
       _waitI2C
     _startI2C
       _waitI2C
     _stopI2C
       _waitI2C
   _initRW1063
     _writeInst
       _sendI2C
         _waitI2C
       _startI2C
         _waitI2C
       _stopI2C
         _waitI2C
   _printReglageH
     _FSM
     _bitExtracted
     _readHr
       _re_startI2C
         _waitI2C
       _readI2C
         _waitI2C
       _sendI2C
         _waitI2C
       _sendNoAckI2C
         _waitI2C
       _startI2C
         _waitI2C
       _stopI2C
         _waitI2C
     _readMin
       _re_startI2C
         _waitI2C
       _readI2C
         _waitI2C
       _sendI2C
         _waitI2C
       _sendNoAckI2C
         _waitI2C
       _startI2C
         _waitI2C
       _stopI2C
         _waitI2C
     _writeData
       _FSM (ARG)
       _sendI2C (ARG)
         _waitI2C
       _startI2C (ARG)
         _waitI2C
       _stopI2C (ARG)
         _waitI2C
       _writeInst (ARG)
         _sendI2C
           _waitI2C
         _startI2C
           _waitI2C
         _stopI2C
           _waitI2C
     _writeInst
       _sendI2C
         _waitI2C
       _startI2C
         _waitI2C
       _stopI2C
         _waitI2C
   _readHr
     _re_startI2C
       _waitI2C
     _readI2C
       _waitI2C
     _sendI2C
       _waitI2C
     _sendNoAckI2C
       _waitI2C
     _startI2C
       _waitI2C
     _stopI2C
       _waitI2C
   _readMin
     _re_startI2C
       _waitI2C
     _readI2C
       _waitI2C
     _sendI2C
       _waitI2C
     _sendNoAckI2C
       _waitI2C
     _startI2C
       _waitI2C
     _stopI2C
       _waitI2C
   _readSec
     _re_startI2C
       _waitI2C
     _readI2C
       _waitI2C
     _sendI2C
       _waitI2C
     _sendNoAckI2C
       _waitI2C
     _startI2C
       _waitI2C
     _stopI2C
       _waitI2C
   _writeData
     _FSM (ARG)
     _sendI2C (ARG)
       _waitI2C
     _startI2C (ARG)
       _waitI2C
     _stopI2C (ARG)
       _waitI2C
     _writeInst (ARG)
       _sendI2C
         _waitI2C
       _startI2C
         _waitI2C
       _stopI2C
         _waitI2C
   _writeInst
     _sendI2C
       _waitI2C
     _startI2C
       _waitI2C
     _stopI2C
       _waitI2C

 _INTERRUPT_InterruptManager (ROOT)
   _I2C_BusCollisionISR
   _I2C_ISR
     _I2C_FunctionComplete
     _I2C_Stop

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      6       C       2       85.7%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     20      33       5       63.8%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0      3F      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0      3F      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Wed Jun 13 12:10:16 2018

                 printReglageH@heure 0030                                    pc 0002  
                     ___bmul@product 0022                I2C_ISR@i2c_bytes_left 0046  
                        __CFG_CP$OFF 0000                  printReglageH@minute 002F  
                printReglageH@uniteH 002E                  printReglageH@uniteM 002C  
                        __CFG_LVP$ON 0000                                  l303 06E7  
                                l410 064C                                  l309 073F  
                                l413 0653                                  l422 066A  
                                l416 065B                                  l440 058E  
                                l425 0671                                  l361 04BC  
                                l274 0512                                  l370 04D7  
                                l434 057D                                  l291 0747  
                                l275 0525                                  l428 0679  
                                l452 05BA                                  l364 04C3  
                                l285 074A                                  l461 05DC  
                                l373 04DE                                  l437 0584  
                                l446 05A9                                  l382 04F9  
                                l358 04B5                                  l279 0737  
                                l367 04D0                                  l464 05E6  
                                l376 04EB                                  l297 072E  
                                l449 05B0                                  l458 05D5  
                                l379 04F2                                  l492 0181  
                                l495 017F                                  l488 0155  
                                _FSM 0621                      __end_of_I2C_ISR 02C1  
                       __CFG_BORV$LO 0000                                  wreg 0009  
                       __CFG_IESO$ON 0000                                 S3056 06CB  
              printReglageH@dizaineH 002D                printReglageH@dizaineM 002B  
                               ?_FSM 0076                         __CFG_ZCD$OFF 0000  
                               l3000 0189                                 l2610 062A  
                               l2604 0628                                 l2622 062E  
                               l2712 06F4                                 l2640 0634  
                               l2616 062C                                 l2634 0632  
                               l2570 0473                                 l2562 0464  
                               l2716 06FA                                 l2628 0630  
                               l2646 0636                                 l2654 0638  
                               l2592 0624                                 l2568 0465  
                               l2940 005D                                 l2854 043B  
                               l2598 0626                                 l2858 0441  
                               l2892 03E9                                 l2884 03DB  
                               l2974 0150                                 l2978 0157  
                               l2988 0173                                 _LATA 010C  
                               _LATB 010D                                 _LATC 010E  
                               u2155 0449                                 u2307 0048  
                               u2317 0160                                 u2095 0686  
                               u2327 047A                                 u2337 0487  
             ??_I2C_FunctionComplete 0076                                 u2195 03F1  
                               u2347 0494                                 u2357 04A2  
                               u2367 0544                                 u1824 06BE  
                               u1825 06BD                                 u2377 0551  
                               u1834 06C5                                 u1835 06C4  
                               u2387 055E                                 u2397 056C  
                               u1985 0510                                 u1995 0523  
                               i1l70 01CF                                 i1l64 019D  
                               i1l90 025D                                 i1l75 01F0  
                               i1l76 01FC                                 i1l93 026F  
                               i1l69 01C8                                 i1l94 027D  
                               i1l86 023D                                 i1l98 02A2  
                               _WPUA 020C                                 _WPUB 020D  
                               _WPUC 020E                         __CFG_WRT$OFF 0000  
                      __CFG_FCMEN$ON 0000                                 _main 0035  
                               fsr0h 0005                                 fsr1h 0007  
                               indf0 0000                                 fsr0l 0004  
                               indf1 0001                                 fsr1l 0006  
                               btemp 007E                     __end_of_I2C_Stop 076F  
               __end_of_bitExtracted 06CB                        __CFG_BOREN$ON 0000  
                               start 0022                    ___bmul@multiplier 0023  
                      __CFG_MCLRE$ON 0000                                ??_FSM 0020  
                              FSM@IN 0020       __size_of_OSCILLATOR_Initialize 0007  
      __end_of_OSCILLATOR_Initialize 0759                         main@dizaineH 003A  
                       main@dizaineM 0038                         main@dizaineS 0036  
                    ??_printReglageH 0028                      changeMin@minute 0021  
                              ?_main 0076                        __CFG_WDTE$OFF 0000  
                      _i2c_trb_count 0072                                _LATB4 086C  
                              _LATB6 086E                                i1l105 0720  
                              i1l174 0015                                i1l179 001D  
                              _TRISA 008C                                _TRISB 008D  
                              _TRISC 008E                 __size_of_changeHeure 001E  
                        readI2C@temp 0021                      __end_of_initI2C 053B  
                    __end_of_readI2C 06F1                      __end_of_incrMin 045A  
                    __end_of_initRTC 04FF                      __end_of_readMin 05CC  
                    __end_of_readSec 05A0                      __end_of_sendI2C 0731  
                    __end_of_waitI2C 0752                      __end_of_stopI2C 074A  
                              status 0003                                wtemp0 007E  
                         _i2c_object 0040                      __initialization 0024  
                       __end_of_main 0193                         ?_re_startI2C 0076  
                          ??_I2C_ISR 0077                       _convertFromBcd 067F  
                     __CFG_LPBOR$OFF 0000          ?_INTERRUPT_InterruptManager 0076  
                             ??_main 0031                     changeHeure@heure 0021  
                     __CFG_PLLEN$OFF 0000                               i1S3058 069D  
                        readHr@heure 0023                               _ANSELA 018C  
                             _ANSELB 018D                               _ANSELC 018E  
                             _BORCON 0116                               _RB4PPS 0E9C  
                             _RB6PPS 0E9E                               i1l2030 024B  
                             i1l2022 0238                               i1l2016 022E  
                             i1l2050 0283                               i1l2070 02AD  
                             i1l2054 028A                               i1l2038 0264  
                             _ODCONA 028C                               i1l2066 02A6  
                             _ODCONB 028D                               _ODCONC 028E  
                             i1l2068 02A9                               i1l2076 02B6  
                             i1l1964 01BC                               i1l1982 01EB  
                             i1l1976 01DB                               i1l1996 0219  
                             _OSCCON 0099                               _TRISB4 046C  
                             _TRISB6 046E                       __CFG_PWRTE$OFF 0000  
                             ___bmul 06F1               __end_of_convertFromBcd 069D  
                     __CFG_STVREN$ON 0000                               _readHr 05CC  
                          ??_initI2C 0020                            ??_readI2C 0020  
                          ??_incrMin 0025                            ??_initRTC 0021  
                  incrHeure@dizaineH 0028                            ??_readMin 0022  
                          ??_readSec 0022                            ??_sendI2C 0020  
                          ?_I2C_Stop 0076                            ??_waitI2C 0020  
                   __end_of_startI2C 073A                            ??_stopI2C 0020  
              __size_of_bitExtracted 0016                          sendI2C@data 0020  
                  _SYSTEM_Initialize 0765              __end_of__initialization 0031  
                 ?_SYSTEM_Initialize 0076                  ___bmul@multiplicand 0020  
                     __pcstackCOMMON 0076                      ?_convertFromBcd 0076  
                ??_SYSTEM_Initialize 0020                   __size_of_changeMin 001E  
                      ?_sendNoAckI2C 0076                         _bitExtracted 06B5  
                     _OPTION_REGbits 0095                           ??_I2C_Stop 0076  
          __end_of_SYSTEM_Initialize 076B                           __pbssBANK0 0040  
                 __size_of_incrHeure 0060         __size_of_I2C_BusCollisionISR 0003  
                         __pmaintext 0035                              ?___bmul 0020  
                    __CFG_PPS1WAY$ON 0000                           __pintentry 0004  
                            _I2C_ISR 0193                              ?_readHr 0076  
               __size_of_re_startI2C 0008                       ??_sendNoAckI2C 0020  
                    __CFG_WDTCCS$SWC 0000                              _OSCTUNE 0098  
            I2C_Stop@completion_code 0076                              _SSP1ADD 0212  
                            _SSP1BUF 0211                    __end_of_changeMin 0661  
              convertFromBcd@byteBCD 0028                convertFromBcd@byteLSB 0027  
              convertFromBcd@byteMSB 0026        __size_of_I2C_FunctionComplete 0010  
                         _initRW1063 0703                   __size_of_writeData 0054  
                 __size_of_writeInst 0039                      __size_of___bmul 0012  
                          ?_startI2C 0076                    __end_of_incrHeure 0402  
                    __size_of_readHr 002C                              __ptext1 0574  
                            __ptext2 02C1                              __ptext3 045A  
                            __ptext4 0621                              __ptext5 0703  
                            __ptext6 053B                              __ptext7 04AE  
                            __ptext8 04FF                              __ptext9 0402  
                      ??_changeHeure 0021                              _initI2C 04FF  
                       __size_of_FSM 0022                              _readI2C 06DF  
                            _incrMin 0402                              _initRTC 04AE  
              _OSCILLATOR_Initialize 0752                __end_of_printReglageH 03A2  
                            _readMin 05A0                              _readSec 0574  
                            _sendI2C 0723                              _waitI2C 074A  
           ??_PIN_MANAGER_Initialize 0020                        bitExtracted@k 0020  
                      bitExtracted@p 0021                              _stopI2C 0742  
         __size_of_SYSTEM_Initialize 0006                              clrloop0 075A  
               end_of_initialization 0031                        incrMin@minute 002A  
                      incrMin@uniteM 0029                           ??_startI2C 0020  
                          _PORTCbits 000E                   I2C_ISR@i2c_address 0074  
                          _SSPDATPPS 0E21                    __end_of_writeData 04AE  
                          _SSPCLKPPS 0E20                    __end_of_writeInst 0574  
                   __CFG_FOSC$INTOSC 0000                    __size_of_I2C_Stop 0004  
                __end_of_changeHeure 067F     I2C_ISR@i2c_10bit_address_restart 0045  
                        ?_initRW1063 0076                 __end_of_sendNoAckI2C 0765  
                         main@buffer 0034                     ??_convertFromBcd 0024  
                         main@minute 003D                           main@second 003F  
                         main@select 003C                           main@uniteH 0039  
                         main@uniteM 0037                           main@uniteS 0035  
                  _p_i2c_trb_current 0071                       __end_of___bmul 0703  
                       _i2c_tr_queue 0050                       __end_of_readHr 05F8  
             ?_OSCILLATOR_Initialize 0076                  _I2C_BusCollisionISR 076F  
                start_initialization 0024                          __end_of_FSM 0643  
    __size_of_PIN_MANAGER_Initialize 0029                            _i2c_state 0073  
               ?_I2C_BusCollisionISR 0076                             ??___bmul 0021  
                           ?_I2C_ISR 0076                             ??_readHr 0022  
                        _changeHeure 0661                  __size_of_initRW1063 0010  
                        __pbssCOMMON 0070                            ___latbits 0002  
                      __pcstackBANK0 0020                ??_I2C_BusCollisionISR 0076  
                          _changeMin 0643               _PIN_MANAGER_Initialize 05F8  
                    writeData@adress 0023                        ??_re_startI2C 0020  
       __end_of_I2C_FunctionComplete 0723                    __size_of_startI2C 0009  
       ??_INTERRUPT_InterruptManager 007B                            __pswtext1 06CB  
                          __pswtext2 069D                             ?_initI2C 0076  
                           ?_readI2C 0076                             ?_incrMin 0076  
                           ?_initRTC 0076                             ?_readMin 0076  
                           ?_readSec 0076                            _incrHeure 03A2  
                           ?_sendI2C 0076                             _I2C_Stop 076B  
                           ?_waitI2C 0076                             ?_stopI2C 0076  
              __size_of_sendNoAckI2C 0006                        _p_i2c_current 0047  
                         ?_changeMin 0076                            clear_ram0 0759  
                           _PIE1bits 0090                             _PIE2bits 0091  
__size_of_INTERRUPT_InterruptManager 001E                             _PIR1bits 0010  
                           _PIR2bits 0011                 __CFG_WDTCPS$WDTCPS1F 0000  
                           _SSP1CON1 0215                             _SSP1CON2 0216  
                           _SSP1CON3 0217                  I2C_ISR@pi2c_buf_ptr 0070  
                           _SSP1STAT 0214                     __size_of_I2C_ISR 012E  
                       _sendNoAckI2C 075F                  __end_of_re_startI2C 0742  
                         ?_incrHeure 0076                            main@heure 003E  
                      readMin@minute 0023                            _writeData 045A  
                          _writeInst 053B                        readSec@second 0023  
                       ??_initRW1063 0023               __size_of_printReglageH 00E1  
            ??_OSCILLATOR_Initialize 0020                      incrHeure@uniteH 0029  
                    incrMin@dizaineM 0028                        ?_bitExtracted 0020  
                   __size_of_initI2C 003C                     __size_of_readI2C 0012  
                   __size_of_incrMin 0058                   __end_of_initRW1063 0713  
                   __size_of_initRTC 0051                     __size_of_readMin 002C  
                   __size_of_readSec 002C                     __size_of_sendI2C 000E  
                   __size_of_waitI2C 0008                           ?_writeData 0023  
                           __ptext10 05A0                             __ptext11 0643  
                           __ptext20 0723                             __ptext12 03A2  
                           __ptext21 074A                             __ptext13 05CC  
                           __ptext30 076B                             __ptext22 06B5  
                           __ptext14 075F                             __ptext31 0713  
                           __ptext23 067F                             __ptext15 06DF  
                           __ptext32 076F                             __ptext24 06F1  
                           __ptext16 073A                             __ptext25 0765  
                           __ptext17 0661                             __ptext26 05F8  
                           __ptext18 0742                             __ptext27 0752  
                           __ptext19 0731                             __ptext29 0193  
                     writeData@ligne 0024                           ?_writeInst 0076  
                       _SSP1CON1bits 0215                         _SSP1CON2bits 0216  
                   __size_of_stopI2C 0008                        __size_of_main 015E  
               _I2C_FunctionComplete 0713                          ??_changeMin 0021  
               __CFG_WDTCWS$WDTCWSSW 0000                           writeData@i 0027  
                           int$flags 007E                             _startI2C 0731  
                        _re_startI2C 073A   __end_of_INTERRUPT_InterruptManager 0022  
         _INTERRUPT_InterruptManager 0004                             main@menu 003B  
                           initI2C@i 0021                       ??_bitExtracted 0022  
                       ?_changeHeure 0076                          ??_incrHeure 0025  
                         _INTCONbits 000B                        _printReglageH 02C1  
                     incrHeure@heure 002A                             intlevel1 0000  
              ?_I2C_FunctionComplete 0076                        writeData@data 0026  
            ?_PIN_MANAGER_Initialize 0076                I2C_MasterRead@trBlock 0048  
                  __CFG_CLKOUTEN$OFF 0000                   bitExtracted@number 0024  
            __size_of_convertFromBcd 001E               I2C_MasterWrite@trBlock 004C  
                         _OPTION_REG 0095                       ?_printReglageH 0076  
                        ??_writeData 0025                          ??_writeInst 0021  
                      writeInst@Inst 0022          __end_of_I2C_BusCollisionISR 0772  
     __end_of_PIN_MANAGER_Initialize 0621  
